{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9019\u662f\u4ec0\u9ebc? \u00b6 FinMind \u63d0\u4f9b\u4ee5\u53f0\u80a1\u70ba\u4e3b\uff0c\u8d85\u904e 50 \u7a2e\u91d1\u878d\u958b\u6e90\u6578\u64da( open data )\uff0c\u5e0c\u671b\u8b93\u5927\u6578\u64da\u3001\u8cc7\u6599\u5206\u6790\uff0c\u6e1b\u5c11\u8cc7\u6599\u6536\u96c6\u7684\u9580\u6abb\u3002 \u6280\u8853\u9762 : \u53f0\u80a1\u80a1\u50f9 daily\u3001\u6b77\u53f2 tick \u9010\u7b46\u4ea4\u6613\u3001PER\u3001PBR\u3001\u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08\u3001\u53f0\u80a1\u52a0\u6b0a\u6307\u6578\u3002 \u57fa\u672c\u9762 : \u7d9c\u5408\u640d\u76ca\u8868\u3001\u73fe\u91d1\u6d41\u91cf\u8868\u3001\u8cc7\u7522\u8ca0\u50b5\u8868\u3001\u80a1\u5229\u653f\u7b56\u8868\u3001\u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868\u3001\u6708\u71df\u6536\u3002 \u7c4c\u78bc\u9762 : \u5916\u8cc7\u6301\u80a1\u3001\u80a1\u6b0a\u5206\u6563\u8868\u3001\u878d\u8cc7\u878d\u5238\u3001\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3\u3001\u501f\u5238\u6210\u4ea4\u660e\u7d30\u3002 \u6d88\u606f\u9762 : \u53f0\u80a1\u76f8\u95dc\u65b0\u805e\u3002 \u884d\u751f\u6027\u5546\u54c1 : \u671f\u8ca8\u3001\u9078\u64c7\u6b0a daily data\u3001\u5373\u6642\u5831\u50f9\u3001\u4ea4\u6613\u660e\u7d30\u3002 \u570b\u969b\u5e02\u5834 : \u7f8e\u80a1\u80a1\u50f9 daily\u3001minute\u3001\u7f8e\u570b\u50b5\u5238\u6b96\u5229\u7387\u3001\u8ca8\u5e63\u767c\u884c\u91cf(\u7f8e\u570b)\u3001\u9ec3\u91d1\u50f9\u683c\u3001\u539f\u6cb9\u50f9\u683c\u3001G8 \u592e\u884c\u5229\u7387\u3001G8 \u532f\u7387\u3001 \u8cc7\u6599\u6bcf\u5929\u66f4\u65b0\u3002\u4f60\u4e0d\u9700\u6536\u96c6\u8cc7\u6599\uff0c\u5c31\u53ef\u9032\u884c\u5206\u6790\u3002\u672a\u4f86\u5c07\u6301\u7e8c\u65b0\u589e\u66f4\u591a data\u3002 What is it? \u00b6 FinMind is open source of more than 50 datasets , contain Taiwan stock trade data daily\u3001tick, Financial Statements, Balance Sheet, Cash Flows Statement, Month Revenue, Holding Shares Per, Institutional Investors Buy Sell. Taiwan Futures Trade Detail, Taiwan Option Trade Detail. US stock price daily, minute ( 2019-06-01 ~ now, total more than 80 million data ), oil price, gold price, G7 exchange rate, interest rate. US Government Bonds Yield. The datasets are automatically updated daily. You can analyze financial data without having to collect the data by yourself.","title":"\u7e3d\u89bd"},{"location":"#_1","text":"FinMind \u63d0\u4f9b\u4ee5\u53f0\u80a1\u70ba\u4e3b\uff0c\u8d85\u904e 50 \u7a2e\u91d1\u878d\u958b\u6e90\u6578\u64da( open data )\uff0c\u5e0c\u671b\u8b93\u5927\u6578\u64da\u3001\u8cc7\u6599\u5206\u6790\uff0c\u6e1b\u5c11\u8cc7\u6599\u6536\u96c6\u7684\u9580\u6abb\u3002 \u6280\u8853\u9762 : \u53f0\u80a1\u80a1\u50f9 daily\u3001\u6b77\u53f2 tick \u9010\u7b46\u4ea4\u6613\u3001PER\u3001PBR\u3001\u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08\u3001\u53f0\u80a1\u52a0\u6b0a\u6307\u6578\u3002 \u57fa\u672c\u9762 : \u7d9c\u5408\u640d\u76ca\u8868\u3001\u73fe\u91d1\u6d41\u91cf\u8868\u3001\u8cc7\u7522\u8ca0\u50b5\u8868\u3001\u80a1\u5229\u653f\u7b56\u8868\u3001\u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868\u3001\u6708\u71df\u6536\u3002 \u7c4c\u78bc\u9762 : \u5916\u8cc7\u6301\u80a1\u3001\u80a1\u6b0a\u5206\u6563\u8868\u3001\u878d\u8cc7\u878d\u5238\u3001\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3\u3001\u501f\u5238\u6210\u4ea4\u660e\u7d30\u3002 \u6d88\u606f\u9762 : \u53f0\u80a1\u76f8\u95dc\u65b0\u805e\u3002 \u884d\u751f\u6027\u5546\u54c1 : \u671f\u8ca8\u3001\u9078\u64c7\u6b0a daily data\u3001\u5373\u6642\u5831\u50f9\u3001\u4ea4\u6613\u660e\u7d30\u3002 \u570b\u969b\u5e02\u5834 : \u7f8e\u80a1\u80a1\u50f9 daily\u3001minute\u3001\u7f8e\u570b\u50b5\u5238\u6b96\u5229\u7387\u3001\u8ca8\u5e63\u767c\u884c\u91cf(\u7f8e\u570b)\u3001\u9ec3\u91d1\u50f9\u683c\u3001\u539f\u6cb9\u50f9\u683c\u3001G8 \u592e\u884c\u5229\u7387\u3001G8 \u532f\u7387\u3001 \u8cc7\u6599\u6bcf\u5929\u66f4\u65b0\u3002\u4f60\u4e0d\u9700\u6536\u96c6\u8cc7\u6599\uff0c\u5c31\u53ef\u9032\u884c\u5206\u6790\u3002\u672a\u4f86\u5c07\u6301\u7e8c\u65b0\u589e\u66f4\u591a data\u3002","title":"\u9019\u662f\u4ec0\u9ebc?"},{"location":"#what-is-it","text":"FinMind is open source of more than 50 datasets , contain Taiwan stock trade data daily\u3001tick, Financial Statements, Balance Sheet, Cash Flows Statement, Month Revenue, Holding Shares Per, Institutional Investors Buy Sell. Taiwan Futures Trade Detail, Taiwan Option Trade Detail. US stock price daily, minute ( 2019-06-01 ~ now, total more than 80 million data ), oil price, gold price, G7 exchange rate, interest rate. US Government Bonds Yield. The datasets are automatically updated daily. You can analyze financial data without having to collect the data by yourself.","title":"What is it?"},{"location":"Contact/","text":"Chat: \u00b6 Issue: GitHub \u00b6 other: FinMind.TW@gmail.com \u00b6","title":"\u806f\u7d61\u6211\u5011"},{"location":"Contact/#chat","text":"","title":"Chat:"},{"location":"Contact/#issue-github","text":"","title":"Issue: GitHub"},{"location":"Contact/#other-finmindtwgmailcom","text":"","title":"other: FinMind.TW@gmail.com"},{"location":"Donate/","text":"\u8d0a\u52a9\u6211\u5011\u767c\u5c55\u66f4\u591a\u529f\u80fd (\u91d1\u984d\u7531\u4f60\u6c7a\u5b9a) \u00b6","title":"\u8d0a\u52a9\u6211\u5011"},{"location":"Donate/#_1","text":"","title":"\u8d0a\u52a9\u6211\u5011\u767c\u5c55\u66f4\u591a\u529f\u80fd (\u91d1\u984d\u7531\u4f60\u6c7a\u5b9a)"},{"location":"License/","text":"License \u00b6 \u672c\u5c08\u6848\u63d0\u4f9b\u7684\u6240\u6709\u5167\u5bb9\u5747\u7528\u65bc\u6559\u80b2\u3001\u975e\u5546\u696d\u7528\u9014\u3002\u8cc7\u6599\u50c5\u4f9b\u53c3\u8003\uff0c\u4f7f\u7528\u8005\u4f9d\u672c\u8cc7\u6599\u4ea4\u6613\u767c\u751f\u4ea4\u6613\u640d\u5931\u9700\u81ea\u884c\u8ca0\u8cac\uff0c\u672c\u5c08\u6848\u4e0d\u5c0d\u8cc7\u6599\u5167\u5bb9\u932f\u8aa4\u3001\u66f4\u65b0\u5ef6\u8aa4\u6216\u50b3\u8f38\u4e2d\u65b7\u8ca0\u4efb\u4f55\u8cac\u4efb\u3002 \u00b6","title":"\u4f7f\u7528\u689d\u6b3e"},{"location":"License/#license","text":"","title":"License"},{"location":"License/#_1","text":"","title":"\u672c\u5c08\u6848\u63d0\u4f9b\u7684\u6240\u6709\u5167\u5bb9\u5747\u7528\u65bc\u6559\u80b2\u3001\u975e\u5546\u696d\u7528\u9014\u3002\u8cc7\u6599\u50c5\u4f9b\u53c3\u8003\uff0c\u4f7f\u7528\u8005\u4f9d\u672c\u8cc7\u6599\u4ea4\u6613\u767c\u751f\u4ea4\u6613\u640d\u5931\u9700\u81ea\u884c\u8ca0\u8cac\uff0c\u672c\u5c08\u6848\u4e0d\u5c0d\u8cc7\u6599\u5167\u5bb9\u932f\u8aa4\u3001\u66f4\u65b0\u5ef6\u8aa4\u6216\u50b3\u8f38\u4e2d\u65b7\u8ca0\u4efb\u4f55\u8cac\u4efb\u3002"},{"location":"StressTest/","text":"\u4f7f\u7528 ApacheBench \u58d3\u6e2c\uff0c\u7d50\u679c\u5982\u4e0b \u00b6 \u91dd\u5c0d\u6700\u5e38\u7528\u7684 \u53f0\u80a1 tick \u5373\u6642\u8cc7\u6599 \u505a\u67e5\u8a62 \u00b6 \u6e2c\u8a66\u74b0\u5883\u4e00\u3001colab \u00b6 \u6a21\u64ec 10 \u500b\u4f7f\u7528\u8005\u767c\u9001 1000 \u500b request\uff0c\u5e73\u5747\u4e00\u79d2\u53ef\u627f\u53d7 10 \u6b21 request \u67e5\u8a62\uff0c \u4e00\u5c0f\u6642\u7d04 36,000 \u6b21 request\u3002 \u5e73\u5747\u4e00\u6b21\u56de\u61c9\u7d04 72 ms\u3002 \u6e2c\u8a66\u7d30\u7bc0\u5982\u4e0b Concurrency Level: 10 Time taken for tests: 72.275 seconds Complete requests: 1000 Failed requests: 0 Total transferred: 10179000 bytes HTML transferred: 10019000 bytes Requests per second: 13.84 [#/sec] (mean) Time per request: 722.748 [ms] (mean) Time per request: 72.275 [ms] (mean, across all concurrent requests) Transfer rate: 137.54 [Kbytes/sec] received \u6e2c\u8a66\u74b0\u5883\u4e8c\u3001linode \u96f2\u7aef(\u65e5\u672c) \u00b6 \u6a21\u64ec 10 \u500b\u4f7f\u7528\u8005\u767c\u9001 1000 \u500b request\uff0c\u5e73\u5747\u4e00\u79d2\u53ef\u627f\u53d7 50 \u6b21 request \u67e5\u8a62\uff0c \u4e00\u5c0f\u6642\u7d04 180,000 \u6b21 request\u3002 \u5e73\u5747\u4e00\u6b21\u56de\u61c9\u7d04 17 ms\u3002 \u6e2c\u8a66\u7d30\u7bc0\u5982\u4e0b Concurrency Level: 10 Time taken for tests: 17.095 seconds Complete requests: 1000 Failed requests: 0 Total transferred: 10179000 bytes HTML transferred: 10019000 bytes Requests per second: 58.50 [#/sec] (mean) Time per request: 170.947 [ms] (mean) Time per request: 17.095 [ms] (mean, across all concurrent requests) Transfer rate: 581.49 [Kbytes/sec] received","title":"\u58d3\u529b\u6e2c\u8a66"},{"location":"StressTest/#apachebench","text":"","title":"\u4f7f\u7528 ApacheBench \u58d3\u6e2c\uff0c\u7d50\u679c\u5982\u4e0b"},{"location":"StressTest/#tick","text":"","title":"\u91dd\u5c0d\u6700\u5e38\u7528\u7684 \u53f0\u80a1 tick \u5373\u6642\u8cc7\u6599 \u505a\u67e5\u8a62"},{"location":"StressTest/#colab","text":"\u6a21\u64ec 10 \u500b\u4f7f\u7528\u8005\u767c\u9001 1000 \u500b request\uff0c\u5e73\u5747\u4e00\u79d2\u53ef\u627f\u53d7 10 \u6b21 request \u67e5\u8a62\uff0c \u4e00\u5c0f\u6642\u7d04 36,000 \u6b21 request\u3002 \u5e73\u5747\u4e00\u6b21\u56de\u61c9\u7d04 72 ms\u3002 \u6e2c\u8a66\u7d30\u7bc0\u5982\u4e0b Concurrency Level: 10 Time taken for tests: 72.275 seconds Complete requests: 1000 Failed requests: 0 Total transferred: 10179000 bytes HTML transferred: 10019000 bytes Requests per second: 13.84 [#/sec] (mean) Time per request: 722.748 [ms] (mean) Time per request: 72.275 [ms] (mean, across all concurrent requests) Transfer rate: 137.54 [Kbytes/sec] received","title":"\u6e2c\u8a66\u74b0\u5883\u4e00\u3001colab"},{"location":"StressTest/#linode","text":"\u6a21\u64ec 10 \u500b\u4f7f\u7528\u8005\u767c\u9001 1000 \u500b request\uff0c\u5e73\u5747\u4e00\u79d2\u53ef\u627f\u53d7 50 \u6b21 request \u67e5\u8a62\uff0c \u4e00\u5c0f\u6642\u7d04 180,000 \u6b21 request\u3002 \u5e73\u5747\u4e00\u6b21\u56de\u61c9\u7d04 17 ms\u3002 \u6e2c\u8a66\u7d30\u7bc0\u5982\u4e0b Concurrency Level: 10 Time taken for tests: 17.095 seconds Complete requests: 1000 Failed requests: 0 Total transferred: 10179000 bytes HTML transferred: 10019000 bytes Requests per second: 58.50 [#/sec] (mean) Time per request: 170.947 [ms] (mean) Time per request: 17.095 [ms] (mean, across all concurrent requests) Transfer rate: 581.49 [Kbytes/sec] received","title":"\u6e2c\u8a66\u74b0\u5883\u4e8c\u3001linode \u96f2\u7aef(\u65e5\u672c)"},{"location":"WhatIsNew/","text":"2021-10-06 \u00b6 release FinMind package 1.5.3\uff0c\u8655\u7406 connect error \u554f\u984c \u589e\u52a0 FinMind package \u6587\u4ef6 2021-08-01 \u00b6 \u7531\u65bc\u8cc7\u6599\u6e90\u554f\u984c\uff0c\u79fb\u9664\u5373\u6642\u5831\u50f9 2021-05-23 \u00b6 \u65b0\u589e \u878d\u5238\u501f\u5238\u8ce3\u51fa TaiwanDailyShortSaleBalances 2021-03-18 \u00b6 \u65b0\u589e \u7576\u65e5\u6c96\u92b7\u4ea4\u6613\u6a19\u7684\u53ca\u6210\u4ea4\u91cf\u503c TaiwanStockDayTrading \u3002 2021-02-22 \u00b6 \u65b0\u589e streaming_all_data \u53c3\u6578\uff0c\u53ef\u62ff\u53d6\u5373\u6642\u8cc7\u6599(tick)\uff0c\u958b\u76e4\u5230\u7576\u4e0b\u6240\u6709 data\u3002 2021-01-26 \u00b6 \u65b0\u589e CnnFearGreedIndex \u6050\u61fc\u8207\u8caa\u5a6a\u6307\u6578 \u8a3b\u518a\u6703\u54e1\u7a81\u7834500\u4eba\u3002 2021-01-25 \u00b6 web \u6b63\u5f0f\u4e0a\u7dda\uff0c\u5305\u542b\u7b56\u7565\u5206\u6790\u3001\u56de\u6e2c\u529f\u80fd\uff0c\u5206\u6790\u5168\u5e02\u5834\u80a1\u7968\u52dd\u7387\uff0c\u964d\u4f4e\u751f\u5b58\u8005\u504f\u5dee\u3002 \u958b\u59cb\u4e0b\u4e00\u968e\u6bb5 web \u958b\u767c\u3002 2021-01-18 \u00b6 \u65b0\u589e \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3 \u65b0\u589e \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5404\u5377\u5546\u65e5\u4ea4\u6613\u8cc7\u8a0a web \u56de\u6e2c\u3001\u7b56\u7565\u5206\u6790\u529f\u80fd\uff0c\u9810\u8a08\u8fd1\u671f\u4e0a\u7dda\u3002\u53ef\u91dd\u5c0d\u7279\u5b9a\u7b56\u7565\uff0c\u5206\u6790\u5168\u5e02\u5834\u80a1\u7968\u52dd\u7387\uff0c\u964d\u4f4e\u751f\u5b58\u8005\u504f\u5dee\u3002 api v4 \u4e0a\u7dda\uff0c\u53ef\u4e00\u6b21\u62ff\u53d6\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u80a1\u50f9\u3001\u4e09\u5927\u6cd5\u4eba\u3001\u878d\u8cc7\u5238\u7b49\u8cc7\u8a0a\uff0c\u65b9\u4fbf\u4f7f\u7528\u8005\u9032\u884c\u6bcf\u65e5\u66f4\u65b0\u6642\uff0c\u53ea\u9700\u8981\u767c\u5c11\u91cf request\u3002 2020-12-25 \u00b6 \u8cc7\u6599\u5df2\u5168\u90e8\u8f49\u79fb\u5230\u6642\u9593\u5e8f\u5217\u8cc7\u6599\u5eab\uff0c\u91dd\u5c0d tick data\uff0c\u56de\u61c9\u901f\u5ea6\u63d0\u5347 10 \u500d\u4ee5\u4e0a\u3002 web data \u4e0b\u8f09 FinMind \u56de\u6e2c package \u8aaa\u660e\u6587\u4ef6 \uff0c\u6b63\u5728\u512a\u5316\u4e2d\u3002 2020-10-06 \u00b6 \u9810\u8a08\u6539\u7528\u6642\u9593\u5e8f\u5217\u8cc7\u6599\u5eab\uff0c\u589e\u52a0 api \u6548\u7387\u3002 \u9032\u884c\u56de\u6e2c\u529f\u80fd\u958b\u767c\u3002 web \u958b\u767c data \u4e0b\u8f09\u529f\u80fd\uff0c\u7531\u65bc\u5927\u591a\u6578\u4eba\uff0c\u4f7f\u7528 excel \u9032\u884c\u91d1\u878d\u5206\u6790\uff0c\u56e0\u6b64\u958b\u767c web \u4e0b\u8f09 excel data \u529f\u80fd\u3002 2020-05-06 \u00b6 \u65b0\u589e \u501f\u5238\u6210\u4ea4\u660e\u7d30 SecuritiesLending \u65b0\u589e \u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 StockStatisticsOfOrderBookAndTrade 2020-05-01 \u00b6 \u65b0\u589e \u53f0\u80a1\u671f\u8ca8 daily data \u65b0\u589e \u53f0\u80a1\u9078\u64c7\u6b0a daily data 2020-04-24 \u00b6 \u65b0\u589e \u53f0\u80a1\u5373\u6642\u6700\u4f73\u4e94\u6a94 \u65b0\u589e \u53f0\u80a1\u671f\u8ca8\u5373\u6642\u5831\u50f9 2020-04-15 \u00b6 \u65b0\u589e document \u65b0\u589e \u53f0\u80a1\u5373\u6642\u80a1\u50f9 \u65b0\u589e \u7f8e\u570b\u50b5\u5238\u6b96\u5229\u7387 \u65b0\u589e \u53f0\u7063\u500b\u80a1PER\u3001PBR\u8cc7\u6599\u8868 TaiwanStockPER 2019-10-23 \u00b6 \u65b0\u589e TotalMarginPurchaseShortSale \u7576\u5929\u7e3d\u9ad4\u878d\u8cc7\u878d\u5238\u8cb7\u8ce3 \u65b0\u589e TaiwanStockNews \u53f0\u80a1\u76f8\u95dc\u65b0\u805e 2019-10-10 \u00b6 \u65b0\u589e TaiwanFutures \u53f0\u80a1\u671f\u8ca8\u4ea4\u6613\u660e\u7d30 \u65b0\u589e TaiwanOption \u53f0\u80a1\u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30 FinMind 1.0.80 (2019-07-15) \u00b6 \u91cd\u5927\u66f4\u65b0\uff0c\u904e\u53bb\u662f\u76f4\u63a5\u9023 DataBase\uff0c\u76ee\u524d\u6539\u8d70 api \u65b9\u5f0f\uff0c\u672a\u4f86\u820a\u7248 package \u5c07\u6703\u5931\u6548\uff0c\u7121\u6cd5\u76f4\u63a5\u9023 DataBase\u3002\u8acb\u66f4\u65b0\u5230\u6700\u65b0\u7248\u672c\uff0c\u6216\u662f\u76f4\u63a5\u8d70 api\u3002 FinMind 1.0.70 (2019-06-23) \u00b6 add api add function Mind.MoveAverage , e.g : Mind . MoveAverage ( _2330 . StockPrice , days = 5 , variable = 'close' ) add function Mind.RSV , e.g : Mind.RSV(_2330.StockPrice,days = 5) add function Mind.BIAS , e.g : Mind.BIAS(_2330.StockPrice,days = 5) FinMind 1.0.60 (2019-05-24) \u00b6 New data TaiwanStockMonthRevenue from FinMind.Data import Load TaiwanStockMonthRevenue = Load . FinData ( dataset = 'TaiwanStockMonthRevenue' , select = '2330' , date = '2018-01-01' ) Market index: TSEC weighted index ( Taiwan weighted index ) : stock_id - ^TWII SP500 : stock_id - ^GSPC Dow Jones Industrial Average : stock_id - ^DJI FinMind 1.0.57 (2019-04-28) \u00b6 Change taiwan stock id, delete TWO and TW. ( eg. 2330.TW -> 2330 ) FinMind 1.0.54 (2019-04-13) \u00b6 Optimize speeds of loading TaiwanStockPrice, USStockPrice Add DataSource FinMind 1.0.53 (2019-04-07) \u00b6 Fix FinMind.Data.Load \u00b6 optimize speeds of loading data , ex : from FinMind.Data import Load import datetime TaiwanStockInfo = Load . FinData ( dataset = 'TaiwanStockInfo' ) s = datetime . datetime . now () TaiwanStockFinancialStatements = Load . FinData ( dataset = 'FinancialStatements' , select = list ( TaiwanStockInfo [ 'stock_id' ]), date = '2018-12-01' ) t = datetime . datetime . now () - s print ( t ) 0 : 00 : 01.861724 FinMind 1.0.52 (2019-04-06) \u00b6 New Data \u00b6 BalanceSheet ( Taiwan \u8cc7\u7522\u8ca0\u50b5\u8868 ) TaiwanStockHoldingSharesPer ( Taiwan \u80a1\u6b0a\u5206\u6563\u8868 ) Shareholding ( Taiwan \u500b\u80a1\u5916\u8cc7\u6301\u80a1 ) RawMaterialFuturesPrices ( \u7f8e\u570b\u539f\u7269\u6599\u671f\u8ca8 ) New Function \u00b6 transpose(data) demp2.py 2018/8/5 \u00b6 \u592e\u884c\u5229\u7387 100% ( 13 Countrys, Contains G8 ) FED Federal Reserve System \u7f8e\u570b ECB European Central Bank \u6b50\u6d32 BOE Bank of England \u82f1\u570b SNB Swiss National Bank \u745e\u58eb RBA Reserve Bank of Australia \u6fb3\u6d32 BOC Bank of Canada \u52a0\u62ff\u5927 RBNZ Reserve Bank of New Zealand \u7d10\u897f\u862d BOJ Bank of Japan \u65e5\u672c CBR The Central Bank of the Russian Federation \u4fc4\u7f85\u65af RBI Reserve Bank of India \u5370\u5ea6 PBOC People ' s Bank of China \u4e2d\u570b BCB Banco Central do Brasil \u5df4\u897f Gold Price 100% Government bond ->>> https://data.oecd.org/interest/long-term-interest-rates.htm \u671f\u8ca8 ->>> https://www.investing.com/commodities/energies S&P 500\u6307\u6578\uff0c\u4e26\u722c\u53d6\u8a72 500 \u5bb6\u80a1\u7968\u80a1\u50f9 ->>> 2018/7/5 \u00b6 \u570b\u969b\u6cb9\u50f9 \u8b80\u53d6\u7bc4\u4f8b Load data example. (100%) \u5404\u570b\u532f\u7387 ( 53 Countrys, Contains G8 ) (100%) 2018/7/2 \u672a\u4f86\u722c\u87f2\u9806\u5e8f \u00b6 \u592e\u884c\u5229\u7387 from https://tradingeconomics.com/search.aspx?q=Interest%20Rate Inflation (\u901a\u8ca8\u81a8\u8139) monthly from https://tradingeconomics.com/russia/inflation-cpi Consumer Price Index (CPI) monthly from https://tradingeconomics.com/russia/consumer-price-index-cpi Output Gap monthly from https://tradingeconomics.com/russia/gdp-deflator S&P 500 from yahoo finance \u9ec3\u91d1\u50f9\u683c from https://www.gold.org/data/gold-price","title":"What's New"},{"location":"WhatIsNew/#2021-10-06","text":"release FinMind package 1.5.3\uff0c\u8655\u7406 connect error \u554f\u984c \u589e\u52a0 FinMind package \u6587\u4ef6","title":"2021-10-06"},{"location":"WhatIsNew/#2021-08-01","text":"\u7531\u65bc\u8cc7\u6599\u6e90\u554f\u984c\uff0c\u79fb\u9664\u5373\u6642\u5831\u50f9","title":"2021-08-01"},{"location":"WhatIsNew/#2021-05-23","text":"\u65b0\u589e \u878d\u5238\u501f\u5238\u8ce3\u51fa TaiwanDailyShortSaleBalances","title":"2021-05-23"},{"location":"WhatIsNew/#2021-03-18","text":"\u65b0\u589e \u7576\u65e5\u6c96\u92b7\u4ea4\u6613\u6a19\u7684\u53ca\u6210\u4ea4\u91cf\u503c TaiwanStockDayTrading \u3002","title":"2021-03-18"},{"location":"WhatIsNew/#2021-02-22","text":"\u65b0\u589e streaming_all_data \u53c3\u6578\uff0c\u53ef\u62ff\u53d6\u5373\u6642\u8cc7\u6599(tick)\uff0c\u958b\u76e4\u5230\u7576\u4e0b\u6240\u6709 data\u3002","title":"2021-02-22"},{"location":"WhatIsNew/#2021-01-26","text":"\u65b0\u589e CnnFearGreedIndex \u6050\u61fc\u8207\u8caa\u5a6a\u6307\u6578 \u8a3b\u518a\u6703\u54e1\u7a81\u7834500\u4eba\u3002","title":"2021-01-26"},{"location":"WhatIsNew/#2021-01-25","text":"web \u6b63\u5f0f\u4e0a\u7dda\uff0c\u5305\u542b\u7b56\u7565\u5206\u6790\u3001\u56de\u6e2c\u529f\u80fd\uff0c\u5206\u6790\u5168\u5e02\u5834\u80a1\u7968\u52dd\u7387\uff0c\u964d\u4f4e\u751f\u5b58\u8005\u504f\u5dee\u3002 \u958b\u59cb\u4e0b\u4e00\u968e\u6bb5 web \u958b\u767c\u3002","title":"2021-01-25"},{"location":"WhatIsNew/#2021-01-18","text":"\u65b0\u589e \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3 \u65b0\u589e \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5404\u5377\u5546\u65e5\u4ea4\u6613\u8cc7\u8a0a web \u56de\u6e2c\u3001\u7b56\u7565\u5206\u6790\u529f\u80fd\uff0c\u9810\u8a08\u8fd1\u671f\u4e0a\u7dda\u3002\u53ef\u91dd\u5c0d\u7279\u5b9a\u7b56\u7565\uff0c\u5206\u6790\u5168\u5e02\u5834\u80a1\u7968\u52dd\u7387\uff0c\u964d\u4f4e\u751f\u5b58\u8005\u504f\u5dee\u3002 api v4 \u4e0a\u7dda\uff0c\u53ef\u4e00\u6b21\u62ff\u53d6\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u80a1\u50f9\u3001\u4e09\u5927\u6cd5\u4eba\u3001\u878d\u8cc7\u5238\u7b49\u8cc7\u8a0a\uff0c\u65b9\u4fbf\u4f7f\u7528\u8005\u9032\u884c\u6bcf\u65e5\u66f4\u65b0\u6642\uff0c\u53ea\u9700\u8981\u767c\u5c11\u91cf request\u3002","title":"2021-01-18"},{"location":"WhatIsNew/#2020-12-25","text":"\u8cc7\u6599\u5df2\u5168\u90e8\u8f49\u79fb\u5230\u6642\u9593\u5e8f\u5217\u8cc7\u6599\u5eab\uff0c\u91dd\u5c0d tick data\uff0c\u56de\u61c9\u901f\u5ea6\u63d0\u5347 10 \u500d\u4ee5\u4e0a\u3002 web data \u4e0b\u8f09 FinMind \u56de\u6e2c package \u8aaa\u660e\u6587\u4ef6 \uff0c\u6b63\u5728\u512a\u5316\u4e2d\u3002","title":"2020-12-25"},{"location":"WhatIsNew/#2020-10-06","text":"\u9810\u8a08\u6539\u7528\u6642\u9593\u5e8f\u5217\u8cc7\u6599\u5eab\uff0c\u589e\u52a0 api \u6548\u7387\u3002 \u9032\u884c\u56de\u6e2c\u529f\u80fd\u958b\u767c\u3002 web \u958b\u767c data \u4e0b\u8f09\u529f\u80fd\uff0c\u7531\u65bc\u5927\u591a\u6578\u4eba\uff0c\u4f7f\u7528 excel \u9032\u884c\u91d1\u878d\u5206\u6790\uff0c\u56e0\u6b64\u958b\u767c web \u4e0b\u8f09 excel data \u529f\u80fd\u3002","title":"2020-10-06"},{"location":"WhatIsNew/#2020-05-06","text":"\u65b0\u589e \u501f\u5238\u6210\u4ea4\u660e\u7d30 SecuritiesLending \u65b0\u589e \u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 StockStatisticsOfOrderBookAndTrade","title":"2020-05-06"},{"location":"WhatIsNew/#2020-05-01","text":"\u65b0\u589e \u53f0\u80a1\u671f\u8ca8 daily data \u65b0\u589e \u53f0\u80a1\u9078\u64c7\u6b0a daily data","title":"2020-05-01"},{"location":"WhatIsNew/#2020-04-24","text":"\u65b0\u589e \u53f0\u80a1\u5373\u6642\u6700\u4f73\u4e94\u6a94 \u65b0\u589e \u53f0\u80a1\u671f\u8ca8\u5373\u6642\u5831\u50f9","title":"2020-04-24"},{"location":"WhatIsNew/#2020-04-15","text":"\u65b0\u589e document \u65b0\u589e \u53f0\u80a1\u5373\u6642\u80a1\u50f9 \u65b0\u589e \u7f8e\u570b\u50b5\u5238\u6b96\u5229\u7387 \u65b0\u589e \u53f0\u7063\u500b\u80a1PER\u3001PBR\u8cc7\u6599\u8868 TaiwanStockPER","title":"2020-04-15"},{"location":"WhatIsNew/#2019-10-23","text":"\u65b0\u589e TotalMarginPurchaseShortSale \u7576\u5929\u7e3d\u9ad4\u878d\u8cc7\u878d\u5238\u8cb7\u8ce3 \u65b0\u589e TaiwanStockNews \u53f0\u80a1\u76f8\u95dc\u65b0\u805e","title":"2019-10-23"},{"location":"WhatIsNew/#2019-10-10","text":"\u65b0\u589e TaiwanFutures \u53f0\u80a1\u671f\u8ca8\u4ea4\u6613\u660e\u7d30 \u65b0\u589e TaiwanOption \u53f0\u80a1\u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30","title":"2019-10-10"},{"location":"WhatIsNew/#finmind-1080-2019-07-15","text":"\u91cd\u5927\u66f4\u65b0\uff0c\u904e\u53bb\u662f\u76f4\u63a5\u9023 DataBase\uff0c\u76ee\u524d\u6539\u8d70 api \u65b9\u5f0f\uff0c\u672a\u4f86\u820a\u7248 package \u5c07\u6703\u5931\u6548\uff0c\u7121\u6cd5\u76f4\u63a5\u9023 DataBase\u3002\u8acb\u66f4\u65b0\u5230\u6700\u65b0\u7248\u672c\uff0c\u6216\u662f\u76f4\u63a5\u8d70 api\u3002","title":"FinMind 1.0.80 (2019-07-15)"},{"location":"WhatIsNew/#finmind-1070-2019-06-23","text":"add api add function Mind.MoveAverage , e.g : Mind . MoveAverage ( _2330 . StockPrice , days = 5 , variable = 'close' ) add function Mind.RSV , e.g : Mind.RSV(_2330.StockPrice,days = 5) add function Mind.BIAS , e.g : Mind.BIAS(_2330.StockPrice,days = 5)","title":"FinMind 1.0.70 (2019-06-23)"},{"location":"WhatIsNew/#finmind-1060-2019-05-24","text":"New data TaiwanStockMonthRevenue from FinMind.Data import Load TaiwanStockMonthRevenue = Load . FinData ( dataset = 'TaiwanStockMonthRevenue' , select = '2330' , date = '2018-01-01' ) Market index: TSEC weighted index ( Taiwan weighted index ) : stock_id - ^TWII SP500 : stock_id - ^GSPC Dow Jones Industrial Average : stock_id - ^DJI","title":"FinMind 1.0.60 (2019-05-24)"},{"location":"WhatIsNew/#finmind-1057-2019-04-28","text":"Change taiwan stock id, delete TWO and TW. ( eg. 2330.TW -> 2330 )","title":"FinMind 1.0.57 (2019-04-28)"},{"location":"WhatIsNew/#finmind-1054-2019-04-13","text":"Optimize speeds of loading TaiwanStockPrice, USStockPrice Add DataSource","title":"FinMind 1.0.54 (2019-04-13)"},{"location":"WhatIsNew/#finmind-1053-2019-04-07","text":"","title":"FinMind 1.0.53 (2019-04-07)"},{"location":"WhatIsNew/#fix-finminddataload","text":"optimize speeds of loading data , ex : from FinMind.Data import Load import datetime TaiwanStockInfo = Load . FinData ( dataset = 'TaiwanStockInfo' ) s = datetime . datetime . now () TaiwanStockFinancialStatements = Load . FinData ( dataset = 'FinancialStatements' , select = list ( TaiwanStockInfo [ 'stock_id' ]), date = '2018-12-01' ) t = datetime . datetime . now () - s print ( t ) 0 : 00 : 01.861724","title":"Fix FinMind.Data.Load"},{"location":"WhatIsNew/#finmind-1052-2019-04-06","text":"","title":"FinMind 1.0.52 (2019-04-06)"},{"location":"WhatIsNew/#new-data","text":"BalanceSheet ( Taiwan \u8cc7\u7522\u8ca0\u50b5\u8868 ) TaiwanStockHoldingSharesPer ( Taiwan \u80a1\u6b0a\u5206\u6563\u8868 ) Shareholding ( Taiwan \u500b\u80a1\u5916\u8cc7\u6301\u80a1 ) RawMaterialFuturesPrices ( \u7f8e\u570b\u539f\u7269\u6599\u671f\u8ca8 )","title":"New Data"},{"location":"WhatIsNew/#new-function","text":"transpose(data) demp2.py","title":"New Function"},{"location":"WhatIsNew/#201885","text":"\u592e\u884c\u5229\u7387 100% ( 13 Countrys, Contains G8 ) FED Federal Reserve System \u7f8e\u570b ECB European Central Bank \u6b50\u6d32 BOE Bank of England \u82f1\u570b SNB Swiss National Bank \u745e\u58eb RBA Reserve Bank of Australia \u6fb3\u6d32 BOC Bank of Canada \u52a0\u62ff\u5927 RBNZ Reserve Bank of New Zealand \u7d10\u897f\u862d BOJ Bank of Japan \u65e5\u672c CBR The Central Bank of the Russian Federation \u4fc4\u7f85\u65af RBI Reserve Bank of India \u5370\u5ea6 PBOC People ' s Bank of China \u4e2d\u570b BCB Banco Central do Brasil \u5df4\u897f Gold Price 100% Government bond ->>> https://data.oecd.org/interest/long-term-interest-rates.htm \u671f\u8ca8 ->>> https://www.investing.com/commodities/energies S&P 500\u6307\u6578\uff0c\u4e26\u722c\u53d6\u8a72 500 \u5bb6\u80a1\u7968\u80a1\u50f9 ->>>","title":"2018/8/5"},{"location":"WhatIsNew/#201875","text":"\u570b\u969b\u6cb9\u50f9 \u8b80\u53d6\u7bc4\u4f8b Load data example. (100%) \u5404\u570b\u532f\u7387 ( 53 Countrys, Contains G8 ) (100%)","title":"2018/7/5"},{"location":"WhatIsNew/#201872","text":"\u592e\u884c\u5229\u7387 from https://tradingeconomics.com/search.aspx?q=Interest%20Rate Inflation (\u901a\u8ca8\u81a8\u8139) monthly from https://tradingeconomics.com/russia/inflation-cpi Consumer Price Index (CPI) monthly from https://tradingeconomics.com/russia/consumer-price-index-cpi Output Gap monthly from https://tradingeconomics.com/russia/gdp-deflator S&P 500 from yahoo finance \u9ec3\u91d1\u50f9\u683c from https://www.gold.org/data/gold-price","title":"2018/7/2 \u672a\u4f86\u722c\u87f2\u9806\u5e8f"},{"location":"api_usage_count/","text":"API \u4f7f\u7528\u6b21\u6578 \u00b6 \u4f7f\u7528 token\uff0c\u62ff\u53d6 API \u4f7f\u7528\u6b21\u6578 \u00b6 GET: https://api.web.finmindtrade.com/v2/user_info \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e token str N token Request-example Python import requests url = \"https://api.web.finmindtrade.com/v2/user_info\" payload = { \"token\" : token , } resp = requests . get ( url , params = payload ) resp . json ()[ \"user_count\" ] # \u4f7f\u7528\u6b21\u6578 resp . json ()[ \"api_request_limit\" ] # api \u4f7f\u7528\u4e0a\u9650","title":"API \u4f7f\u7528\u6b21\u6578"},{"location":"api_usage_count/#api","text":"","title":"API \u4f7f\u7528\u6b21\u6578"},{"location":"api_usage_count/#token-api","text":"GET: https://api.web.finmindtrade.com/v2/user_info \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e token str N token Request-example Python import requests url = \"https://api.web.finmindtrade.com/v2/user_info\" payload = { \"token\" : token , } resp = requests . get ( url , params = payload ) resp . json ()[ \"user_count\" ] # \u4f7f\u7528\u6b21\u6578 resp . json ()[ \"api_request_limit\" ] # api \u4f7f\u7528\u4e0a\u9650","title":"\u4f7f\u7528 token\uff0c\u62ff\u53d6 API \u4f7f\u7528\u6b21\u6578"},{"location":"login/","text":"\u767b\u5165 \u00b6 \u767b\u5165\u7372\u53d6 token\uff0capi v4 \u6539\u7528 token \u53d6\u4ee3 user_id\u3001password\uff0c\u6bcf\u6b21\u767c request \u53ea\u9700\u8981\u5e36 token \u5373\u53ef\u3002 \u00b6 POST: https://api.finmindtrade.com/api/v4/login \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! response: token Package-example Login by token from FinMind.data import DataLoader api = DataLoader () api . login_by_token ( api_token = 'token' ) Login by password from FinMind.data import DataLoader api = DataLoader () api . login ( user_id = 'user_id' , password = 'password' ) Request-example Python import requests url = \"https://api.finmindtrade.com/api/v4/login\" payload = { \"user_id\" : \"user_id\" , \"password\" : \"password\" , } data = requests . post ( url , data = payload ) data = data . json () print ( data ) { 'msg' : 'success' , 'status' : 200 , 'token' : '7777777777777777777777777' } R library ( httr ) library ( data.table ) url = 'https://api.finmindtrade.com/api/v4/login' response = httr :: POST ( url = url , body = list ( user_id = \"user_id\" , password = \"password\" ) ) data = content ( response ) print ( data ) $ msg [ 1 ] \"success\" $ status [ 1 ] 200 $ token [ 1 ] \"777777777777777777777777\"","title":"\u767b\u5165"},{"location":"login/#_1","text":"","title":"\u767b\u5165"},{"location":"login/#tokenapi-v4-token-user_idpassword-request-token","text":"POST: https://api.finmindtrade.com/api/v4/login \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! response: token Package-example Login by token from FinMind.data import DataLoader api = DataLoader () api . login_by_token ( api_token = 'token' ) Login by password from FinMind.data import DataLoader api = DataLoader () api . login ( user_id = 'user_id' , password = 'password' ) Request-example Python import requests url = \"https://api.finmindtrade.com/api/v4/login\" payload = { \"user_id\" : \"user_id\" , \"password\" : \"password\" , } data = requests . post ( url , data = payload ) data = data . json () print ( data ) { 'msg' : 'success' , 'status' : 200 , 'token' : '7777777777777777777777777' } R library ( httr ) library ( data.table ) url = 'https://api.finmindtrade.com/api/v4/login' response = httr :: POST ( url = url , body = list ( user_id = \"user_id\" , password = \"password\" ) ) data = content ( response ) print ( data ) $ msg [ 1 ] \"success\" $ status [ 1 ] 200 $ token [ 1 ] \"777777777777777777777777\"","title":"\u767b\u5165\u7372\u53d6 token\uff0capi v4 \u6539\u7528 token \u53d6\u4ee3 user_id\u3001password\uff0c\u6bcf\u6b21\u767c request \u53ea\u9700\u8981\u5e36 token \u5373\u53ef\u3002"},{"location":"quickstart/","text":"Quick start with FinMind Finance data API \u00b6 \u5e0c\u671b\u900f\u904e\u5982\u4e0b\u8aaa\u660e\uff0c\u53ef\u4ee5\u5feb\u901f\u4e86\u89e3 FinMind data api \u4f7f\u7528\u65b9\u5f0f note \u6d41\u91cf\u9650\u5236 \u9650\u5236 request \u4e0a\u9650 : 600/hour\u3002Limit amount of request, 300/hour. \u81f3 FinMind \u8a3b\u518a\u4e26\u9a57\u8b49\u4fe1\u7bb1\u5f8c\uff0cAPI \u7684 Request \u52a0\u4e0a token \u53c3\u6578\u53ef\u4ee5\u63d0\u9ad8\u4f7f\u7528\u4e0a\u9650\u5230 600/hr\u3002 token \u7372\u53d6\u65b9\u6cd5\uff0c\u53ef\u5728 \u5b98\u7db2 \u767b\u5165\u5f8c\u7372\u53d6\u3002 FinMind data api \u4e3b\u8981\u6709\u56db\u7a2e\u985e\u578b API \u00b6 \u767b\u5165 API \u767b\u5165\u7372\u5f97 token\uff0c\u4e26\u5728\u62ff\u53d6\u8cc7\u6599\u6642\uff0c\u5e36 token\uff0c\u53ef\u589e\u52a0\u4f7f\u7528\u9650\u5236 https://api.finmindtrade.com/api/v4/login \u7372\u53d6\u8cc7\u6599 API \u6839\u64da\u4f60\u60f3\u4f7f\u7528\u7684\u8cc7\u6599\u96c6\u4f86\u7372\u53d6\u8cc7\u6599\uff0c\u4f8b\u5982\u60f3\u8981\u67e5\u8a62\u53f0\u7063\u80a1\u7968\u5e02\u5834\u500b\u80a1\u7684\u50f9\u683c\uff0c\u5c31\u53ef\u4ee5\u900f\u904e TaiwanStockPrice \u8cc7\u6599\u96c6\u4f86\u67e5\u8a62 https://api.finmindtrade.com/api/v4/data \u67e5\u8a62\u8cc7\u6599\u53c3\u6578\u6e05\u55ae API \u6bcf\u500b\u8cc7\u6599\u96c6\u90fd\u6703\u6709\u4e00\u4e9b\u53c3\u6578\u9700\u8981\u4f5c\u9078\u64c7\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u53c3\u6578\u6578\u503c\u6709\u54ea\u4e9b\u53ef\u4ee5\u505a\u9078\u64c7\uff0c \u53ef\u4ee5\u4f7f\u7528\u9019\u500b API \u4f86\u5e6b\u52a9\u4f60\u4e86\u89e3\uff0c\u4f8b\u5982\u4f60\u4e0d\u77e5\u9053\u532f\u7387\u8cc7\u6599\u6709\u54ea\u4e9b\u5e63\u5225\uff0c \u53ea\u8981\u8cc7\u6599\u96c6\u9078\u64c7 TaiwanExchangeRate \u5c31\u53ef\u4ee5\u900f\u904e\u9019 API \u4f86\u67e5\u8a62\u76ee\u524d\u8ddf\u53f0\u5e63\u514c\u63db\u7684\u5e63\u5225 https://api.finmindtrade.com/api/v4/datalist \u67e5\u8a62\u6b04\u4f4d\u540d\u7a31\u4e2d\u82f1\u5c0d\u7167 API \u6709\u4e9b\u8cc7\u6599\u96c6\u6b04\u4f4d\u540d\u7a31\u53ef\u80fd\u53ea\u6709\u82f1\u6587\u800c\u4e14\u540d\u7a31\u76f8\u5c0d\u8907\u96dc\u96e3\u61c2\uff0c\u53ef\u4ee5\u900f\u904e\u9019 API \u4f86\u67e5\u8a62\u5176\u4e2d\u6587\u540d\u7a31\uff0c \u4f8b\u5982\u8cc7\u7522\u8ca0\u50b5\u8868\u4e2d AccountsPayable \uff0c\u900f\u904e\u9019 API \u5f97\u77e5\u4e2d\u6587\u53eb \u61c9\u4ed8\u5e33\u6b3e \uff0c\u85c9\u6b64\u4f86\u5e6b\u52a9\u4f60\u4e86\u89e3\u8cc7\u6599 https://api.finmindtrade.com/api/v4/translation API \u63cf\u8ff0 \u00b6 login \u00b6 POST: https://api.finmindtrade.com/api/v4/login \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! response: token \u7372\u53d6\u8cc7\u6599 API \u00b6 GET: https://api.finmindtrade.com/api/v4/data \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e dataset str Y \u8cc7\u6599\u96c6\u540d\u7a31 data_id str N \u8cc7\u6599\u4ee3\u78bc start_date str N \u8d77\u59cb\u6642\u9593\uff0c\u5982\u679c\u8ddf end_date \u4e00\u8d77\u4f7f\u7528\uff0c\u6703\u8f38\u51fa start_date \u5230 end_date \u6642\u9593\u7684\u8cc7\u6599\uff0c\u53cd\u4e4b\u6703\u8f38\u51fa\u5230\u6700\u65b0\u7684\u8cc7\u6599\uff0cstart_date \u548c end_date \u81f3\u5c11\u5247\u4e00\u4f7f\u7528 end_date str N \u7d50\u675f\u6642\u9593\uff0c\u5982\u679c\u8ddf start_date \u4e00\u8d77\u4f7f\u7528\uff0c\u6703\u8f38\u51fa start_date \u5230 end_date \u6642\u9593\u7684\u8cc7\u6599\uff0c\u53cd\u4e4b\u6703\u8f38\u51fa\u5230 end_date \u7684\u8cc7\u6599\uff0cstart_date \u548c end_date \u81f3\u5c11\u5247\u4e00\u4f7f\u7528 token str N \u4f7f\u7528\u8005 token\uff0c\u8acb\u5148 \u767b\u5165 \u62ff\u5230 token \u67e5\u8a62\u8cc7\u6599\u53c3\u6578\u6e05\u55ae API \u00b6 GET: https://api.finmindtrade.com/api/v4/datalist? \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e dataset str Y \u8cc7\u6599\u96c6\u540d\u7a31 user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! \u67e5\u8a62\u6b04\u4f4d\u540d\u7a31\u4e2d\u82f1\u5c0d\u7167 API \u00b6 GET: https://api.finmindtrade.com/api/v4/translation? \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e dataset str Y \u8cc7\u6599\u96c6\u540d\u7a31 user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427!","title":"\u5feb\u901f\u958b\u59cb"},{"location":"quickstart/#quick-start-with-finmind-finance-data-api","text":"\u5e0c\u671b\u900f\u904e\u5982\u4e0b\u8aaa\u660e\uff0c\u53ef\u4ee5\u5feb\u901f\u4e86\u89e3 FinMind data api \u4f7f\u7528\u65b9\u5f0f note \u6d41\u91cf\u9650\u5236 \u9650\u5236 request \u4e0a\u9650 : 600/hour\u3002Limit amount of request, 300/hour. \u81f3 FinMind \u8a3b\u518a\u4e26\u9a57\u8b49\u4fe1\u7bb1\u5f8c\uff0cAPI \u7684 Request \u52a0\u4e0a token \u53c3\u6578\u53ef\u4ee5\u63d0\u9ad8\u4f7f\u7528\u4e0a\u9650\u5230 600/hr\u3002 token \u7372\u53d6\u65b9\u6cd5\uff0c\u53ef\u5728 \u5b98\u7db2 \u767b\u5165\u5f8c\u7372\u53d6\u3002","title":"Quick start with FinMind Finance data API"},{"location":"quickstart/#finmind-data-api-api","text":"\u767b\u5165 API \u767b\u5165\u7372\u5f97 token\uff0c\u4e26\u5728\u62ff\u53d6\u8cc7\u6599\u6642\uff0c\u5e36 token\uff0c\u53ef\u589e\u52a0\u4f7f\u7528\u9650\u5236 https://api.finmindtrade.com/api/v4/login \u7372\u53d6\u8cc7\u6599 API \u6839\u64da\u4f60\u60f3\u4f7f\u7528\u7684\u8cc7\u6599\u96c6\u4f86\u7372\u53d6\u8cc7\u6599\uff0c\u4f8b\u5982\u60f3\u8981\u67e5\u8a62\u53f0\u7063\u80a1\u7968\u5e02\u5834\u500b\u80a1\u7684\u50f9\u683c\uff0c\u5c31\u53ef\u4ee5\u900f\u904e TaiwanStockPrice \u8cc7\u6599\u96c6\u4f86\u67e5\u8a62 https://api.finmindtrade.com/api/v4/data \u67e5\u8a62\u8cc7\u6599\u53c3\u6578\u6e05\u55ae API \u6bcf\u500b\u8cc7\u6599\u96c6\u90fd\u6703\u6709\u4e00\u4e9b\u53c3\u6578\u9700\u8981\u4f5c\u9078\u64c7\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u53c3\u6578\u6578\u503c\u6709\u54ea\u4e9b\u53ef\u4ee5\u505a\u9078\u64c7\uff0c \u53ef\u4ee5\u4f7f\u7528\u9019\u500b API \u4f86\u5e6b\u52a9\u4f60\u4e86\u89e3\uff0c\u4f8b\u5982\u4f60\u4e0d\u77e5\u9053\u532f\u7387\u8cc7\u6599\u6709\u54ea\u4e9b\u5e63\u5225\uff0c \u53ea\u8981\u8cc7\u6599\u96c6\u9078\u64c7 TaiwanExchangeRate \u5c31\u53ef\u4ee5\u900f\u904e\u9019 API \u4f86\u67e5\u8a62\u76ee\u524d\u8ddf\u53f0\u5e63\u514c\u63db\u7684\u5e63\u5225 https://api.finmindtrade.com/api/v4/datalist \u67e5\u8a62\u6b04\u4f4d\u540d\u7a31\u4e2d\u82f1\u5c0d\u7167 API \u6709\u4e9b\u8cc7\u6599\u96c6\u6b04\u4f4d\u540d\u7a31\u53ef\u80fd\u53ea\u6709\u82f1\u6587\u800c\u4e14\u540d\u7a31\u76f8\u5c0d\u8907\u96dc\u96e3\u61c2\uff0c\u53ef\u4ee5\u900f\u904e\u9019 API \u4f86\u67e5\u8a62\u5176\u4e2d\u6587\u540d\u7a31\uff0c \u4f8b\u5982\u8cc7\u7522\u8ca0\u50b5\u8868\u4e2d AccountsPayable \uff0c\u900f\u904e\u9019 API \u5f97\u77e5\u4e2d\u6587\u53eb \u61c9\u4ed8\u5e33\u6b3e \uff0c\u85c9\u6b64\u4f86\u5e6b\u52a9\u4f60\u4e86\u89e3\u8cc7\u6599 https://api.finmindtrade.com/api/v4/translation","title":"FinMind data api \u4e3b\u8981\u6709\u56db\u7a2e\u985e\u578b API"},{"location":"quickstart/#api","text":"","title":"API \u63cf\u8ff0"},{"location":"quickstart/#login","text":"POST: https://api.finmindtrade.com/api/v4/login \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! response: token","title":"login"},{"location":"quickstart/#api_1","text":"GET: https://api.finmindtrade.com/api/v4/data \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e dataset str Y \u8cc7\u6599\u96c6\u540d\u7a31 data_id str N \u8cc7\u6599\u4ee3\u78bc start_date str N \u8d77\u59cb\u6642\u9593\uff0c\u5982\u679c\u8ddf end_date \u4e00\u8d77\u4f7f\u7528\uff0c\u6703\u8f38\u51fa start_date \u5230 end_date \u6642\u9593\u7684\u8cc7\u6599\uff0c\u53cd\u4e4b\u6703\u8f38\u51fa\u5230\u6700\u65b0\u7684\u8cc7\u6599\uff0cstart_date \u548c end_date \u81f3\u5c11\u5247\u4e00\u4f7f\u7528 end_date str N \u7d50\u675f\u6642\u9593\uff0c\u5982\u679c\u8ddf start_date \u4e00\u8d77\u4f7f\u7528\uff0c\u6703\u8f38\u51fa start_date \u5230 end_date \u6642\u9593\u7684\u8cc7\u6599\uff0c\u53cd\u4e4b\u6703\u8f38\u51fa\u5230 end_date \u7684\u8cc7\u6599\uff0cstart_date \u548c end_date \u81f3\u5c11\u5247\u4e00\u4f7f\u7528 token str N \u4f7f\u7528\u8005 token\uff0c\u8acb\u5148 \u767b\u5165 \u62ff\u5230 token","title":"\u7372\u53d6\u8cc7\u6599 API"},{"location":"quickstart/#api_2","text":"GET: https://api.finmindtrade.com/api/v4/datalist? \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e dataset str Y \u8cc7\u6599\u96c6\u540d\u7a31 user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427!","title":"\u67e5\u8a62\u8cc7\u6599\u53c3\u6578\u6e05\u55ae API"},{"location":"quickstart/#api_3","text":"GET: https://api.finmindtrade.com/api/v4/translation? \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e dataset str Y \u8cc7\u6599\u96c6\u540d\u7a31 user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427!","title":"\u67e5\u8a62\u6b04\u4f4d\u540d\u7a31\u4e2d\u82f1\u5c0d\u7167 API"},{"location":"release/","text":"version: 1.5.8 (2022-09-13) \u00b6 feat: add \u6e1b\u8cc7\u6062\u5fa9\u8cb7\u8ce3\u53c3\u8003\u50f9\u683c release_at: 2022-09-13 15:47:08 version: 1.5.7 (2022-09-06) \u00b6 feat: remove taiwan futopt institutional investors api, add taiwan_future_institutional_investors and taiwan_option_institutional_investors api release_at: 2022-09-06 15:42:02 version: 1.5.6 (2022-06-16) \u00b6 fix: import dtype FutureWarning msg release_at: 2022-06-16 10:45:04 version: 1.5.5 (2021-11-02) \u00b6 feat: reset timeout defacut value None and logger.info timeout msg (#192) release_at: 2021-11-02 11:15:11 version: 1.5.4 (2021-10-31) \u00b6 Hotfix: fix some dependency issue (#190), remove error msg not show issue (#191) release_at: 2021-10-31 16:53:19 version: 1.5.3 (2021-10-06) \u00b6 fix: taiwan_futopt_daily_info (#189) release_at: 2021-10-06 12:10:04 version: 1.5.2 (2021-10-06) \u00b6 debug: Unable to parse datetime string release_at: 2021-10-06 11:17:40 version: 1.5.1 (2021-10-05) \u00b6 feat: handle connection errors release_at: 2021-10-05 17:29:22 version: 1.5.0 (2021-09-11) \u00b6 feat: add timeout and retry on request get release_at: 2021-09-11 18:00:16 version: 1.4.9 (2021-07-25) \u00b6 feat: add flask post.html release_at: 2021-07-25 05:52:39 version: 1.4.8 (2021-07-11) \u00b6 feat: add bar, line, pie plot, add TaiwanStockTotalReturnIndex, numpy version release_at: 2021-07-11 14:30:37 version: 1.4.7 (2021-07-03) \u00b6 fix: data loader pd.Period convert release_at: 2021-07-03 11:02:53 version: 1.4.6 (2021-06-27) \u00b6 feat: add kline_margin_purchase_short_sale, fix taiwan_stock_daily_adj release_at: 2021-06-27 14:13:56 version: 1.4.5 (2021-06-20) \u00b6 feat: add kline institutional_investors release_at: 2021-06-20 05:25:40 version: 1.4.4 (2021-06-13) \u00b6 feat: add start_date, end_date transfer, fix issue: remove suspension trading data release_at: 2021-06-13 07:14:19","title":"Release Note"},{"location":"release/#version-158-2022-09-13","text":"feat: add \u6e1b\u8cc7\u6062\u5fa9\u8cb7\u8ce3\u53c3\u8003\u50f9\u683c release_at: 2022-09-13 15:47:08","title":"version: 1.5.8 (2022-09-13)"},{"location":"release/#version-157-2022-09-06","text":"feat: remove taiwan futopt institutional investors api, add taiwan_future_institutional_investors and taiwan_option_institutional_investors api release_at: 2022-09-06 15:42:02","title":"version: 1.5.7 (2022-09-06)"},{"location":"release/#version-156-2022-06-16","text":"fix: import dtype FutureWarning msg release_at: 2022-06-16 10:45:04","title":"version: 1.5.6 (2022-06-16)"},{"location":"release/#version-155-2021-11-02","text":"feat: reset timeout defacut value None and logger.info timeout msg (#192) release_at: 2021-11-02 11:15:11","title":"version: 1.5.5 (2021-11-02)"},{"location":"release/#version-154-2021-10-31","text":"Hotfix: fix some dependency issue (#190), remove error msg not show issue (#191) release_at: 2021-10-31 16:53:19","title":"version: 1.5.4 (2021-10-31)"},{"location":"release/#version-153-2021-10-06","text":"fix: taiwan_futopt_daily_info (#189) release_at: 2021-10-06 12:10:04","title":"version: 1.5.3 (2021-10-06)"},{"location":"release/#version-152-2021-10-06","text":"debug: Unable to parse datetime string release_at: 2021-10-06 11:17:40","title":"version: 1.5.2 (2021-10-06)"},{"location":"release/#version-151-2021-10-05","text":"feat: handle connection errors release_at: 2021-10-05 17:29:22","title":"version: 1.5.1 (2021-10-05)"},{"location":"release/#version-150-2021-09-11","text":"feat: add timeout and retry on request get release_at: 2021-09-11 18:00:16","title":"version: 1.5.0 (2021-09-11)"},{"location":"release/#version-149-2021-07-25","text":"feat: add flask post.html release_at: 2021-07-25 05:52:39","title":"version: 1.4.9 (2021-07-25)"},{"location":"release/#version-148-2021-07-11","text":"feat: add bar, line, pie plot, add TaiwanStockTotalReturnIndex, numpy version release_at: 2021-07-11 14:30:37","title":"version: 1.4.8 (2021-07-11)"},{"location":"release/#version-147-2021-07-03","text":"fix: data loader pd.Period convert release_at: 2021-07-03 11:02:53","title":"version: 1.4.7 (2021-07-03)"},{"location":"release/#version-146-2021-06-27","text":"feat: add kline_margin_purchase_short_sale, fix taiwan_stock_daily_adj release_at: 2021-06-27 14:13:56","title":"version: 1.4.6 (2021-06-27)"},{"location":"release/#version-145-2021-06-20","text":"feat: add kline institutional_investors release_at: 2021-06-20 05:25:40","title":"version: 1.4.5 (2021-06-20)"},{"location":"release/#version-144-2021-06-13","text":"feat: add start_date, end_date transfer, fix issue: remove suspension trading data release_at: 2021-06-13 07:14:19","title":"version: 1.4.4 (2021-06-13)"},{"location":"tutor/ExchangeRate/","text":"\u5728\u532f\u7387\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 19 \u7a2e\u5e63\u5225\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: (\u8cc7\u6599\u4f86\u6e90-\u53f0\u7063\u9280\u884c) \u5916\u5e63\u5c0d\u53f0\u5e63\u8cc7\u6599\u8868 TaiwanExchangeRate \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u5916\u5e63\u514c\u63db\u6e05\u55ae\uff0c\u76ee\u524d\u5171\u6709 19 \u7a2e\u5e63\u5225 data_id AUD CAD CHF CNY EUR GBP HKD IDR JPY KRW MYR NZD PHP SEK SGD THB USD VND ZAR \u5e63\u5225 \u6fb3\u6d32 \u52a0\u62ff\u5927 \u745e\u58eb\u6cd5\u90ce \u4eba\u6c11\u5e63 \u6b50\u5143 \u82f1\u938a \u6e2f\u5e63 \u5370\u5c3c\u5e63 \u65e5\u5713 \u97d3\u5143 \u99ac\u4f86\u5e63 \u7d10\u5143 \u83f2\u570b\u6bd4\u7d22 \u745e\u5178\u5e63 \u65b0\u52a0\u5761\u5e63 \u6cf0\u5e63 \u7f8e\u91d1 \u8d8a\u5357\u76fe \u5357\u975e\u5e63 \u5916\u5e63\u5c0d\u53f0\u5e63\u8cc7\u6599\u8868 TaiwanExchangeRate \u00b6 \u91dd\u5c0d USD \u505a\u793a\u7bc4 Example import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanExchangeRate\" , \"data_id\" : \"USD\" , \"start_date\" : \"2006-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date currency cash_buy cash_sell spot_buy spot_sell 0 2006 - 01 - 02 USD 32.470 33.005 - 99.000 - 99.000 1 2006 - 01 - 03 USD 32.295 32.830 32.595 32.695 2 2006 - 01 - 04 USD 31.985 32.520 32.285 32.385 3 2006 - 01 - 05 USD 31.670 32.205 31.970 32.070 4 2006 - 01 - 06 USD 31.830 32.372 32.130 32.230","title":"\u532f\u7387"},{"location":"tutor/ExchangeRate/#taiwanexchangerate","text":"\u91dd\u5c0d USD \u505a\u793a\u7bc4 Example import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanExchangeRate\" , \"data_id\" : \"USD\" , \"start_date\" : \"2006-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date currency cash_buy cash_sell spot_buy spot_sell 0 2006 - 01 - 02 USD 32.470 33.005 - 99.000 - 99.000 1 2006 - 01 - 03 USD 32.295 32.830 32.595 32.695 2 2006 - 01 - 04 USD 31.985 32.520 32.285 32.385 3 2006 - 01 - 05 USD 31.670 32.205 31.970 32.070 4 2006 - 01 - 06 USD 31.830 32.372 32.130 32.230","title":"\u5916\u5e63\u5c0d\u53f0\u5e63\u8cc7\u6599\u8868 TaiwanExchangeRate"},{"location":"tutor/GovernmentBondsYield/","text":"\u5728\u7f8e\u570b\u570b\u50b5\uff0c\u6211\u5011\u64c1\u6709 12 \u7a2e\u7f8e\u50b5\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: data_id United States 1-Month United States 2-Month United States 3-Month United States 6-Month United States 1-Year United States 2-Year United States 3-Year United States 5-Year United States 7-Year United States 10-Year United States 20-Year United States 30-Year \u50b5\u5238 1\u6708\u671f 2\u6708\u671f 3\u6708\u671f 6\u6708\u671f 1\u5e74\u671f 2\u5e74\u671f 3\u5e74\u671f 5\u5e74\u671f 7\u5e74\u671f 10\u5e74\u671f 20\u5e74\u671f 30\u5e74\u671f \u7f8e\u570b\u570b\u50b5 GovernmentBondsYield \u00b6 Example import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"GovernmentBondsYield\" , \"data_id\" : \"United States 1-Month\" , \"start_date\" : \"2020-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date name value 0 2020 - 01 - 02 United States 1 - Month 1.53 1 2020 - 01 - 03 United States 1 - Month 1.52 2 2020 - 01 - 06 United States 1 - Month 1.54 3 2020 - 01 - 07 United States 1 - Month 1.52 4 2020 - 01 - 08 United States 1 - Month 1.50","title":"\u7f8e\u570b\u570b\u50b5"},{"location":"tutor/GovernmentBondsYield/#governmentbondsyield","text":"Example import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"GovernmentBondsYield\" , \"data_id\" : \"United States 1-Month\" , \"start_date\" : \"2020-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date name value 0 2020 - 01 - 02 United States 1 - Month 1.53 1 2020 - 01 - 03 United States 1 - Month 1.52 2 2020 - 01 - 06 United States 1 - Month 1.54 3 2020 - 01 - 07 United States 1 - Month 1.52 4 2020 - 01 - 08 United States 1 - Month 1.50","title":"\u7f8e\u570b\u570b\u50b5 GovernmentBondsYield"},{"location":"tutor/InterestRate/","text":"\u5728\u5229\u7387\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 12 \u570b\u592e\u884c\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u5229\u7387\u8cc7\u6599\u8868 InterestRate data_id BOE RBA FED PBOC BOC ECB RBNZ RBI CBR BCB BOJ SNB \u570b\u5bb6 \u82f1\u683c\u862d\u9280\u884c \u6fb3\u6d32\u5132\u5099\u9280\u884c \u806f\u90a6\u6e96\u5099\u9280\u884c \u4e2d\u570b\u4eba\u6c11\u9280\u884c \u4e2d\u570b\u9280\u884c \u6b50\u6d32\u4e2d\u592e\u9280\u884c \u7d10\u897f\u862d\u5132\u5099\u9280\u884c \u5370\u5ea6\u5132\u5099\u9280\u884c \u4fc4\u7f85\u65af\u4e2d\u592e\u9280\u884c \u99ac\u4f86\u897f\u4e9e\u5546\u696d\u9280\u884c \u65e5\u672c\u9280\u884c \u745e\u58eb\u570b\u5bb6\u9280\u884c \u5229\u7387\u8cc7\u6599\u8868 InterestRate \u00b6 \u91dd\u5c0d FED \u505a\u793a\u7bc4 Example import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"InterestRate\" , \"data_id\" : \"FED\" , \"start_date\" : \"1982-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) country date full_country_name interest_rate 0 FED 1982 - 09 - 27 Federal Reserve 10.25 1 FED 1982 - 10 - 01 Federal Reserve 10.00 2 FED 1982 - 10 - 07 Federal Reserve 9.50 3 FED 1982 - 11 - 19 Federal Reserve 9.00 4 FED 1982 - 12 - 14 Federal Reserve 8.50","title":"\u592e\u884c\u5229\u7387"},{"location":"tutor/InterestRate/#interestrate","text":"\u91dd\u5c0d FED \u505a\u793a\u7bc4 Example import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"InterestRate\" , \"data_id\" : \"FED\" , \"start_date\" : \"1982-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) country date full_country_name interest_rate 0 FED 1982 - 09 - 27 Federal Reserve 10.25 1 FED 1982 - 10 - 01 Federal Reserve 10.00 2 FED 1982 - 10 - 07 Federal Reserve 9.50 3 FED 1982 - 11 - 19 Federal Reserve 9.00 4 FED 1982 - 12 - 14 Federal Reserve 8.50","title":"\u5229\u7387\u8cc7\u6599\u8868 InterestRate"},{"location":"tutor/Macroeconomy/","text":"\u5728\u7e3d\u9ad4\u7d93\u6fdf\u65b9\u9762\uff0c\u6211\u5011\u64c1\u6709 2 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u5404\u570b\u8ca8\u5e63\u767c\u884c\u91cf\u8868 CurrencyCirculation \u7f8e\u570b\u653f\u5e9c\u516c\u50b5\u6b96\u5229\u7387\u8868 GovernmentBondsYield \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u7f8e\u50b5\u6e05\u55ae\uff0c\u76ee\u524d\u5171\u6709 12 \u7a2e data_id United States 1-Month United States 2-Month United States 3-Month United States 6-Month United States 1-Year United States 2-Year United States 3-Year United States 5-Year United States 7-Year United States 10-Year United States 20-Year United States 30-Year \u50b5\u5238 1\u6708\u671f 2\u6708\u671f 3\u6708\u671f 6\u6708\u671f 1\u5e74\u671f 2\u5e74\u671f 3\u5e74\u671f 5\u5e74\u671f 7\u5e74\u671f 10\u5e74\u671f 20\u5e74\u671f 30\u5e74\u671f \u5404\u570b\u8ca8\u5e63\u767c\u884c\u91cf\u8868 CurrencyCirculation \u00b6 Example import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v3/data\" parameter = { \"dataset\" : \"CurrencyCirculation\" , \"data_id\" : \"US\" , \"date\" : \"2020-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) country date type value 0 US 2020 - 01 - 01 Monthly 1798.984 B 1 US 2020 - 02 - 01 Monthly 1795.990 B 2 US 2020 - 03 - 01 Monthly 1826.102 B 3 US 2020 - 04 - 01 Monthly 1876.878 B \u653f\u5e9c\u516c\u50b5\u6b96\u5229\u7387\u8868 GovernmentBondsYield \u00b6 Example import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v3/data\" parameter = { \"dataset\" : \"GovernmentBondsYield\" , \"data_id\" : \"United States 1-Month\" , \"date\" : \"2020-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date name value 0 2020 - 01 - 02 United States 3 - Year 1.59 1 2020 - 01 - 03 United States 3 - Year 1.54 2 2020 - 01 - 06 United States 3 - Year 1.56 3 2020 - 01 - 07 United States 3 - Year 1.55 4 2020 - 01 - 08 United States 3 - Year 1.61","title":"Macroeconomy"},{"location":"tutor/Macroeconomy/#currencycirculation","text":"Example import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v3/data\" parameter = { \"dataset\" : \"CurrencyCirculation\" , \"data_id\" : \"US\" , \"date\" : \"2020-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) country date type value 0 US 2020 - 01 - 01 Monthly 1798.984 B 1 US 2020 - 02 - 01 Monthly 1795.990 B 2 US 2020 - 03 - 01 Monthly 1826.102 B 3 US 2020 - 04 - 01 Monthly 1876.878 B","title":"\u5404\u570b\u8ca8\u5e63\u767c\u884c\u91cf\u8868 CurrencyCirculation"},{"location":"tutor/Macroeconomy/#governmentbondsyield","text":"Example import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v3/data\" parameter = { \"dataset\" : \"GovernmentBondsYield\" , \"data_id\" : \"United States 1-Month\" , \"date\" : \"2020-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date name value 0 2020 - 01 - 02 United States 3 - Year 1.59 1 2020 - 01 - 03 United States 3 - Year 1.54 2 2020 - 01 - 06 United States 3 - Year 1.56 3 2020 - 01 - 07 United States 3 - Year 1.55 4 2020 - 01 - 08 United States 3 - Year 1.61","title":"\u653f\u5e9c\u516c\u50b5\u6b96\u5229\u7387\u8868 GovernmentBondsYield"},{"location":"tutor/Materials/","text":"\u5728\u539f\u7269\u6599\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 2 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u9ec3\u91d1\u50f9\u683c\u8868 GoldPrice \u539f\u6cb9\u8cc7\u6599\u8868 CrudeOilPrices \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u539f\u6cb9\u6e05\u55ae\uff0c\u76ee\u524d\u5171\u6709 2 \u7a2e data_id Brent WTI \u539f\u6cb9 \u5e03\u862d\u7279 \u897f\u5fb7\u5dde \u9ec3\u91d1\u50f9\u683c\u8868 GoldPrice \u00b6 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"GoldPrice\" , \"start_date\" : \"2020-01-01\" , \"end_date\" : \"2020-01-02\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Price date 0 1517.2 2020 - 01 - 01 00 : 00 : 01 1 1517.2 2020 - 01 - 01 00 : 03 : 01 2 1517.2 2020 - 01 - 01 00 : 08 : 02 3 1517.2 2020 - 01 - 01 00 : 13 : 02 4 1517.2 2020 - 01 - 01 00 : 18 : 01 \u539f\u6cb9\u8cc7\u6599\u8868 CrudeOilPrices \u00b6 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"CrudeOilPrices\" , \"data_id\" : \"WTI\" , \"start_date\" : \"2020-01-01\" , \"end_date\" : \"2020-01-08\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date name price 0 2020 - 01 - 02 WTI 61.17 1 2020 - 01 - 03 WTI 63 2 2020 - 01 - 06 WTI 63.27 3 2020 - 01 - 07 WTI 62.7 4 2020 - 01 - 08 WTI 59.65","title":"\u539f\u7269\u6599\u5e02\u5834"},{"location":"tutor/Materials/#goldprice","text":"Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"GoldPrice\" , \"start_date\" : \"2020-01-01\" , \"end_date\" : \"2020-01-02\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Price date 0 1517.2 2020 - 01 - 01 00 : 00 : 01 1 1517.2 2020 - 01 - 01 00 : 03 : 01 2 1517.2 2020 - 01 - 01 00 : 08 : 02 3 1517.2 2020 - 01 - 01 00 : 13 : 02 4 1517.2 2020 - 01 - 01 00 : 18 : 01","title":"\u9ec3\u91d1\u50f9\u683c\u8868 GoldPrice"},{"location":"tutor/Materials/#crudeoilprices","text":"Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"CrudeOilPrices\" , \"data_id\" : \"WTI\" , \"start_date\" : \"2020-01-01\" , \"end_date\" : \"2020-01-08\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date name price 0 2020 - 01 - 02 WTI 61.17 1 2020 - 01 - 03 WTI 63 2 2020 - 01 - 06 WTI 63.27 3 2020 - 01 - 07 WTI 62.7 4 2020 - 01 - 08 WTI 59.65","title":"\u539f\u6cb9\u8cc7\u6599\u8868 CrudeOilPrices"},{"location":"tutor/Others/","text":"CnnFearGreedIndex \u6050\u61fc\u8207\u8caa\u5a6a\u6307\u6578 \u00b6 Example import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" form_data = { \"dataset\" : \"CnnFearGreedIndex\" , \"start_date\" : \"2021-01-01\" , \"end_date\" : \"2021-01-10\" , } res = requests . get ( url , params = form_data ) temp = res . json () data = pd . DataFrame ( temp [ \"data\" ]) data date fear_greed fear_greed_emotion 0 2021 - 01 - 04 53 neutral 1 2021 - 01 - 05 52 neutral 2 2021 - 01 - 06 59 greed 3 2021 - 01 - 07 66 greed","title":"\u5176\u4ed6"},{"location":"tutor/Others/#cnnfeargreedindex","text":"Example import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" form_data = { \"dataset\" : \"CnnFearGreedIndex\" , \"start_date\" : \"2021-01-01\" , \"end_date\" : \"2021-01-10\" , } res = requests . get ( url , params = form_data ) temp = res . json () data = pd . DataFrame ( temp [ \"data\" ]) data date fear_greed fear_greed_emotion 0 2021 - 01 - 04 53 neutral 1 2021 - 01 - 05 52 neutral 2 2021 - 01 - 06 59 greed 3 2021 - 01 - 07 66 greed","title":"CnnFearGreedIndex \u6050\u61fc\u8207\u8caa\u5a6a\u6307\u6578"},{"location":"tutor/EuropeMarket/DataList/","text":"\u5728\u6b50\u6d32\u91d1\u878d\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u6b50\u6d32\u80a1\u7968\u6e05\u55ae\u5217\u8868 EuropeStockInfo \u80a1\u50f9 TaiwanStock \u00b6 \u6b50\u6d32\u80a1\u50f9\u8cc7\u6599\u8868 EuropeStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u7e3d\u89bd"},{"location":"tutor/EuropeMarket/DataList/#taiwanstock","text":"\u6b50\u6d32\u80a1\u50f9\u8cc7\u6599\u8868 EuropeStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u80a1\u50f9 TaiwanStock"},{"location":"tutor/EuropeMarket/Technical/","text":"\u5728\u6b50\u6d32\u80a1\u7968\u8cc7\u6599\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u6b50\u6d32\u80a1\u50f9\u8cc7\u6599\u8868 EuropeStockPrice \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u7684\u5217\u8868\u5982\u4e0b: \u6b50\u6d32\u80a1\u7968\u6e05\u55ae\u5217\u8868 EuropeStockInfo \u6839\u64da\u4e0a\u8ff0\u8cc7\u6599\u8868\u9010\u4e00\u8aaa\u660e\u600e\u9ebc\u4f7f\u7528\uff0c\u53e6\u5916\u5177\u9ad4\u8cc7\u6599\u8868 schemas \u8acb\u53c3\u8003 finmindapi \u6b50\u6d32\u80a1\u7968\u6e05\u55ae\u5217\u8868 EuropeStockInfo \u00b6 \u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u6b50\u6d32\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"EuropeStockInfo\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Market stock_name 0 2019-01-14 2CRSI.PA Euronext Paris 2CRSI 1 2019-01-14 AAA.AS Euronext Amsterdam AP ALTERNAT ASSETS 2 2019-01-14 AALB.AS Euronext Amsterdam AALBERTS INDUSTR 3 2019-01-14 AB.PA Euronext Paris AB SCIENCE 4 2019-01-14 ABCA.PA Euronext Paris ABC ARBITRAGE \u6b50\u6d32\u80a1\u50f9\u8cc7\u6599\u8868 EuropeStockPrice \u00b6 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"EuropeStockPrice\" , \"data_id\" : \"AALB.AS\" , \"start_date\" : \"2020-06-16\" , \"end_date\" : \"2021-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Adj_Close Close High Low Open Volume 0 2020-06-16 AALB.AS 26.82 28.37 29.03 27.99 28.35 603839 1 2020-06-17 AALB.AS 26.81 28.35 28.88 28.26 28.38 512502 2 2020-06-18 AALB.AS 27.15 28.71 29.05 28.01 28.34 452985 3 2020-06-19 AALB.AS 26.47 28 29 27.97 29 1466512 4 2020-06-22 AALB.AS 26.57 28.1 28.34 27.5 28 281713","title":"\u6280\u8853\u9762"},{"location":"tutor/EuropeMarket/Technical/#europestockinfo","text":"\u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u6b50\u6d32\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"EuropeStockInfo\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Market stock_name 0 2019-01-14 2CRSI.PA Euronext Paris 2CRSI 1 2019-01-14 AAA.AS Euronext Amsterdam AP ALTERNAT ASSETS 2 2019-01-14 AALB.AS Euronext Amsterdam AALBERTS INDUSTR 3 2019-01-14 AB.PA Euronext Paris AB SCIENCE 4 2019-01-14 ABCA.PA Euronext Paris ABC ARBITRAGE","title":"\u6b50\u6d32\u80a1\u7968\u6e05\u55ae\u5217\u8868 EuropeStockInfo"},{"location":"tutor/EuropeMarket/Technical/#europestockprice","text":"Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"EuropeStockPrice\" , \"data_id\" : \"AALB.AS\" , \"start_date\" : \"2020-06-16\" , \"end_date\" : \"2021-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Adj_Close Close High Low Open Volume 0 2020-06-16 AALB.AS 26.82 28.37 29.03 27.99 28.35 603839 1 2020-06-17 AALB.AS 26.81 28.35 28.88 28.26 28.38 512502 2 2020-06-18 AALB.AS 27.15 28.71 29.05 28.01 28.34 452985 3 2020-06-19 AALB.AS 26.47 28 29 27.97 29 1466512 4 2020-06-22 AALB.AS 26.57 28.1 28.34 27.5 28 281713","title":"\u6b50\u6d32\u80a1\u50f9\u8cc7\u6599\u8868 EuropeStockPrice"},{"location":"tutor/JapanMarket/DataList/","text":"\u5728\u65e5\u672c\u91d1\u878d\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u65e5\u672c\u80a1\u7968\u6e05\u55ae\u5217\u8868 JapanStockInfo \u80a1\u50f9 TaiwanStock \u00b6 \u65e5\u672c\u80a1\u50f9\u8cc7\u6599\u8868 JapanStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u7e3d\u89bd"},{"location":"tutor/JapanMarket/DataList/#taiwanstock","text":"\u65e5\u672c\u80a1\u50f9\u8cc7\u6599\u8868 JapanStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u80a1\u50f9 TaiwanStock"},{"location":"tutor/JapanMarket/Technical/","text":"\u5728\u65e5\u672c\u80a1\u7968\u8cc7\u6599\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u65e5\u672c\u80a1\u50f9\u8cc7\u6599\u8868 JapanStockPrice \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u7684\u5217\u8868\u5982\u4e0b: \u65e5\u672c\u80a1\u7968\u6e05\u55ae\u5217\u8868 JapanStockInfo \u6839\u64da\u4e0a\u8ff0\u8cc7\u6599\u8868\u9010\u4e00\u8aaa\u660e\u600e\u9ebc\u4f7f\u7528\uff0c\u53e6\u5916\u5177\u9ad4\u8cc7\u6599\u8868 schemas \u8acb\u53c3\u8003 finmindapi \u65e5\u672c\u80a1\u7968\u6e05\u55ae\u5217\u8868 JapanStockInfo \u00b6 \u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u65e5\u672c\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"JapanStockInfo\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Exchange Sector stock_name 0 2019-01-14 1301.T XTKS Food Products Kyokuyo Co. Ltd. 1 2019-01-14 1332.T XTKS Fishing Nippon Suisan Kaisha Ltd. 2 2019-01-14 1333.T XTKS Food Products Maruha Nichiro Corp. 3 2019-01-14 1352.T XTKS Food Retail Hohsui Corp. 4 2019-01-14 1376.T XTKS Farming Kaneko Seeds Co. Ltd. \u65e5\u672c\u80a1\u50f9\u8cc7\u6599\u8868 JapanStockPrice \u00b6 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"JapanStockPrice\" , \"data_id\" : \"7203.T\" , \"start_date\" : \"2020-06-16\" , \"end_date\" : \"2021-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Adj_Close Close High Low Open Volume 0 2020-06-16 7203.T 1347.98 1404.2 1411.4 1368.6 1376 36452000 1 2020-06-17 7203.T 1333.2 1388.8 1401 1381 1400 23684000 2 2020-06-18 7203.T 1322.26 1377.4 1388 1368.6 1376 17525500 3 2020-06-19 7203.T 1315.35 1370.2 1382.4 1365 1381.6 29101500 4 2020-06-22 7203.T 1309.01 1363.6 1374 1356 1359.8 14133000","title":"\u6280\u8853\u9762"},{"location":"tutor/JapanMarket/Technical/#japanstockinfo","text":"\u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u65e5\u672c\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"JapanStockInfo\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Exchange Sector stock_name 0 2019-01-14 1301.T XTKS Food Products Kyokuyo Co. Ltd. 1 2019-01-14 1332.T XTKS Fishing Nippon Suisan Kaisha Ltd. 2 2019-01-14 1333.T XTKS Food Products Maruha Nichiro Corp. 3 2019-01-14 1352.T XTKS Food Retail Hohsui Corp. 4 2019-01-14 1376.T XTKS Farming Kaneko Seeds Co. Ltd.","title":"\u65e5\u672c\u80a1\u7968\u6e05\u55ae\u5217\u8868 JapanStockInfo"},{"location":"tutor/JapanMarket/Technical/#japanstockprice","text":"Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"JapanStockPrice\" , \"data_id\" : \"7203.T\" , \"start_date\" : \"2020-06-16\" , \"end_date\" : \"2021-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Adj_Close Close High Low Open Volume 0 2020-06-16 7203.T 1347.98 1404.2 1411.4 1368.6 1376 36452000 1 2020-06-17 7203.T 1333.2 1388.8 1401 1381 1400 23684000 2 2020-06-18 7203.T 1322.26 1377.4 1388 1368.6 1376 17525500 3 2020-06-19 7203.T 1315.35 1370.2 1382.4 1365 1381.6 29101500 4 2020-06-22 7203.T 1309.01 1363.6 1374 1356 1359.8 14133000","title":"\u65e5\u672c\u80a1\u50f9\u8cc7\u6599\u8868 JapanStockPrice"},{"location":"tutor/TaiwanMarket/Chip/","text":"\u5728\u53f0\u80a1\u7c4c\u78bc\u9762\uff0c\u6211\u5011\u64c1\u6709 11 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u500b\u80a1\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockMarginPurchaseShortSale \u6574\u9ad4\u5e02\u5834\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockTotalMarginPurchaseShortSale \u500b\u80a1\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockInstitutionalInvestorsBuySell \u6574\u9ad4\u5e02\u5834\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockTotalInstitutionalInvestors \u5916\u8cc7\u6301\u80a1\u8868 TaiwanStockShareholding \u80a1\u6b0a\u6301\u80a1\u5206\u7d1a\u8868 TaiwanStockHoldingSharesPer \u501f\u5238\u6210\u4ea4\u660e\u7d30 TaiwanStockSecuritiesLending \u878d\u5238\u501f\u5238\u8ce3\u51fa\u8868 TaiwanDailyShortSaleBalances \u8b49\u5238\u5546\u8cc7\u8a0a\u8868 TaiwanSecuritiesTraderInfo \u53f0\u80a1\u5206\u9ede\u8cc7\u6599\u8868(query by \u80a1\u7968\u4ee3\u78bc) TaiwanStockTradingDailyReport \u53f0\u80a1\u5206\u9ede\u8cc7\u6599\u8868(query by \u5238\u5546\u4ee3\u78bc) TaiwanStockTradingDailyReport \u53f0\u80a1\u516b\u5927\u884c\u5eab\u8ce3\u8ce3\u8868 TaiwanstockGovernmentBankBuySell \u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockMarginPurchaseShortSale \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_margin_purchase_short_sale ( stock_id = \"2330\" , start_date = '2020-04-02' , end_date = '2020-04-12' ) Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMarginPurchaseShortSale\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMarginPurchaseShortSale\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table Output date stock_id MarginPurchaseBuy MarginPurchaseCashRepayment MarginPurchaseLimit MarginPurchaseSell MarginPurchaseTodayBalance MarginPurchaseYesterdayBalance Note OffsetLoanAndShort ShortSaleBuy ShortSaleCashRepayment ShortSaleLimit ShortSaleSell ShortSaleTodayBalance ShortSaleYesterdayBalance 0 2020-04-06 2330 1914 8 6482595 1269 26285 25648 X 0 0 24 6482595 0 0 24 1 2020-04-07 2330 1049 13 6482595 2655 24666 26285 X 0 0 0 6482595 0 0 0 2 2020-04-08 2330 1192 3 6482595 1569 24286 24666 0 0 0 6482595 0 0 0 3 2020-04-09 2330 499 28 6482595 1362 23395 24286 209 0 0 6482595 398 398 0 4 2020-04-10 2330 1227 24 6482595 794 23804 23395 53 156 0 6482595 156 398 398 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_margin_purchase_short_sale ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMarginPurchaseShortSale\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMarginPurchaseShortSale\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id MarginPurchaseBuy MarginPurchaseCashRepayment MarginPurchaseLimit MarginPurchaseSell MarginPurchaseTodayBalance MarginPurchaseYesterdayBalance Note OffsetLoanAndShort ShortSaleBuy ShortSaleCashRepayment ShortSaleLimit ShortSaleSell ShortSaleTodayBalance ShortSaleYesterdayBalance 0 2020-04-01 0050 193 15 263750 163 3189 3174 0 65 1 263750 13 2283 2336 1 2020-04-01 0051 0 0 2375 0 5 5 0 0 0 2375 0 0 0 2 2020-04-01 0052 0 0 7500 0 128 128 0 0 0 7500 0 0 0 3 2020-04-01 0053 0 0 1622 0 1 1 0 0 0 1622 0 0 0 4 2020-04-01 0054 0 0 2531 0 0 0 X 0 0 0 2531 0 0 0 \u53f0\u7063\u5e02\u5834\u6574\u9ad4\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockTotalMarginPurchaseShortSale \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_margin_purchase_short_sale_total ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockTotalMarginPurchaseShortSale\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockTotalMarginPurchaseShortSale\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output TodayBalance YesBalance buy date name Return sell 0 5463820 5471770 236127 2020-04-01 MarginPurchase 10986 233091 1 91965082000 91898116000 4046643000 2020-04-01 MarginPurchaseMoney 196619000 3783058000 2 541704 556742 57266 2020-04-01 ShortSale 6151 48379 3 535401 541704 50779 2020-04-06 ShortSale 3700 48176 4 93198509000 91965082000 6440842000 2020-04-06 MarginPurchaseMoney 71638000 5135777000 \u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockInstitutionalInvestorsBuySell \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 20:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_institutional_investors ( stock_id = \"2330\" , start_date = '2020-04-01' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockInstitutionalInvestorsBuySell\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockInstitutionalInvestorsBuySell\" , data_id = \"2330\" , start_date = \"2020-04-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id buy name sell 0 2020-04-01 2330 31304729 Foreign_Investor 29057663 1 2020-04-01 2330 0 Foreign_Dealer_Self 0 2 2020-04-01 2330 900000 Investment_Trust 239000 3 2020-04-01 2330 79000 Dealer_self 807000 4 2020-04-01 2330 189000 Dealer_Hedging 493500 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_institutional_investors ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockInstitutionalInvestorsBuySell\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockInstitutionalInvestorsBuySell\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id buy name sell 0 2020-04-01 0050 458249 Foreign_Investor 4492000 1 2020-04-01 0050 0 Foreign_Dealer_Self 0 2 2020-04-01 0050 54000 Investment_Trust 0 3 2020-04-01 0050 0 Dealer_self 0 4 2020-04-01 0050 2050000 Dealer_Hedging 905000 \u53f0\u7063\u5e02\u5834\u6574\u9ad4\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockTotalInstitutionalInvestors \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 15:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_institutional_investors_total ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockTotalInstitutionalInvestors\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockTotalInstitutionalInvestors\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output buy date name sell 0 123150 2020-04-01 Foreign_Dealer_Self 266220 1 3681729831 2020-04-01 Dealer_Hedging 5539788946 2 33759089839 2020-04-01 Foreign_Investor 38466572585 3 3039112340 2020-04-01 Investment_Trust 853138940 4 789316840 2020-04-01 Dealer_self 912143500 \u5916\u8cc7\u6301\u80a1\u8868 TaiwanStockShareholding \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_shareholding ( stock_id = \"2330\" , start_date = '2020-04-01' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockShareholding\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockShareholding\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id stock_name InternationalCode ForeignInvestmentRemainingShares ForeignInvestmentShares ForeignInvestmentRemainRatio ForeignInvestmentSharesRatio ForeignInvestmentUpperLimitRatio ChineseInvestmentUpperLimitRatio NumberOfSharesIssued RecentlyDeclareDate note 0 2020-04-01 2330 \u53f0\u7a4d\u96fb TW0002330008 6309042842 19621337616 24.33 75.66 100 100 25930380458 2019-05-27 1 2020-04-06 2330 \u53f0\u7a4d\u96fb TW0002330008 6304552683 19625827775 24.31 75.68 100 100 25930380458 2019-05-27 2 2020-04-07 2330 \u53f0\u7a4d\u96fb TW0002330008 6283562246 19646818212 24.23 75.76 100 100 25930380458 2019-05-27 3 2020-04-08 2330 \u53f0\u7a4d\u96fb TW0002330008 6273338931 19657041527 24.19 75.8 100 100 25930380458 2019-05-27 4 2020-04-09 2330 \u53f0\u7a4d\u96fb TW0002330008 6267988722 19662391736 24.17 75.82 100 100 25930380458 2019-05-27 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_shareholding ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockShareholding\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockShareholding\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id stock_name InternationalCode ForeignInvestmentRemainingShares ForeignInvestmentShares ForeignInvestmentRemainRatio ForeignInvestmentSharesRatio ForeignInvestmentUpperLimitRatio ChineseInvestmentUpperLimitRatio NumberOfSharesIssued RecentlyDeclareDate note 0 2020-04-01 0050 \u5143\u5927\u53f0\u706350 TW0000050004 960256795 94743205 91.01 8.98 100 100 1055000000 2019-07-18 1 2020-04-01 0051 \u5143\u5927\u4e2d\u578b100 TW0000051002 9471000 29000 99.69 0.3 100 100 9500000 2019-07-18 2 2020-04-01 0052 \u5bcc\u90a6\u79d1\u6280 TW0000052000 29957000 43000 99.85 0.14 100 100 30000000 2019-07-18 3 2020-04-01 0053 \u5143\u5927\u96fb\u5b50 TW0000053008 6466950 21050 99.67 0.32 100 100 6488000 2019-07-18 4 2020-04-01 0054 \u5143\u5927\u53f0\u554650 TW0000054006 9955000 169000 98.33 1.66 100 100 10124000 2019-07-18 \u80a1\u6771\u6301\u80a1\u5206\u7d1a\u8868 TaiwanStockHoldingSharesPer \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_holding_shares_per ( stock_id = \"2330\" , start_date = '2020-04-01' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockHoldingSharesPer\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockHoldingSharesPer\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id HoldingSharesLevel people percent unit 0 2020-04-01 2330 1-999 165122 0.12 33289900 1 2020-04-01 2330 1,000-5,000 227692 1.69 440404454 2 2020-04-01 2330 10,001-15,000 10408 0.49 128127693 3 2020-04-01 2330 100,001-200,000 1628 0.86 225202876 4 2020-04-01 2330 15,001-20,000 5068 0.34 89929303 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_holding_shares_per ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockHoldingSharesPer\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockHoldingSharesPer\" , start_date = \"2020-04-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id HoldingSharesLevel people percent unit 0 2020-04-01 0050 1-999 44173 1.02 10834763 1 2020-04-01 0050 1,000-5,000 96465 17.7 186791648 2 2020-04-01 0050 5,001-10,000 10364 7.57 79902735 3 2020-04-01 0050 10,001-15,000 2819 3.41 36075583 4 2020-04-01 0050 15,001-20,000 1557 2.69 28426726 \u501f\u5238\u6210\u4ea4\u660e\u7d30 TaiwanStockSecuritiesLending \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 15:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_securities_lending ( stock_id = \"2330\" , start_date = '2020-04-01' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockSecuritiesLending\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockSecuritiesLending\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id transaction_type volume fee_rate close original_return_date original_lending_period 0 2020-04-01 2330 \u8b70\u501f 1330 1.36 271.5 2020-09-30 182 1 2020-04-01 2330 \u8b70\u501f 800 0.41 271.5 2020-09-30 182 2 2020-04-01 2330 \u8b70\u501f 850 0.41 271.5 2020-09-30 182 3 2020-04-01 2330 \u8b70\u501f 500 0.5 271.5 2020-09-30 182 4 2020-04-01 2330 \u8b70\u501f 160 0.36 271.5 2020-09-30 182 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_securities_lending ( start_date = '2020-04-01' , ) Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockSecuritiesLending\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockSecuritiesLending\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id transaction_type volume fee_rate close original_return_date original_lending_period 0 2020-04-01 1101 \u8b70\u501f 760 0.25 39 2020-09-30 182 1 2020-04-01 1101 \u8b70\u501f 397 0.25 39 2020-09-30 182 2 2020-04-01 1101 \u7af6\u50f9 436 0.7 39 2020-09-30 182 3 2020-04-01 1102 \u8b70\u501f 150 0.25 38.6 2020-09-30 182 4 2020-04-01 1102 \u8b70\u501f 770 1.05 38.6 2020-09-30 182 \u878d\u5238\u501f\u5238\u8ce3\u51fa\u8868 TaiwanDailyShortSaleBalances \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_daily_short_sale_balances ( stock_id = \"2330\" , start_date = '2020-04-01' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanDailyShortSaleBalances\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanDailyShortSaleBalances\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output stock_id MarginShortSalesPreviousDayBalance MarginShortSalesShortSales MarginShortSalesShortCovering MarginShortSalesStockRedemption MarginShortSalesCurrentDayBalance MarginShortSalesQuota SBLShortSalesPreviousDayBalance SBLShortSalesShortSales SBLShortSalesReturns SBLShortSalesAdjustments SBLShortSalesCurrentDayBalance SBLShortSalesQuota SBLShortSalesShortCovering date 0 2330 1975000 0 1573000 378000 24000 -2107339478 47947858 487000 0 0 48434858 7526895 0 2020-04-01 1 2330 24000 0 0 24000 0 -2107339478 48434858 44000 60000 0 48418858 7563083 0 2020-04-06 2 2330 0 0 0 0 0 -2107339478 48418858 62000 0 0 48480858 7635835 0 2020-04-07 3 2330 0 0 0 0 0 -2107339478 48480858 933000 7345000 0 42068858 7688249 0 2020-04-08 4 2330 0 398000 0 0 398000 -2107339478 42068858 46000 2000 0 42112858 7642682 0 2020-04-09 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_daily_short_sale_balances ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanDailyShortSaleBalances\" , \"start_date\" : \"2021-05-20\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanDailyShortSaleBalances\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output stock_id MarginShortSalesPreviousDayBalance MarginShortSalesShortSales MarginShortSalesShortCovering MarginShortSalesStockRedemption MarginShortSalesCurrentDayBalance MarginShortSalesQuota SBLShortSalesPreviousDayBalance SBLShortSalesShortSales SBLShortSalesReturns SBLShortSalesAdjustments SBLShortSalesCurrentDayBalance SBLShortSalesQuota SBLShortSalesShortCovering date 0 0050 2336000 13000 65000 1000 2283000 263750000 25527000 0 0 0 25527000 2397551 0 2020-04-01 1 0051 0 0 0 0 0 2375000 1000 0 0 0 1000 4053 0 2020-04-01 2 0052 0 0 0 0 0 7500000 34000 0 0 0 34000 17168 0 2020-04-01 3 0053 0 0 0 0 0 1622000 0 0 0 0 0 3158 0 2020-04-01 4 0054 0 0 0 0 0 2531000 0 0 0 0 0 1357 0 2020-04-01 \u8b49\u5238\u5546\u8cc7\u8a0a\u8868 TaiwanSecuritiesTraderInfo \u00b6 \u63d0\u4f9b\u8b49\u5238\u5546\u76f8\u95dc\u8cc7\u8a0a\uff0c\u7528\u65bc\u53f0\u80a1\u5206\u9ede\u8cc7\u6599\u8868(TaiwanStockTradingDailyReport )\uff0c\u4f7f\u7528\u5377\u5546\u4ee3\u78bc\uff0c\u67e5\u8a62\u7279\u5b9a\u5377\u5546\u6240\u6709\u80a1\u7968\u9032\u51fa\u3002 Example Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanSecuritiesTraderInfo\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanSecuritiesTraderInfo\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output securities_trader_id securities_trader date address phone 0 1020 \u5408\u5eab 2011-12-02 \u53f0\u5317\u5e02\u5927\u5b89\u5340\u5fe0\u5b5d\u6771\u8def\u56db\u6bb5325\u865f2\u6a13(\u90e8\u5206)\u3001\u7d93\u7d00\u90e8\u8907\u59d4\u8a17\u79d1\u5730\u5740\uff1a\u53f0\u5317\u5e02\u677e\u5c71\u5340\u9577\u5b89\u6771\u8def\u4e8c\u6bb5225\u865f5\u6a13 02-27528000 1 1021 \u5408\u5eab- \u53f0\u4e2d 2011-12-02 \u53f0\u4e2d\u5e02\u897f\u5340\u6c11\u6b0a\u8def91\u865f6\u6a13 04-22255141 2 1022 \u5408\u5eab-\u53f0\u5357 2011-12-02 \u53f0\u5357\u5e02\u5317\u5340\u6210\u529f\u8def48\u865f3\u6a13 06-2260148 3 1023 \u5408\u5eab-\u9ad8\u96c4 2011-12-02 \u9ad8\u96c4\u5e02\u5927\u52c7\u8def97\u865f5\u6a13 07-5319755 4 1024 \u5408\u5eab-\u5609\u7fa9 2011-12-02 \u5609\u7fa9\u5e02\u570b\u83ef\u8857279\u865f2\u6a13 05-2220016 \u53f0\u80a1\u5206\u9ede\u8cc7\u6599\u8868(query by \u80a1\u7968\u4ee3\u78bc) TaiwanStockTradingDailyReport (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 \u8cc7\u6599\u6642\u9593\u9577\u5ea6\uff1a2021-06-30 ~ now \u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599) \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Python-request import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/taiwan_stock_trading_daily_report' parameter = { \"data_id\" : \"2330\" , \"date\" : \"2022-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/taiwan_stock_trading_daily_report' response = httr :: GET ( url = url , query = list ( data_id = \"2330\" , start_date = \"2022-06-16\" , token = token # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output securities_trader price buy sell securities_trader_id stock_id date 0 \u5408\u5eab 508 4000 2000 1020 2330 2022-06-16 1 \u5408\u5eab 509 3480 0 1020 2330 2022-06-16 2 \u5408\u5eab 510 2310 50 1020 2330 2022-06-16 3 \u5408\u5eab 511 1169 0 1020 2330 2022-06-16 4 \u5408\u5eab 512 1300 10000 1020 2330 2022-06-16 \u53f0\u80a1\u5206\u9ede\u8cc7\u6599\u8868(query by \u5238\u5546\u4ee3\u78bc) TaiwanStockTradingDailyReport (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 \u8cc7\u6599\u6642\u9593\u9577\u5ea6\uff1a2021-06-30 ~ now \u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599) \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Python-request import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/taiwan_stock_trading_daily_report' parameter = { \"securities_trader_id\" : \"1020\" , \"date\" : \"2022-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/taiwan_stock_trading_daily_report' response = httr :: GET ( url = url , query = list ( securities_trader_id = \"1020\" , start_date = \"2022-06-16\" , token = token # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output securities_trader price buy sell securities_trader_id stock_id date 0 \u5408\u5eab 122.25 19000 0 1020 0050 2022-06-16 1 \u5408\u5eab 122.3 80000 0 1020 0050 2022-06-16 2 \u5408\u5eab 122.35 10000 0 1020 0050 2022-06-16 3 \u5408\u5eab 122.5 1300 0 1020 0050 2022-06-16 4 \u5408\u5eab 122.55 20000 0 1020 0050 2022-06-16 ... ... ... ... ... ... ... ... 3211 \u5408\u5eab 107 1000 50000 1020 9958 2022-06-16 3212 \u5408\u5eab 107.5 0 32000 1020 9958 2022-06-16 3213 \u5408\u5eab 108 0 2000 1020 9958 2022-06-16 3214 \u5408\u5eab 108.5 150 0 1020 9958 2022-06-16 3215 \u5408\u5eab 16.05 1000 0 1020 9962 2022-06-16 \u53f0\u80a1\u516b\u5927\u884c\u5eab\u8cb7\u8ce3\u8868 TaiwanStockGovernmentBankBuySell (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 \u8cc7\u6599\u6642\u9593\u9577\u5ea6\uff1a2021-06-30 ~ now \u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 23:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_government_bank_buy_sell ( start_date = '2023-01-17' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockGovernmentBankBuySell\" , \"start_date\" : \"2023-01-17\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockGovernmentBankBuySell\" , start_date = \"2023-01-17\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id buy_amount sell_amount buy sell bank_name 0 2023-01-17 0050 43992298.6 53309904.25 372595 451744 \u5146\u8c50 1 2023-01-17 5202 288.0 303.50 20 20 \u7b2c\u4e00 2 2023-01-17 5202 0.0 59.45 0 4 \u83ef\u5357 3 2023-01-17 5203 82800.0 0.00 1000 0 \u5146\u8c50 4 2023-01-17 5203 249000.0 583600.00 3000 7000 \u81fa\u9280","title":"\u7c4c\u78bc\u9762"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstockmarginpurchaseshortsale","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_margin_purchase_short_sale ( stock_id = \"2330\" , start_date = '2020-04-02' , end_date = '2020-04-12' ) Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMarginPurchaseShortSale\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMarginPurchaseShortSale\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table Output date stock_id MarginPurchaseBuy MarginPurchaseCashRepayment MarginPurchaseLimit MarginPurchaseSell MarginPurchaseTodayBalance MarginPurchaseYesterdayBalance Note OffsetLoanAndShort ShortSaleBuy ShortSaleCashRepayment ShortSaleLimit ShortSaleSell ShortSaleTodayBalance ShortSaleYesterdayBalance 0 2020-04-06 2330 1914 8 6482595 1269 26285 25648 X 0 0 24 6482595 0 0 24 1 2020-04-07 2330 1049 13 6482595 2655 24666 26285 X 0 0 0 6482595 0 0 0 2 2020-04-08 2330 1192 3 6482595 1569 24286 24666 0 0 0 6482595 0 0 0 3 2020-04-09 2330 499 28 6482595 1362 23395 24286 209 0 0 6482595 398 398 0 4 2020-04-10 2330 1227 24 6482595 794 23804 23395 53 156 0 6482595 156 398 398","title":"\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockMarginPurchaseShortSale"},{"location":"tutor/TaiwanMarket/Chip/#backersponsor","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_margin_purchase_short_sale ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMarginPurchaseShortSale\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMarginPurchaseShortSale\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id MarginPurchaseBuy MarginPurchaseCashRepayment MarginPurchaseLimit MarginPurchaseSell MarginPurchaseTodayBalance MarginPurchaseYesterdayBalance Note OffsetLoanAndShort ShortSaleBuy ShortSaleCashRepayment ShortSaleLimit ShortSaleSell ShortSaleTodayBalance ShortSaleYesterdayBalance 0 2020-04-01 0050 193 15 263750 163 3189 3174 0 65 1 263750 13 2283 2336 1 2020-04-01 0051 0 0 2375 0 5 5 0 0 0 2375 0 0 0 2 2020-04-01 0052 0 0 7500 0 128 128 0 0 0 7500 0 0 0 3 2020-04-01 0053 0 0 1622 0 1 1 0 0 0 1622 0 0 0 4 2020-04-01 0054 0 0 2531 0 0 0 X 0 0 0 2531 0 0 0","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstocktotalmarginpurchaseshortsale","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_margin_purchase_short_sale_total ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockTotalMarginPurchaseShortSale\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockTotalMarginPurchaseShortSale\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output TodayBalance YesBalance buy date name Return sell 0 5463820 5471770 236127 2020-04-01 MarginPurchase 10986 233091 1 91965082000 91898116000 4046643000 2020-04-01 MarginPurchaseMoney 196619000 3783058000 2 541704 556742 57266 2020-04-01 ShortSale 6151 48379 3 535401 541704 50779 2020-04-06 ShortSale 3700 48176 4 93198509000 91965082000 6440842000 2020-04-06 MarginPurchaseMoney 71638000 5135777000","title":"\u53f0\u7063\u5e02\u5834\u6574\u9ad4\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockTotalMarginPurchaseShortSale"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstockinstitutionalinvestorsbuysell","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 20:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_institutional_investors ( stock_id = \"2330\" , start_date = '2020-04-01' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockInstitutionalInvestorsBuySell\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockInstitutionalInvestorsBuySell\" , data_id = \"2330\" , start_date = \"2020-04-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id buy name sell 0 2020-04-01 2330 31304729 Foreign_Investor 29057663 1 2020-04-01 2330 0 Foreign_Dealer_Self 0 2 2020-04-01 2330 900000 Investment_Trust 239000 3 2020-04-01 2330 79000 Dealer_self 807000 4 2020-04-01 2330 189000 Dealer_Hedging 493500","title":"\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockInstitutionalInvestorsBuySell"},{"location":"tutor/TaiwanMarket/Chip/#backersponsor_1","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_institutional_investors ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockInstitutionalInvestorsBuySell\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockInstitutionalInvestorsBuySell\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id buy name sell 0 2020-04-01 0050 458249 Foreign_Investor 4492000 1 2020-04-01 0050 0 Foreign_Dealer_Self 0 2 2020-04-01 0050 54000 Investment_Trust 0 3 2020-04-01 0050 0 Dealer_self 0 4 2020-04-01 0050 2050000 Dealer_Hedging 905000","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstocktotalinstitutionalinvestors","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 15:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_institutional_investors_total ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockTotalInstitutionalInvestors\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockTotalInstitutionalInvestors\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output buy date name sell 0 123150 2020-04-01 Foreign_Dealer_Self 266220 1 3681729831 2020-04-01 Dealer_Hedging 5539788946 2 33759089839 2020-04-01 Foreign_Investor 38466572585 3 3039112340 2020-04-01 Investment_Trust 853138940 4 789316840 2020-04-01 Dealer_self 912143500","title":"\u53f0\u7063\u5e02\u5834\u6574\u9ad4\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockTotalInstitutionalInvestors"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstockshareholding","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_shareholding ( stock_id = \"2330\" , start_date = '2020-04-01' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockShareholding\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockShareholding\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id stock_name InternationalCode ForeignInvestmentRemainingShares ForeignInvestmentShares ForeignInvestmentRemainRatio ForeignInvestmentSharesRatio ForeignInvestmentUpperLimitRatio ChineseInvestmentUpperLimitRatio NumberOfSharesIssued RecentlyDeclareDate note 0 2020-04-01 2330 \u53f0\u7a4d\u96fb TW0002330008 6309042842 19621337616 24.33 75.66 100 100 25930380458 2019-05-27 1 2020-04-06 2330 \u53f0\u7a4d\u96fb TW0002330008 6304552683 19625827775 24.31 75.68 100 100 25930380458 2019-05-27 2 2020-04-07 2330 \u53f0\u7a4d\u96fb TW0002330008 6283562246 19646818212 24.23 75.76 100 100 25930380458 2019-05-27 3 2020-04-08 2330 \u53f0\u7a4d\u96fb TW0002330008 6273338931 19657041527 24.19 75.8 100 100 25930380458 2019-05-27 4 2020-04-09 2330 \u53f0\u7a4d\u96fb TW0002330008 6267988722 19662391736 24.17 75.82 100 100 25930380458 2019-05-27","title":"\u5916\u8cc7\u6301\u80a1\u8868 TaiwanStockShareholding"},{"location":"tutor/TaiwanMarket/Chip/#backersponsor_2","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_shareholding ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockShareholding\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockShareholding\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id stock_name InternationalCode ForeignInvestmentRemainingShares ForeignInvestmentShares ForeignInvestmentRemainRatio ForeignInvestmentSharesRatio ForeignInvestmentUpperLimitRatio ChineseInvestmentUpperLimitRatio NumberOfSharesIssued RecentlyDeclareDate note 0 2020-04-01 0050 \u5143\u5927\u53f0\u706350 TW0000050004 960256795 94743205 91.01 8.98 100 100 1055000000 2019-07-18 1 2020-04-01 0051 \u5143\u5927\u4e2d\u578b100 TW0000051002 9471000 29000 99.69 0.3 100 100 9500000 2019-07-18 2 2020-04-01 0052 \u5bcc\u90a6\u79d1\u6280 TW0000052000 29957000 43000 99.85 0.14 100 100 30000000 2019-07-18 3 2020-04-01 0053 \u5143\u5927\u96fb\u5b50 TW0000053008 6466950 21050 99.67 0.32 100 100 6488000 2019-07-18 4 2020-04-01 0054 \u5143\u5927\u53f0\u554650 TW0000054006 9955000 169000 98.33 1.66 100 100 10124000 2019-07-18","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstockholdingsharesper","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_holding_shares_per ( stock_id = \"2330\" , start_date = '2020-04-01' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockHoldingSharesPer\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockHoldingSharesPer\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id HoldingSharesLevel people percent unit 0 2020-04-01 2330 1-999 165122 0.12 33289900 1 2020-04-01 2330 1,000-5,000 227692 1.69 440404454 2 2020-04-01 2330 10,001-15,000 10408 0.49 128127693 3 2020-04-01 2330 100,001-200,000 1628 0.86 225202876 4 2020-04-01 2330 15,001-20,000 5068 0.34 89929303","title":"\u80a1\u6771\u6301\u80a1\u5206\u7d1a\u8868 TaiwanStockHoldingSharesPer"},{"location":"tutor/TaiwanMarket/Chip/#backersponsor_3","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_holding_shares_per ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockHoldingSharesPer\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockHoldingSharesPer\" , start_date = \"2020-04-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id HoldingSharesLevel people percent unit 0 2020-04-01 0050 1-999 44173 1.02 10834763 1 2020-04-01 0050 1,000-5,000 96465 17.7 186791648 2 2020-04-01 0050 5,001-10,000 10364 7.57 79902735 3 2020-04-01 0050 10,001-15,000 2819 3.41 36075583 4 2020-04-01 0050 15,001-20,000 1557 2.69 28426726","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstocksecuritieslending","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 15:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_securities_lending ( stock_id = \"2330\" , start_date = '2020-04-01' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockSecuritiesLending\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockSecuritiesLending\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id transaction_type volume fee_rate close original_return_date original_lending_period 0 2020-04-01 2330 \u8b70\u501f 1330 1.36 271.5 2020-09-30 182 1 2020-04-01 2330 \u8b70\u501f 800 0.41 271.5 2020-09-30 182 2 2020-04-01 2330 \u8b70\u501f 850 0.41 271.5 2020-09-30 182 3 2020-04-01 2330 \u8b70\u501f 500 0.5 271.5 2020-09-30 182 4 2020-04-01 2330 \u8b70\u501f 160 0.36 271.5 2020-09-30 182","title":"\u501f\u5238\u6210\u4ea4\u660e\u7d30 TaiwanStockSecuritiesLending"},{"location":"tutor/TaiwanMarket/Chip/#backersponsor_4","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_securities_lending ( start_date = '2020-04-01' , ) Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockSecuritiesLending\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockSecuritiesLending\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id transaction_type volume fee_rate close original_return_date original_lending_period 0 2020-04-01 1101 \u8b70\u501f 760 0.25 39 2020-09-30 182 1 2020-04-01 1101 \u8b70\u501f 397 0.25 39 2020-09-30 182 2 2020-04-01 1101 \u7af6\u50f9 436 0.7 39 2020-09-30 182 3 2020-04-01 1102 \u8b70\u501f 150 0.25 38.6 2020-09-30 182 4 2020-04-01 1102 \u8b70\u501f 770 1.05 38.6 2020-09-30 182","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Chip/#taiwandailyshortsalebalances","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_daily_short_sale_balances ( stock_id = \"2330\" , start_date = '2020-04-01' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanDailyShortSaleBalances\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanDailyShortSaleBalances\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output stock_id MarginShortSalesPreviousDayBalance MarginShortSalesShortSales MarginShortSalesShortCovering MarginShortSalesStockRedemption MarginShortSalesCurrentDayBalance MarginShortSalesQuota SBLShortSalesPreviousDayBalance SBLShortSalesShortSales SBLShortSalesReturns SBLShortSalesAdjustments SBLShortSalesCurrentDayBalance SBLShortSalesQuota SBLShortSalesShortCovering date 0 2330 1975000 0 1573000 378000 24000 -2107339478 47947858 487000 0 0 48434858 7526895 0 2020-04-01 1 2330 24000 0 0 24000 0 -2107339478 48434858 44000 60000 0 48418858 7563083 0 2020-04-06 2 2330 0 0 0 0 0 -2107339478 48418858 62000 0 0 48480858 7635835 0 2020-04-07 3 2330 0 0 0 0 0 -2107339478 48480858 933000 7345000 0 42068858 7688249 0 2020-04-08 4 2330 0 398000 0 0 398000 -2107339478 42068858 46000 2000 0 42112858 7642682 0 2020-04-09","title":"\u878d\u5238\u501f\u5238\u8ce3\u51fa\u8868 TaiwanDailyShortSaleBalances"},{"location":"tutor/TaiwanMarket/Chip/#backersponsor_5","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_daily_short_sale_balances ( start_date = '2020-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanDailyShortSaleBalances\" , \"start_date\" : \"2021-05-20\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanDailyShortSaleBalances\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output stock_id MarginShortSalesPreviousDayBalance MarginShortSalesShortSales MarginShortSalesShortCovering MarginShortSalesStockRedemption MarginShortSalesCurrentDayBalance MarginShortSalesQuota SBLShortSalesPreviousDayBalance SBLShortSalesShortSales SBLShortSalesReturns SBLShortSalesAdjustments SBLShortSalesCurrentDayBalance SBLShortSalesQuota SBLShortSalesShortCovering date 0 0050 2336000 13000 65000 1000 2283000 263750000 25527000 0 0 0 25527000 2397551 0 2020-04-01 1 0051 0 0 0 0 0 2375000 1000 0 0 0 1000 4053 0 2020-04-01 2 0052 0 0 0 0 0 7500000 34000 0 0 0 34000 17168 0 2020-04-01 3 0053 0 0 0 0 0 1622000 0 0 0 0 0 3158 0 2020-04-01 4 0054 0 0 0 0 0 2531000 0 0 0 0 0 1357 0 2020-04-01","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Chip/#taiwansecuritiestraderinfo","text":"\u63d0\u4f9b\u8b49\u5238\u5546\u76f8\u95dc\u8cc7\u8a0a\uff0c\u7528\u65bc\u53f0\u80a1\u5206\u9ede\u8cc7\u6599\u8868(TaiwanStockTradingDailyReport )\uff0c\u4f7f\u7528\u5377\u5546\u4ee3\u78bc\uff0c\u67e5\u8a62\u7279\u5b9a\u5377\u5546\u6240\u6709\u80a1\u7968\u9032\u51fa\u3002 Example Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanSecuritiesTraderInfo\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanSecuritiesTraderInfo\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output securities_trader_id securities_trader date address phone 0 1020 \u5408\u5eab 2011-12-02 \u53f0\u5317\u5e02\u5927\u5b89\u5340\u5fe0\u5b5d\u6771\u8def\u56db\u6bb5325\u865f2\u6a13(\u90e8\u5206)\u3001\u7d93\u7d00\u90e8\u8907\u59d4\u8a17\u79d1\u5730\u5740\uff1a\u53f0\u5317\u5e02\u677e\u5c71\u5340\u9577\u5b89\u6771\u8def\u4e8c\u6bb5225\u865f5\u6a13 02-27528000 1 1021 \u5408\u5eab- \u53f0\u4e2d 2011-12-02 \u53f0\u4e2d\u5e02\u897f\u5340\u6c11\u6b0a\u8def91\u865f6\u6a13 04-22255141 2 1022 \u5408\u5eab-\u53f0\u5357 2011-12-02 \u53f0\u5357\u5e02\u5317\u5340\u6210\u529f\u8def48\u865f3\u6a13 06-2260148 3 1023 \u5408\u5eab-\u9ad8\u96c4 2011-12-02 \u9ad8\u96c4\u5e02\u5927\u52c7\u8def97\u865f5\u6a13 07-5319755 4 1024 \u5408\u5eab-\u5609\u7fa9 2011-12-02 \u5609\u7fa9\u5e02\u570b\u83ef\u8857279\u865f2\u6a13 05-2220016","title":"\u8b49\u5238\u5546\u8cc7\u8a0a\u8868 TaiwanSecuritiesTraderInfo"},{"location":"tutor/TaiwanMarket/Chip/#query-by-taiwanstocktradingdailyreport-sponsor","text":"\u8cc7\u6599\u6642\u9593\u9577\u5ea6\uff1a2021-06-30 ~ now \u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599) \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Python-request import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/taiwan_stock_trading_daily_report' parameter = { \"data_id\" : \"2330\" , \"date\" : \"2022-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/taiwan_stock_trading_daily_report' response = httr :: GET ( url = url , query = list ( data_id = \"2330\" , start_date = \"2022-06-16\" , token = token # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output securities_trader price buy sell securities_trader_id stock_id date 0 \u5408\u5eab 508 4000 2000 1020 2330 2022-06-16 1 \u5408\u5eab 509 3480 0 1020 2330 2022-06-16 2 \u5408\u5eab 510 2310 50 1020 2330 2022-06-16 3 \u5408\u5eab 511 1169 0 1020 2330 2022-06-16 4 \u5408\u5eab 512 1300 10000 1020 2330 2022-06-16","title":"\u53f0\u80a1\u5206\u9ede\u8cc7\u6599\u8868(query by \u80a1\u7968\u4ee3\u78bc) TaiwanStockTradingDailyReport (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Chip/#query-by-taiwanstocktradingdailyreport-sponsor_1","text":"\u8cc7\u6599\u6642\u9593\u9577\u5ea6\uff1a2021-06-30 ~ now \u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599) \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Python-request import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/taiwan_stock_trading_daily_report' parameter = { \"securities_trader_id\" : \"1020\" , \"date\" : \"2022-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/taiwan_stock_trading_daily_report' response = httr :: GET ( url = url , query = list ( securities_trader_id = \"1020\" , start_date = \"2022-06-16\" , token = token # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output securities_trader price buy sell securities_trader_id stock_id date 0 \u5408\u5eab 122.25 19000 0 1020 0050 2022-06-16 1 \u5408\u5eab 122.3 80000 0 1020 0050 2022-06-16 2 \u5408\u5eab 122.35 10000 0 1020 0050 2022-06-16 3 \u5408\u5eab 122.5 1300 0 1020 0050 2022-06-16 4 \u5408\u5eab 122.55 20000 0 1020 0050 2022-06-16 ... ... ... ... ... ... ... ... 3211 \u5408\u5eab 107 1000 50000 1020 9958 2022-06-16 3212 \u5408\u5eab 107.5 0 32000 1020 9958 2022-06-16 3213 \u5408\u5eab 108 0 2000 1020 9958 2022-06-16 3214 \u5408\u5eab 108.5 150 0 1020 9958 2022-06-16 3215 \u5408\u5eab 16.05 1000 0 1020 9962 2022-06-16","title":"\u53f0\u80a1\u5206\u9ede\u8cc7\u6599\u8868(query by \u5238\u5546\u4ee3\u78bc) TaiwanStockTradingDailyReport (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstockgovernmentbankbuysell-sponsor","text":"\u8cc7\u6599\u6642\u9593\u9577\u5ea6\uff1a2021-06-30 ~ now \u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 23:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_government_bank_buy_sell ( start_date = '2023-01-17' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockGovernmentBankBuySell\" , \"start_date\" : \"2023-01-17\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockGovernmentBankBuySell\" , start_date = \"2023-01-17\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id buy_amount sell_amount buy sell bank_name 0 2023-01-17 0050 43992298.6 53309904.25 372595 451744 \u5146\u8c50 1 2023-01-17 5202 288.0 303.50 20 20 \u7b2c\u4e00 2 2023-01-17 5202 0.0 59.45 0 4 \u83ef\u5357 3 2023-01-17 5203 82800.0 0.00 1000 0 \u5146\u8c50 4 2023-01-17 5203 249000.0 583600.00 3000 7000 \u81fa\u9280","title":"\u53f0\u80a1\u516b\u5927\u884c\u5eab\u8cb7\u8ce3\u8868 TaiwanStockGovernmentBankBuySell (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/DataList/","text":"\u5728\u53f0\u7063\u91d1\u878d\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 41 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u6280\u8853\u9762 Technical \u00b6 \u53f0\u80a1\u7e3d\u89bd TaiwanStockInfo \u53f0\u7063\u80a1\u50f9\u8cc7\u6599\u8868 TaiwanStockPrice \u53f0\u7063\u9084\u539f\u80a1\u50f9\u8cc7\u6599\u8868 TaiwanStockPriceAdj \u53f0\u7063\u80a1\u50f9\u6b77\u53f2\u9010\u7b46\u8cc7\u6599\u8868 TaiwanStockPriceTick \u500b\u80a1 PER\u3001PBR \u8cc7\u6599\u8868 TaiwanStockPER \u53f0\u80a1\u5373\u6642\u8cc7\u8a0a taiwan_stock_tick_snapshot \u6bcf 5 \u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 TaiwanStockStatisticsOfOrderBookAndTrade \u53f0\u80a1\u52a0\u6b0a\u6307\u6578 TaiwanVariousIndicators5Seconds \u7576\u65e5\u6c96\u92b7\u4ea4\u6613\u6a19\u7684\u53ca\u6210\u4ea4\u91cf\u503c TaiwanStockDayTrading \u52a0\u6b0a\u3001\u6ac3\u8cb7\u5831\u916c\u6307\u6578 TaiwanStockTotalReturnIndex \u7c4c\u78bc\u9762 Chip \u00b6 \u500b\u80a1\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockMarginPurchaseShortSale \u6574\u9ad4\u5e02\u5834\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockTotalMarginPurchaseShortSale \u500b\u80a1\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockInstitutionalInvestorsBuySell \u6574\u9ad4\u4e09\u5927\u5e02\u5834\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockTotalInstitutionalInvestors \u5916\u8cc7\u6301\u80a1\u8868 TaiwanStockShareholding \u80a1\u6b0a\u6301\u80a1\u5206\u7d1a\u8868 TaiwanStockHoldingSharesPer \u501f\u5238\u6210\u4ea4\u660e\u7d30 TaiwanStockSecuritiesLending \u878d\u5238\u501f\u5238\u8ce3\u51fa TaiwanDailyShortSaleBalances \u8b49\u5238\u5546\u8cc7\u8a0a\u8868 TaiwanSecuritiesTraderInfo \u53f0\u80a1\u5206\u9ede\u8cc7\u6599\u8868(query by \u80a1\u7968\u4ee3\u78bc) TaiwanStockTradingDailyReport \u53f0\u80a1\u5206\u9ede\u8cc7\u6599\u8868(query by \u5238\u5546\u4ee3\u78bc) TaiwanStockTradingDailyReport \u53f0\u80a1\u516b\u5927\u884c\u5eab\u8cb7\u8ce3\u8868 TaiwanstockGovernmentBankBuySell \u57fa\u672c\u9762 Fundamental \u00b6 \u73fe\u91d1\u6d41\u91cf\u8868 TaiwanStockCashFlowsStatement \u7d9c\u5408\u640d\u76ca\u8868 TaiwanStockFinancialStatements \u8cc7\u7522\u8ca0\u50b5\u8868 TaiwanStockBalanceSheet \u80a1\u5229\u653f\u7b56\u8868 TaiwanStockDividend \u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868 TaiwanStockDividendResult \u6708\u71df\u6536\u8868 TaiwanStockMonthRevenue \u6e1b\u8cc7\u6062\u5fa9\u8cb7\u8ce3\u53c3\u8003\u50f9\u683c TaiwanStockCapitalReductionReferencePrice \u884d\u751f\u6027\u91d1\u878d\u5546\u54c1 Derivative \u00b6 \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a\u7e3d\u89bd TaiwanOptionFutureInfo \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9\u7e3d\u89bd TaiwanFutOptTickInfo \u671f\u8ca8\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanFuturesDaily \u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanOptionDaily \u671f\u8ca8\u4ea4\u6613\u660e\u7d30\u8868 TaiwanFuturesTick \u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30\u8868 TaiwanOptionTIck \u671f\u8ca8\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3 TaiwanFuturesInstitutionalInvestors \u9078\u64c7\u6b0a\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3 TaiwanOptionInstitutionalInvestors \u671f\u8ca8\u5404\u5377\u5546\u6bcf\u65e5\u4ea4\u6613 TaiwanFuturesDealerTradingVolumeDaily \u9078\u64c7\u6b0a\u5404\u5377\u5546\u6bcf\u65e5\u4ea4\u6613 TaiwanOptionDealerTradingVolumeDaily \u53f0\u80a1\u671f\u8ca8\u5373\u6642\u8cc7\u8a0a taiwan_futures_snapshot \u53f0\u80a1\u9078\u64c7\u6b0a\u5373\u6642\u8cc7\u8a0a taiwan_options_snapshot \u5373\u6642\u8cc7\u6599 RealTime \u00b6 \u53f0\u80a1\u5373\u6642\u8cc7\u8a0a taiwan_stock_tick_snapshot \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9\u7e3d\u89bd TaiwanFutOptTickInfo \u53f0\u80a1\u671f\u8ca8\u5373\u6642\u8cc7\u8a0a taiwan_futures_snapshot \u53f0\u80a1\u9078\u64c7\u6b0a\u5373\u6642\u8cc7\u8a0a taiwan_options_snapshot \u5176\u4ed6 Others \u00b6 \u76f8\u95dc\u65b0\u805e TaiwanStockNews \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u7e3d\u89bd"},{"location":"tutor/TaiwanMarket/DataList/#technical","text":"\u53f0\u80a1\u7e3d\u89bd TaiwanStockInfo \u53f0\u7063\u80a1\u50f9\u8cc7\u6599\u8868 TaiwanStockPrice \u53f0\u7063\u9084\u539f\u80a1\u50f9\u8cc7\u6599\u8868 TaiwanStockPriceAdj \u53f0\u7063\u80a1\u50f9\u6b77\u53f2\u9010\u7b46\u8cc7\u6599\u8868 TaiwanStockPriceTick \u500b\u80a1 PER\u3001PBR \u8cc7\u6599\u8868 TaiwanStockPER \u53f0\u80a1\u5373\u6642\u8cc7\u8a0a taiwan_stock_tick_snapshot \u6bcf 5 \u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 TaiwanStockStatisticsOfOrderBookAndTrade \u53f0\u80a1\u52a0\u6b0a\u6307\u6578 TaiwanVariousIndicators5Seconds \u7576\u65e5\u6c96\u92b7\u4ea4\u6613\u6a19\u7684\u53ca\u6210\u4ea4\u91cf\u503c TaiwanStockDayTrading \u52a0\u6b0a\u3001\u6ac3\u8cb7\u5831\u916c\u6307\u6578 TaiwanStockTotalReturnIndex","title":"\u6280\u8853\u9762 Technical"},{"location":"tutor/TaiwanMarket/DataList/#chip","text":"\u500b\u80a1\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockMarginPurchaseShortSale \u6574\u9ad4\u5e02\u5834\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockTotalMarginPurchaseShortSale \u500b\u80a1\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockInstitutionalInvestorsBuySell \u6574\u9ad4\u4e09\u5927\u5e02\u5834\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockTotalInstitutionalInvestors \u5916\u8cc7\u6301\u80a1\u8868 TaiwanStockShareholding \u80a1\u6b0a\u6301\u80a1\u5206\u7d1a\u8868 TaiwanStockHoldingSharesPer \u501f\u5238\u6210\u4ea4\u660e\u7d30 TaiwanStockSecuritiesLending \u878d\u5238\u501f\u5238\u8ce3\u51fa TaiwanDailyShortSaleBalances \u8b49\u5238\u5546\u8cc7\u8a0a\u8868 TaiwanSecuritiesTraderInfo \u53f0\u80a1\u5206\u9ede\u8cc7\u6599\u8868(query by \u80a1\u7968\u4ee3\u78bc) TaiwanStockTradingDailyReport \u53f0\u80a1\u5206\u9ede\u8cc7\u6599\u8868(query by \u5238\u5546\u4ee3\u78bc) TaiwanStockTradingDailyReport \u53f0\u80a1\u516b\u5927\u884c\u5eab\u8cb7\u8ce3\u8868 TaiwanstockGovernmentBankBuySell","title":"\u7c4c\u78bc\u9762 Chip"},{"location":"tutor/TaiwanMarket/DataList/#fundamental","text":"\u73fe\u91d1\u6d41\u91cf\u8868 TaiwanStockCashFlowsStatement \u7d9c\u5408\u640d\u76ca\u8868 TaiwanStockFinancialStatements \u8cc7\u7522\u8ca0\u50b5\u8868 TaiwanStockBalanceSheet \u80a1\u5229\u653f\u7b56\u8868 TaiwanStockDividend \u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868 TaiwanStockDividendResult \u6708\u71df\u6536\u8868 TaiwanStockMonthRevenue \u6e1b\u8cc7\u6062\u5fa9\u8cb7\u8ce3\u53c3\u8003\u50f9\u683c TaiwanStockCapitalReductionReferencePrice","title":"\u57fa\u672c\u9762 Fundamental"},{"location":"tutor/TaiwanMarket/DataList/#derivative","text":"\u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a\u7e3d\u89bd TaiwanOptionFutureInfo \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9\u7e3d\u89bd TaiwanFutOptTickInfo \u671f\u8ca8\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanFuturesDaily \u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanOptionDaily \u671f\u8ca8\u4ea4\u6613\u660e\u7d30\u8868 TaiwanFuturesTick \u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30\u8868 TaiwanOptionTIck \u671f\u8ca8\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3 TaiwanFuturesInstitutionalInvestors \u9078\u64c7\u6b0a\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3 TaiwanOptionInstitutionalInvestors \u671f\u8ca8\u5404\u5377\u5546\u6bcf\u65e5\u4ea4\u6613 TaiwanFuturesDealerTradingVolumeDaily \u9078\u64c7\u6b0a\u5404\u5377\u5546\u6bcf\u65e5\u4ea4\u6613 TaiwanOptionDealerTradingVolumeDaily \u53f0\u80a1\u671f\u8ca8\u5373\u6642\u8cc7\u8a0a taiwan_futures_snapshot \u53f0\u80a1\u9078\u64c7\u6b0a\u5373\u6642\u8cc7\u8a0a taiwan_options_snapshot","title":"\u884d\u751f\u6027\u91d1\u878d\u5546\u54c1 Derivative"},{"location":"tutor/TaiwanMarket/DataList/#realtime","text":"\u53f0\u80a1\u5373\u6642\u8cc7\u8a0a taiwan_stock_tick_snapshot \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9\u7e3d\u89bd TaiwanFutOptTickInfo \u53f0\u80a1\u671f\u8ca8\u5373\u6642\u8cc7\u8a0a taiwan_futures_snapshot \u53f0\u80a1\u9078\u64c7\u6b0a\u5373\u6642\u8cc7\u8a0a taiwan_options_snapshot","title":"\u5373\u6642\u8cc7\u6599 RealTime"},{"location":"tutor/TaiwanMarket/DataList/#others","text":"\u76f8\u95dc\u65b0\u805e TaiwanStockNews \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u5176\u4ed6 Others"},{"location":"tutor/TaiwanMarket/Derivative/","text":"\u5728\u53f0\u80a1\u884d\u751f\u6027\u5546\u54c1\u8cc7\u6599\uff0c\u6211\u5011\u64c1\u6709 9 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a\u7e3d\u89bd TaiwanOptionFutureInfo \u671f\u8ca8\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanFuturesDaily \u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanOptionDaily \u671f\u8ca8\u4ea4\u6613\u660e\u7d30\u8868 TaiwanFuturesTick \u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30\u8868 TaiwanOptionTick \u671f\u8ca8\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3 TaiwanFuturesInstitutionalInvestors \u9078\u64c7\u6b0a\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3 TaiwanOptionInstitutionalInvestors \u671f\u8ca8\u5404\u5377\u5546\u6bcf\u65e5\u4ea4\u6613 TaiwanFuturesDealerTradingVolumeDaily \u9078\u64c7\u6b0a\u5404\u5377\u5546\u6bcf\u65e5\u4ea4\u6613 TaiwanOptionDealerTradingVolumeDaily \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a\u7e3d\u89bd TaiwanFutOptDailyInfo \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futopt_daily_info () Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFutOptDailyInfo\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFutOptDailyInfo\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) Output code type 0 AAA TaiwanOptionDaily 1 AAB TaiwanOptionDaily 2 AAO TaiwanOptionDaily 3 ABA TaiwanOptionDaily 4 ABO TaiwanOptionDaily \u671f\u8ca8\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanFuturesDaily \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 16:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futures_daily ( futures_id = 'TX' , start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesDaily\" , \"data_id\" : \"TX\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesDaily\" , data_id = \"TX\" , start_date = \"2020-04-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) Output date futures_id contract_date open max min close spread spread_per volume settlement_price open_interest trading_session 0 2020-04-01 TX 202004 9588 9650 9551 9552 -43 -0.45 116273 9555 83725 position 1 2020-04-01 TX 202004 9630 9665 9551 9575 -20 -0.21 73771 0 0 after_market 2 2020-04-01 TX 202005 9523 9580 9484 9486 -43 -0.45 1266 9486 6435 position 3 2020-04-01 TX 202005 9565 9595 9486 9526 -3 -0.03 452 0 0 after_market 4 2020-04-01 TX 202006 9452 9508 9415 9419 -36 -0.38 106 9419 5547 position \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futures_daily ( start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesDaily\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesDaily\" , start_date = \"2020-04-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) Output date futures_id contract_date open max min close spread spread_per volume settlement_price open_interest trading_session 0 2020-04-01 BRF 202005 0 0 0 0 0 0 0 681 381 position 1 2020-04-01 BRF 202005 690 704 681 681 -9 -1.3 45 0 0 after_market 2 2020-04-01 BRF 202006 795 799 774 774 -30 -3.73 63 774 435 position 3 2020-04-01 BRF 202006 818 833 789.5 791 -13 -1.62 77 0 0 after_market 4 2020-04-01 BRF 202007 881 881 874.5 874.5 7 0.81 3 874.5 3 position \u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanOptionDaily \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 16:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_option_daily ( option_id = 'TXO' , start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionDaily\" , \"data_id\" : \"TXO\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionDaily\" , data_id = \"TXO\" , start_date = \"2020-04-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table Output date futures_id contract_date open max min close spread spread_per volume settlement_price open_interest trading_session 0 2020-04-01 BRF 202005 0 0 0 0 0 0 0 681 381 position 1 2020-04-01 BRF 202005 690 704 681 681 -9 -1.3 45 0 0 after_market 2 2020-04-01 BRF 202006 795 799 774 774 -30 -3.73 63 774 435 position 3 2020-04-01 BRF 202006 818 833 789.5 791 -13 -1.62 77 0 0 after_market 4 2020-04-01 BRF 202007 881 881 874.5 874.5 7 0.81 3 874.5 3 position \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_option_daily ( start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionDaily\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionDaily\" , start_date = \"2020-04-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) Output date option_id contract_date strike_price call_put open max min close volume settlement_price open_interest trading_session 0 2020-04-01 CAO 202004 55 put 2.22 2.22 2.22 2.22 5 2.48 15 position 1 2020-04-01 CAO 202004 40 call 0 0 0 0 0 13.7 0 position 2 2020-04-01 CAO 202004 40 put 0 0 0 0 0 0.01 0 position 3 2020-04-01 CAO 202004 41 call 0 0 0 0 0 12.7 0 position 4 2020-04-01 CAO 202004 41 put 0 0 0 0 0 0.01 0 position \u671f\u8ca8\u4ea4\u6613\u660e\u7d30\u8868 TaiwanFuturesTick (\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 \u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 6:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futures_tick ( futures_id = 'MTX' , date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesTick\" , \"data_id\" : \"MTX\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesTick\" , data_id = \"MTX\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output contract_date date futures_id price volume 0 202004 2020-04-01 00:00:01 MTX 9641 2 1 202004 2020-04-01 00:00:01 MTX 9641 2 2 202004 2020-04-01 00:00:01 MTX 9641 6 3 202004 2020-04-01 00:00:02 MTX 9640 2 4 202004 2020-04-01 00:00:02 MTX 9640 2 \u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30\u8868 TaiwanOptionTick (\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 \u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 6:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_option_tick ( option_id = 'OCO' , date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionTick\" , \"data_id\" : \"OCO\" , \"start_date\" : \"2019-09-05\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionTick\" , data_id = \"OCO\" , start_date = \"2019-09-05\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output ExercisePrice PutCall contract_date date option_id price volume 0 20.5 P 202004 2020-04-01 10:26:58 OCO 0.29 1 1 20.5 P 202004 2020-04-01 10:26:58 OCO 0.29 1 2 21 P 202004 2020-04-01 10:26:58 OCO 0.44 2 3 21 P 202004 2020-04-01 10:26:58 OCO 0.44 2 4 21 P 202004 2020-04-01 10:26:58 OCO 0.44 4 \u671f\u8ca8\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3 TaiwanFuturesInstitutionalInvestors \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 18:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futures_institutional_investors ( data_id = 'TX' , start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesInstitutionalInvestors\" , \"data_id\" : \"TX\" , # \"TXO\" \"start_date\" : \"2019-04-03\" , \"end_date\" : \"2019-04-04\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesInstitutionalInvestors\" , data_id = \"TX\" , start_date = \"2019-04-03\" , end_date = \"2019-04-04\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output name date institutional_investors long_deal_volume long_deal_amount short_deal_volume short_deal_amount long_open_interest_balance_volume long_open_interest_balance_amount short_open_interest_balance_volume short_open_interest_balance_amount 0 TX 2020-04-01 \u81ea\u71df\u5546 15050 28875620 15325 29415959 19022 36062632 15962 30209225 1 TX 2020-04-01 \u5916\u8cc7 79042 151832089 75938 145876617 65435 124990394 14318 27292956 2 TX 2020-04-01 \u6295\u4fe1 30 57341 1313 2510881 3770 7204470 37345 71365191 3 TX 2020-04-06 \u81ea\u71df\u5546 15412 29817592 14569 28153648 19528 38087211 15628 30423409 4 TX 2020-04-06 \u6295\u4fe1 1135 2226831 53 102477 3800 7465480 36293 71299930 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futopt_institutional_investors ( start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesInstitutionalInvestors\" , \"start_date\" : \"2019-04-03\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesInstitutionalInvestors\" , start_date = \"2019-04-03 \" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) Output name date institutional_investors long_deal_volume long_deal_amount short_deal_volume short_deal_amount long_open_interest_balance_volume long_open_interest_balance_amount short_open_interest_balance_volume short_open_interest_balance_amount 0 ETF 2020-04-01 \u5916\u8cc7 782 492994 840 541759 4462 3167434 2552 846756 1 ETF 2020-04-01 \u6295\u4fe1 0 0 0 0 2702 1071881 4079 2791150 2 ETF 2020-04-01 \u81ea\u71df\u5546 405 151407 431 161203 4493 2209637 4931 2386376 3 ETO 2020-04-01 \u6295\u4fe1 0 0 0 0 0 0 0 0 4 ETO 2020-04-01 \u5916\u8cc7 0 0 0 0 0 0 0 0 \u9078\u64c7\u6b0a\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3 TaiwanOptionInstitutionalInvestors \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 16:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_option_institutional_investors ( data_id = 'TXO' , start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionInstitutionalInvestors\" , \"data_id\" : \"TXO\" , \"start_date\" : \"2019-04-03\" , \"end_date\" : \"2019-04-04\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionInstitutionalInvestors\" , data_id = \"TX\" , # \"TXO\" start_date = \"2019-04-03\" , end_date = \"2019-04-04\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output name date call_put institutional_investors long_deal_volume long_deal_amount short_deal_volume short_deal_amount long_open_interest_balance_volume long_open_interest_balance_amount short_open_interest_balance_volume short_open_interest_balance_amount 0 TXO 2020-04-01 \u8cb7\u6b0a \u81ea\u71df\u5546 139973 370181 163094 356201 58152 504601 81614 517097 1 TXO 2020-04-01 \u8cb7\u6b0a \u6295\u4fe1 0 0 0 0 0 0 0 0 2 TXO 2020-04-01 \u8cb7\u6b0a \u5916\u8cc7 69409 214529 61586 224112 75953 630438 55645 586723 3 TXO 2020-04-06 \u8cb7\u6b0a \u81ea\u71df\u5546 124528 453602 132575 475720 67677 646018 99186 671818 4 TXO 2020-04-06 \u8ce3\u6b0a \u6295\u4fe1 0 0 0 0 0 0 0 0 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futopt_institutional_investors ( data_id = 'TXO' , start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionInstitutionalInvestors\" , \"start_date\" : \"2019-04-03\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionInstitutionalInvestors\" , start_date = \"2019-04-03 \" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) Output name date institutional_investors long_deal_volume long_deal_amount short_deal_volume short_deal_amount long_open_interest_balance_volume long_open_interest_balance_amount short_open_interest_balance_volume short_open_interest_balance_amount 0 TXO 2020-04-01 \u81ea\u71df\u5546 139973 370181 163094 356201 58152 504601 81614 517097 1 TXO 2020-04-01 \u6295\u4fe1 0 0 0 0 0 0 0 0 2 TXO 2020-04-01 \u5916\u8cc7 69409 214529 61586 224112 75953 630438 55645 586723 3 TXO 2020-04-06 \u81ea\u71df\u5546 124528 453602 132575 475720 67677 646018 99186 671818 4 TXO 2020-04-06 \u6295\u4fe1 0 0 0 0 0 0 0 0 \u671f\u8ca8\u5404\u5377\u5546\u6bcf\u65e5\u4ea4\u6613 TaiwanFuturesDealerTradingVolumeDaily \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 19:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futures_dealer_trading_volume_daily ( futures_id = 'TX' , start_date = '2020-07-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesDealerTradingVolumeDaily\" , \"data_id\" : \"TX\" , \"start_date\" : \"2020-07-01\" , \"end_date\" : \"2020-10-02\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesDealerTradingVolumeDaily\" , data_id = \"TX\" , start_date = \"2020-07-01\" , end_date = \"2020-10-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date dealer_code dealer_name futures_id volume is_after_hour 0 2020-07-01 B224999 \u4e2d\u570b\u4fe1\u8a17\u5546\u696d\u9280\u884c\u81ea\u71df TX 1500 False 1 2020-07-01 F001000 \u570b\u6cf0\u671f\u8ca8 TX 1789 False 2 2020-07-01 F002000 \u6c38\u8c50\u671f\u8ca8 TX 9664 False 3 2020-07-01 F002999 \u6c38\u8c50\u671f\u8ca8\u81ea\u71df TX 0 False 4 2020-07-01 F004000 \u51f1\u57fa\u671f\u8ca8 TX 43882 False \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futures_dealer_trading_volume_daily ( start_date = '2021-07-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesDealerTradingVolumeDaily\" , \"start_date\" : \"2020-07-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) df R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesDealerTradingVolumeDaily\" , start_date = \"2020-07-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) Output date dealer_code dealer_name futures_id volume is_after_hour 0 2021-07-01 F021000 \u5143\u5927\u671f\u8ca8 BRF 0 True 1 2021-07-01 F004000 \u51f1\u57fa\u671f\u8ca8 BRF 0 True 2 2021-07-01 F020000 \u7fa4\u76ca\u671f\u8ca8 BRF 0 True 3 2021-07-01 F002000 \u6c38\u8c50\u671f\u8ca8 BRF 0 True 4 2021-07-01 F008000 \u7d71\u4e00\u671f\u8ca8 BRF 1 True \u9078\u64c7\u6b0a\u5404\u5377\u5546\u6bcf\u65e5\u4ea4\u6613 TaiwanOptionDealerTradingVolumeDaily \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 18:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_option_dealer_trading_volume_daily ( option_id = 'TXO' , start_date = '2020-07-01' ) Pytho-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionDealerTradingVolumeDaily\" , \"data_id\" : \"TXO\" , \"start_date\" : \"2020-07-01\" , \"end_date\" : \"2020-10-02\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) df R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionDealerTradingVolumeDaily\" , data_id = \"TXO\" , start_date = \"2020-07-01\" , end_date = \"2020-10-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date dealer_code dealer_name option_id volume is_after_hour 0 2020-07-01 B224999 \u4e2d\u570b\u4fe1\u8a17\u5546\u696d\u9280\u884c\u81ea\u71df TXO 13390 False 1 2020-07-01 F001000 \u570b\u6cf0\u671f\u8ca8 TXO 17478 False 2 2020-07-01 F002000 \u6c38\u8c50\u671f\u8ca8 TXO 75395 False 3 2020-07-01 F002999 \u6c38\u8c50\u671f\u8ca8\u81ea\u71df TXO 98 False 4 2020-07-01 F004000 \u51f1\u57fa\u671f\u8ca8 TXO 159164 False \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_option_dealer_trading_volume_daily ( start_date = '2021-07-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionDealerTradingVolumeDaily\" , \"start_date\" : \"2021-07-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) df R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionDealerTradingVolumeDaily\" , start_date = \"2021-07-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) Output date dealer_code dealer_name option_id volume is_after_hour 0 2021-07-01 F021000 \u5143\u5927\u671f\u8ca8 ETC 1 False 1 2021-07-01 F034999 \u6fb3\u5e1d\u83ef\u671f\u8ca8\u81ea\u71df ETC 42 False 2 2021-07-01 F004000 \u51f1\u57fa\u671f\u8ca8 ETC 0 False 3 2021-07-01 S890999 \u6cd5\u9280\u5df4\u9ece\u8b49\u5238\u81ea\u71df ETC 83 False 4 2021-07-01 F002000 \u6c38\u8c50\u671f\u8ca8 ETC 0 False","title":"\u884d\u751f\u6027\u91d1\u878d\u5546\u54c1"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanfutoptdailyinfo","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futopt_daily_info () Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFutOptDailyInfo\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFutOptDailyInfo\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) Output code type 0 AAA TaiwanOptionDaily 1 AAB TaiwanOptionDaily 2 AAO TaiwanOptionDaily 3 ABA TaiwanOptionDaily 4 ABO TaiwanOptionDaily","title":"\u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a\u7e3d\u89bd TaiwanFutOptDailyInfo"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanfuturesdaily","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 16:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futures_daily ( futures_id = 'TX' , start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesDaily\" , \"data_id\" : \"TX\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesDaily\" , data_id = \"TX\" , start_date = \"2020-04-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) Output date futures_id contract_date open max min close spread spread_per volume settlement_price open_interest trading_session 0 2020-04-01 TX 202004 9588 9650 9551 9552 -43 -0.45 116273 9555 83725 position 1 2020-04-01 TX 202004 9630 9665 9551 9575 -20 -0.21 73771 0 0 after_market 2 2020-04-01 TX 202005 9523 9580 9484 9486 -43 -0.45 1266 9486 6435 position 3 2020-04-01 TX 202005 9565 9595 9486 9526 -3 -0.03 452 0 0 after_market 4 2020-04-01 TX 202006 9452 9508 9415 9419 -36 -0.38 106 9419 5547 position","title":"\u671f\u8ca8\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanFuturesDaily"},{"location":"tutor/TaiwanMarket/Derivative/#backersponsor","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futures_daily ( start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesDaily\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesDaily\" , start_date = \"2020-04-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) Output date futures_id contract_date open max min close spread spread_per volume settlement_price open_interest trading_session 0 2020-04-01 BRF 202005 0 0 0 0 0 0 0 681 381 position 1 2020-04-01 BRF 202005 690 704 681 681 -9 -1.3 45 0 0 after_market 2 2020-04-01 BRF 202006 795 799 774 774 -30 -3.73 63 774 435 position 3 2020-04-01 BRF 202006 818 833 789.5 791 -13 -1.62 77 0 0 after_market 4 2020-04-01 BRF 202007 881 881 874.5 874.5 7 0.81 3 874.5 3 position","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanoptiondaily","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 16:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_option_daily ( option_id = 'TXO' , start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionDaily\" , \"data_id\" : \"TXO\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionDaily\" , data_id = \"TXO\" , start_date = \"2020-04-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table Output date futures_id contract_date open max min close spread spread_per volume settlement_price open_interest trading_session 0 2020-04-01 BRF 202005 0 0 0 0 0 0 0 681 381 position 1 2020-04-01 BRF 202005 690 704 681 681 -9 -1.3 45 0 0 after_market 2 2020-04-01 BRF 202006 795 799 774 774 -30 -3.73 63 774 435 position 3 2020-04-01 BRF 202006 818 833 789.5 791 -13 -1.62 77 0 0 after_market 4 2020-04-01 BRF 202007 881 881 874.5 874.5 7 0.81 3 874.5 3 position","title":"\u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanOptionDaily"},{"location":"tutor/TaiwanMarket/Derivative/#backersponsor_1","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_option_daily ( start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionDaily\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionDaily\" , start_date = \"2020-04-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) Output date option_id contract_date strike_price call_put open max min close volume settlement_price open_interest trading_session 0 2020-04-01 CAO 202004 55 put 2.22 2.22 2.22 2.22 5 2.48 15 position 1 2020-04-01 CAO 202004 40 call 0 0 0 0 0 13.7 0 position 2 2020-04-01 CAO 202004 40 put 0 0 0 0 0 0.01 0 position 3 2020-04-01 CAO 202004 41 call 0 0 0 0 0 12.7 0 position 4 2020-04-01 CAO 202004 41 put 0 0 0 0 0 0.01 0 position","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanfuturestick-backersponsor","text":"\u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 6:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futures_tick ( futures_id = 'MTX' , date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesTick\" , \"data_id\" : \"MTX\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesTick\" , data_id = \"MTX\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output contract_date date futures_id price volume 0 202004 2020-04-01 00:00:01 MTX 9641 2 1 202004 2020-04-01 00:00:01 MTX 9641 2 2 202004 2020-04-01 00:00:01 MTX 9641 6 3 202004 2020-04-01 00:00:02 MTX 9640 2 4 202004 2020-04-01 00:00:02 MTX 9640 2","title":"\u671f\u8ca8\u4ea4\u6613\u660e\u7d30\u8868 TaiwanFuturesTick (\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanoptiontick-backersponsor","text":"\u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 6:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_option_tick ( option_id = 'OCO' , date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionTick\" , \"data_id\" : \"OCO\" , \"start_date\" : \"2019-09-05\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionTick\" , data_id = \"OCO\" , start_date = \"2019-09-05\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output ExercisePrice PutCall contract_date date option_id price volume 0 20.5 P 202004 2020-04-01 10:26:58 OCO 0.29 1 1 20.5 P 202004 2020-04-01 10:26:58 OCO 0.29 1 2 21 P 202004 2020-04-01 10:26:58 OCO 0.44 2 3 21 P 202004 2020-04-01 10:26:58 OCO 0.44 2 4 21 P 202004 2020-04-01 10:26:58 OCO 0.44 4","title":"\u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30\u8868 TaiwanOptionTick (\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanfuturesinstitutionalinvestors","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 18:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futures_institutional_investors ( data_id = 'TX' , start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesInstitutionalInvestors\" , \"data_id\" : \"TX\" , # \"TXO\" \"start_date\" : \"2019-04-03\" , \"end_date\" : \"2019-04-04\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesInstitutionalInvestors\" , data_id = \"TX\" , start_date = \"2019-04-03\" , end_date = \"2019-04-04\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output name date institutional_investors long_deal_volume long_deal_amount short_deal_volume short_deal_amount long_open_interest_balance_volume long_open_interest_balance_amount short_open_interest_balance_volume short_open_interest_balance_amount 0 TX 2020-04-01 \u81ea\u71df\u5546 15050 28875620 15325 29415959 19022 36062632 15962 30209225 1 TX 2020-04-01 \u5916\u8cc7 79042 151832089 75938 145876617 65435 124990394 14318 27292956 2 TX 2020-04-01 \u6295\u4fe1 30 57341 1313 2510881 3770 7204470 37345 71365191 3 TX 2020-04-06 \u81ea\u71df\u5546 15412 29817592 14569 28153648 19528 38087211 15628 30423409 4 TX 2020-04-06 \u6295\u4fe1 1135 2226831 53 102477 3800 7465480 36293 71299930","title":"\u671f\u8ca8\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3 TaiwanFuturesInstitutionalInvestors"},{"location":"tutor/TaiwanMarket/Derivative/#backersponsor_2","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futopt_institutional_investors ( start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesInstitutionalInvestors\" , \"start_date\" : \"2019-04-03\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesInstitutionalInvestors\" , start_date = \"2019-04-03 \" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) Output name date institutional_investors long_deal_volume long_deal_amount short_deal_volume short_deal_amount long_open_interest_balance_volume long_open_interest_balance_amount short_open_interest_balance_volume short_open_interest_balance_amount 0 ETF 2020-04-01 \u5916\u8cc7 782 492994 840 541759 4462 3167434 2552 846756 1 ETF 2020-04-01 \u6295\u4fe1 0 0 0 0 2702 1071881 4079 2791150 2 ETF 2020-04-01 \u81ea\u71df\u5546 405 151407 431 161203 4493 2209637 4931 2386376 3 ETO 2020-04-01 \u6295\u4fe1 0 0 0 0 0 0 0 0 4 ETO 2020-04-01 \u5916\u8cc7 0 0 0 0 0 0 0 0","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanoptioninstitutionalinvestors","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 16:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_option_institutional_investors ( data_id = 'TXO' , start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionInstitutionalInvestors\" , \"data_id\" : \"TXO\" , \"start_date\" : \"2019-04-03\" , \"end_date\" : \"2019-04-04\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionInstitutionalInvestors\" , data_id = \"TX\" , # \"TXO\" start_date = \"2019-04-03\" , end_date = \"2019-04-04\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output name date call_put institutional_investors long_deal_volume long_deal_amount short_deal_volume short_deal_amount long_open_interest_balance_volume long_open_interest_balance_amount short_open_interest_balance_volume short_open_interest_balance_amount 0 TXO 2020-04-01 \u8cb7\u6b0a \u81ea\u71df\u5546 139973 370181 163094 356201 58152 504601 81614 517097 1 TXO 2020-04-01 \u8cb7\u6b0a \u6295\u4fe1 0 0 0 0 0 0 0 0 2 TXO 2020-04-01 \u8cb7\u6b0a \u5916\u8cc7 69409 214529 61586 224112 75953 630438 55645 586723 3 TXO 2020-04-06 \u8cb7\u6b0a \u81ea\u71df\u5546 124528 453602 132575 475720 67677 646018 99186 671818 4 TXO 2020-04-06 \u8ce3\u6b0a \u6295\u4fe1 0 0 0 0 0 0 0 0","title":"\u9078\u64c7\u6b0a\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3 TaiwanOptionInstitutionalInvestors"},{"location":"tutor/TaiwanMarket/Derivative/#backersponsor_3","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futopt_institutional_investors ( data_id = 'TXO' , start_date = '2020-04-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionInstitutionalInvestors\" , \"start_date\" : \"2019-04-03\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionInstitutionalInvestors\" , start_date = \"2019-04-03 \" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) Output name date institutional_investors long_deal_volume long_deal_amount short_deal_volume short_deal_amount long_open_interest_balance_volume long_open_interest_balance_amount short_open_interest_balance_volume short_open_interest_balance_amount 0 TXO 2020-04-01 \u81ea\u71df\u5546 139973 370181 163094 356201 58152 504601 81614 517097 1 TXO 2020-04-01 \u6295\u4fe1 0 0 0 0 0 0 0 0 2 TXO 2020-04-01 \u5916\u8cc7 69409 214529 61586 224112 75953 630438 55645 586723 3 TXO 2020-04-06 \u81ea\u71df\u5546 124528 453602 132575 475720 67677 646018 99186 671818 4 TXO 2020-04-06 \u6295\u4fe1 0 0 0 0 0 0 0 0","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanfuturesdealertradingvolumedaily","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 19:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futures_dealer_trading_volume_daily ( futures_id = 'TX' , start_date = '2020-07-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesDealerTradingVolumeDaily\" , \"data_id\" : \"TX\" , \"start_date\" : \"2020-07-01\" , \"end_date\" : \"2020-10-02\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesDealerTradingVolumeDaily\" , data_id = \"TX\" , start_date = \"2020-07-01\" , end_date = \"2020-10-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date dealer_code dealer_name futures_id volume is_after_hour 0 2020-07-01 B224999 \u4e2d\u570b\u4fe1\u8a17\u5546\u696d\u9280\u884c\u81ea\u71df TX 1500 False 1 2020-07-01 F001000 \u570b\u6cf0\u671f\u8ca8 TX 1789 False 2 2020-07-01 F002000 \u6c38\u8c50\u671f\u8ca8 TX 9664 False 3 2020-07-01 F002999 \u6c38\u8c50\u671f\u8ca8\u81ea\u71df TX 0 False 4 2020-07-01 F004000 \u51f1\u57fa\u671f\u8ca8 TX 43882 False","title":"\u671f\u8ca8\u5404\u5377\u5546\u6bcf\u65e5\u4ea4\u6613 TaiwanFuturesDealerTradingVolumeDaily"},{"location":"tutor/TaiwanMarket/Derivative/#backersponsor_4","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futures_dealer_trading_volume_daily ( start_date = '2021-07-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesDealerTradingVolumeDaily\" , \"start_date\" : \"2020-07-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) df R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesDealerTradingVolumeDaily\" , start_date = \"2020-07-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) Output date dealer_code dealer_name futures_id volume is_after_hour 0 2021-07-01 F021000 \u5143\u5927\u671f\u8ca8 BRF 0 True 1 2021-07-01 F004000 \u51f1\u57fa\u671f\u8ca8 BRF 0 True 2 2021-07-01 F020000 \u7fa4\u76ca\u671f\u8ca8 BRF 0 True 3 2021-07-01 F002000 \u6c38\u8c50\u671f\u8ca8 BRF 0 True 4 2021-07-01 F008000 \u7d71\u4e00\u671f\u8ca8 BRF 1 True","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanoptiondealertradingvolumedaily","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 18:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_option_dealer_trading_volume_daily ( option_id = 'TXO' , start_date = '2020-07-01' ) Pytho-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionDealerTradingVolumeDaily\" , \"data_id\" : \"TXO\" , \"start_date\" : \"2020-07-01\" , \"end_date\" : \"2020-10-02\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) df R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionDealerTradingVolumeDaily\" , data_id = \"TXO\" , start_date = \"2020-07-01\" , end_date = \"2020-10-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date dealer_code dealer_name option_id volume is_after_hour 0 2020-07-01 B224999 \u4e2d\u570b\u4fe1\u8a17\u5546\u696d\u9280\u884c\u81ea\u71df TXO 13390 False 1 2020-07-01 F001000 \u570b\u6cf0\u671f\u8ca8 TXO 17478 False 2 2020-07-01 F002000 \u6c38\u8c50\u671f\u8ca8 TXO 75395 False 3 2020-07-01 F002999 \u6c38\u8c50\u671f\u8ca8\u81ea\u71df TXO 98 False 4 2020-07-01 F004000 \u51f1\u57fa\u671f\u8ca8 TXO 159164 False","title":"\u9078\u64c7\u6b0a\u5404\u5377\u5546\u6bcf\u65e5\u4ea4\u6613 TaiwanOptionDealerTradingVolumeDaily"},{"location":"tutor/TaiwanMarket/Derivative/#backersponsor_5","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_option_dealer_trading_volume_daily ( start_date = '2021-07-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionDealerTradingVolumeDaily\" , \"start_date\" : \"2021-07-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) df R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionDealerTradingVolumeDaily\" , start_date = \"2021-07-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) Output date dealer_code dealer_name option_id volume is_after_hour 0 2021-07-01 F021000 \u5143\u5927\u671f\u8ca8 ETC 1 False 1 2021-07-01 F034999 \u6fb3\u5e1d\u83ef\u671f\u8ca8\u81ea\u71df ETC 42 False 2 2021-07-01 F004000 \u51f1\u57fa\u671f\u8ca8 ETC 0 False 3 2021-07-01 S890999 \u6cd5\u9280\u5df4\u9ece\u8b49\u5238\u81ea\u71df ETC 83 False 4 2021-07-01 F002000 \u6c38\u8c50\u671f\u8ca8 ETC 0 False","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Fundamental/","text":"\u5728\u53f0\u80a1\u57fa\u672c\u9762\uff0c\u6211\u5011\u64c1\u6709 7 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u7d9c\u5408\u640d\u76ca\u8868 TaiwanStockFinancialStatements \u8cc7\u7522\u8ca0\u50b5\u8868 TaiwanStockBalanceSheet \u73fe\u91d1\u6d41\u91cf\u8868 TaiwanStockCashFlowsStatement \u80a1\u5229\u653f\u7b56\u8868 TaiwanStockDividend \u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868 TaiwanStockDividendResult \u6708\u71df\u6536\u8868 TaiwanStockMonthRevenue \u6e1b\u8cc7\u6062\u5fa9\u8cb7\u8ce3\u53c3\u8003\u50f9\u683c TaiwanStockCapitalReductionReferencePrice \u7d9c\u5408\u640d\u76ca\u8868 TaiwanStockFinancialStatements \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_financial_statement ( stock_id = \"2330\" , start_date = '2019-01-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockFinancialStatements\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockFinancialStatements\" , data_id = \"2330\" , start_date = \"2019-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id type value origin_name 0 2019-03-31 2330 CostOfGoodsSold 1.28352e+11 \u71df\u696d\u6210\u672c 1 2019-03-31 2330 EPS 2.37 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918\uff08\u5143\uff09 2 2019-03-31 2330 EquityAttributableToOwnersOfParent 6.60098e+10 \u7d9c\u5408\u640d\u76ca\u7e3d\u984d\u6b78\u5c6c\u65bc\u6bcd\u516c\u53f8\u696d\u4e3b 3 2019-03-31 2330 GrossProfit 9.03576e+10 \u71df\u696d\u6bdb\u5229\uff08\u6bdb\u640d\uff09\u6de8\u984d 4 2019-03-31 2330 IncomeAfterTaxes 6.13873e+10 \u672c\u671f\u6de8\u5229\uff08\u6de8\u640d\uff09 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_financial_statement ( start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockFinancialStatements\" , \"start_date\" : \"2019-03-31\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockFinancialStatements\" , start_date = \"2019-03-31\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id type value origin_name 0 2019-03-31 000116 EPS 0.24 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918\uff08\u5143\uff09 1 2019-03-31 000116 EquityAttributableToOwnersOfParent 4.65569e+08 \u7d9c\u5408\u640d\u76ca\u7e3d\u984d\u6b78\u5c6c\u65bc\u6bcd\u516c\u53f8\u696d\u4e3b 2 2019-03-31 000116 Expense 8.95498e+08 \u652f\u51fa\u53ca\u8cbb\u7528 3 2019-03-31 000116 Income 1.07791e+09 \u6536\u76ca 4 2019-03-31 000116 IncomeAfterTaxes 2.74322e+08 \u672c\u671f\u6de8\u5229\uff08\u6de8\u640d\uff09 \u8cc7\u7522\u8ca0\u50b5\u8868 TaiwanStockBalanceSheet \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_balance_sheet ( stock_id = \"2330\" , start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockBalanceSheet\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockBalanceSheet\" , data_id = \"2330\" , start_date = \"2019-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id type value origin_name 0 2019-03-31 2330 AccountsPayable 2.71009e+10 \u61c9\u4ed8\u5e33\u6b3e 1 2019-03-31 2330 AccountsPayable_per 1.24 \u61c9\u4ed8\u5e33\u6b3e 2 2019-03-31 2330 AccountsPayableToRelatedParties 5.60941e+08 \u61c9\u4ed8\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba 3 2019-03-31 2330 AccountsPayableToRelatedParties_per 0.03 \u61c9\u4ed8\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba 4 2019-03-31 2330 AccountsReceivableDuefromRelatedPartiesNet 3.09821e+08 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_balance_sheet ( start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockBalanceSheet\" , \"start_date\" : \"2019-03-31\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockBalanceSheet\" , start_date = \"2019-03-31\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id type value origin_name 0 2019-03-31 1101 AccountsPayable 7.84411e+09 \u61c9\u4ed8\u5e33\u6b3e 1 2019-03-31 1101 AccountsPayable_per 2.15 \u61c9\u4ed8\u5e33\u6b3e 2 2019-03-31 1101 AccountsReceivableDuefromRelatedPartiesNet 2.64638e+08 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d 3 2019-03-31 1101 AccountsReceivableDuefromRelatedPartiesNet_per 0.07 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d 4 2019-03-31 1101 AccountsReceivableNet 8.3396e+09 \u61c9\u6536\u5e33\u6b3e\u6de8\u984d \u73fe\u91d1\u6d41\u91cf\u8868 TaiwanStockCashFlowsStatement \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_cash_flows_statement ( stock_id = \"2330\" , start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockCashFlowsStatement\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockCashFlowsStatement\" , data_id = \"2330\" , start_date = \"2019-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id type value origin_name 0 2019-03-31 2330 HedgingFinancialLiabilities -2.27383e+08 \u9664\u5217\u907f\u96aa\u4e4b\u91d1\u878d\u8ca0\u50b5 1 2019-03-31 2330 CashFlowsFromOperatingActivities 1.5267e+11 \u71df\u696d\u6d3b\u52d5\u4e4b\u6de8\u73fe\u91d1\u6d41\u5165\uff08\u6d41\u51fa\uff09 2 2019-03-31 2330 CashProvidedByInvestingActivities -6.41885e+10 \u6295\u8cc7\u6d3b\u52d5\u4e4b\u6de8\u73fe\u91d1\u6d41\u5165(\u6d41\u51fa) 3 2019-03-31 2330 CashBalancesIncrease 6.78559e+10 \u672c\u671f\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u589e\u52a0\uff08\u6e1b\u5c11\uff09\u6578 4 2019-03-31 2330 NetIncomeBeforeTax 6.81817e+10 \u672c\u671f\u7a05\u524d\u6de8\u5229\uff08\u6de8\u640d\uff09 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_cash_flows_statement ( start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockCashFlowsStatement\" , \"start_date\" : \"2019-03-31\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockCashFlowsStatement\" , start_date = \"2019-03-31\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id type value origin_name 0 2019-03-31 1101 DecreaseInShortTermLoans 7.59053e+09 \u77ed\u671f\u501f\u6b3e\u6e1b\u5c11 1 2019-03-31 1101 ReceivableIncrease -1.15069e+08 \u61c9\u6536\u5e33\u6b3e(\u589e\u52a0)\u6e1b\u5c11 2 2019-03-31 1101 PropertyAndPlantAndEquipment -1.48367e+09 \u53d6\u5f97\u4e0d\u52d5\u7522\u3001\u5ee0\u623f\u53ca\u8a2d\u5099 3 2019-03-31 1101 NetIncomeBeforeTax 5.6035e+09 \u672c\u671f\u7a05\u524d\u6de8\u5229\uff08\u6de8\u640d\uff09 4 2019-03-31 1101 CashProvidedByInvestingActivities -4.31058e+09 \u6295\u8cc7\u6d3b\u52d5\u4e4b\u6de8\u73fe\u91d1\u6d41\u5165(\u6d41\u51fa) \u80a1\u5229\u653f\u7b56\u8868 TaiwanStockDividend \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_dividend ( stock_id = \"2330\" , start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDividend\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockStockDividend\" , data_id = \"2330\" , start_date = \"2019-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id year StockEarningsDistribution StockStatutorySurplus StockExDividendTradingDate TotalEmployeeStockDividend TotalEmployeeStockDividendAmount RatioOfEmployeeStockDividendOfTotal RatioOfEmployeeStockDividend CashEarningsDistribution CashStatutorySurplus CashExDividendTradingDate CashDividendPaymentDate TotalEmployeeCashDividend TotalNumberOfCashCapitalIncrease CashIncreaseSubscriptionRate CashIncreaseSubscriptionpRrice RemunerationOfDirectorsAndSupervisors ParticipateDistributionOfTotalShares AnnouncementDate AnnouncementTime 0 2019-06-30 2330 107\u5e74 0 0 0 0 0 0 8 0 2019-06-24 2019-07-18 0 0 0 0 0 2.59304e+10 2019-06-06 15:47:30 1 2019-09-25 2330 108\u5e74\u7b2c1\u5b63 0 0 0 0 0 0 2 0 2019-09-19 2019-10-17 0 0 0 0 0 2.59304e+10 2019-07-09 18:33:02 2 2019-12-25 2330 108\u5e74\u7b2c2\u5b63 0 0 0 0 0 0 2.5 0 2019-12-19 2020-01-16 0 0 0 0 0 2.59304e+10 2019-08-14 15:27:02 3 2020-03-25 2330 108\u5e74\u7b2c3\u5b63 0 0 0 0 0 0 2.5 0 2020-03-19 2020-04-16 0 0 0 0 0 2.59304e+10 2019-11-14 17:01:07 4 2020-06-24 2330 108\u5e74\u7b2c4\u5b63 0 0 0 0 0 0 2.5 0 2020-06-18 2020-07-16 0 0 0 0 0 2.59304e+10 2020-02-14 15:10:50 \u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868 TaiwanStockDividendResult \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_dividend_result ( stock_id = \"2330\" , start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDividendResult\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockDividendResult\" , data_id = \"2330\" , start_date = \"2019-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id before_price after_price stock_and_cache_dividend stock_or_cache_dividend max_price min_price open_price reference_price 0 2019-06-24 2330 248.5 240.5 8 \u606f 264.5 216.5 240.5 240.5 1 2019-09-19 2330 267 265 2 \u606f 291.5 238.5 265 265 2 2019-12-19 2330 344.5 342 2.5 \u606f 376 308 342 342 3 2020-03-19 2330 260 257.5 2.5 \u606f 283 232 257.5 257.5 4 2020-06-18 2330 315 312.5 2.5 \u606f 343.5 281.5 312.5 312.5 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_dividend_result ( start_date = '2019-06-24' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDividendResult\" , \"start_date\" : \"2019-06-24\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockDividendResult\" , start_date = \"2019-06-24\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id before_price after_price stock_and_cache_dividend stock_or_cache_dividend max_price min_price open_price reference_price 0 2019-06-24 00697B 42.48 42.21 0.27 \u9664\u606f 9999.95 0.01 42.21 42.21 1 2019-06-24 00751B 46.05 45.46 0.59 \u9664\u606f 9999.95 0.01 45.46 45.46 2 2019-06-24 1707 220 213.5 6.5 \u606f 234.5 192.5 213.5 213.5 3 2019-06-24 1711 17 16.5 0.5 \u606f 18.15 14.85 16.5 16.5 4 2019-06-24 1906 13.55 13.05 0.5 \u606f 14.35 11.75 13.05 13.05 \u6708\u71df\u6536\u8868 TaiwanStockMonthRevenue \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_month_revenue ( stock_id = \"2330\" , start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMonthRevenue\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMonthRevenue\" , data_id = \"2330\" , start_date = \"2019-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id country revenue revenue_month revenue_year 0 2019-04-01 2330 Taiwan 79721587000 3 2019 1 2019-05-01 2330 Taiwan 74693615000 4 2019 2 2019-06-01 2330 Taiwan 80436931000 5 2019 3 2019-07-01 2330 Taiwan 85867929000 6 2019 4 2019-08-01 2330 Taiwan 84757724000 7 2019 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_month_revenue ( start_date = '2019-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMonthRevenue\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMonthRevenue\" , start_date = \"2019-01-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id country revenue revenue_month revenue_year 0 2019-05-01 1101 Taiwan 10596314000 4 2019 1 2019-05-01 1102 Taiwan 8434811000 4 2019 2 2019-05-01 1103 Taiwan 160751000 4 2019 3 2019-05-01 1104 Taiwan 418992000 4 2019 4 2019-05-01 1108 Taiwan 323834000 4 2019 \u6e1b\u8cc7\u6062\u5fa9\u8cb7\u8ce3\u53c3\u8003\u50f9\u683c TaiwanStockCapitalReductionReferencePrice \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockCapitalReductionReferencePrice\" , \"data_id\" : \"2327\" , \"start_date\" : \"2010-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id ClosingPriceonTheLastTradingDay PostReductionReferencePrice LimitUp LimitDown OpeningReferencePrice ExrightReferencePrice ReasonforCapitalReduction 0 2013 - 09 - 18 2327 10.20 10.28 10.95 9.57 10.3 - 1.0 Cash refund 1 2014 - 10 - 09 2327 22.05 49.82 53.30 46.35 49.8 - 1.0 Cash refund 2 2016 - 08 - 15 2327 54.80 65.96 72.50 59.40 66.0 - 1.0 Cash refund 3 2017 - 08 - 18 2327 120.50 168.13 184.50 151.50 168.0 - 1.0 Cash refund R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockCapitalReductionReferencePrice\" , data_id = \"2327\" , start_date = \"2010-01-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id ClosingPriceonTheLastTradingDay PostReductionReferencePrice LimitUp LimitDown OpeningReferencePrice ExrightReferencePrice ReasonforCapitalReduction 1 2013-09-18 2327 10.20 10.28 10.95 9.57 10.3 -1.0 Cash refund 2 2014-10-09 2327 22.05 49.82 53.30 46.35 49.8 -1.0 Cash refund 3 2016-08-15 2327 54.80 65.96 72.50 59.40 66.0 -1.0 Cash refund 4 2017-08-18 2327 120.50 168.13 184.50 151.50 168.0 -1.0 Cash refund","title":"\u57fa\u672c\u9762"},{"location":"tutor/TaiwanMarket/Fundamental/#taiwanstockfinancialstatements","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_financial_statement ( stock_id = \"2330\" , start_date = '2019-01-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockFinancialStatements\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockFinancialStatements\" , data_id = \"2330\" , start_date = \"2019-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id type value origin_name 0 2019-03-31 2330 CostOfGoodsSold 1.28352e+11 \u71df\u696d\u6210\u672c 1 2019-03-31 2330 EPS 2.37 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918\uff08\u5143\uff09 2 2019-03-31 2330 EquityAttributableToOwnersOfParent 6.60098e+10 \u7d9c\u5408\u640d\u76ca\u7e3d\u984d\u6b78\u5c6c\u65bc\u6bcd\u516c\u53f8\u696d\u4e3b 3 2019-03-31 2330 GrossProfit 9.03576e+10 \u71df\u696d\u6bdb\u5229\uff08\u6bdb\u640d\uff09\u6de8\u984d 4 2019-03-31 2330 IncomeAfterTaxes 6.13873e+10 \u672c\u671f\u6de8\u5229\uff08\u6de8\u640d\uff09","title":"\u7d9c\u5408\u640d\u76ca\u8868 TaiwanStockFinancialStatements"},{"location":"tutor/TaiwanMarket/Fundamental/#backersponsor","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_financial_statement ( start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockFinancialStatements\" , \"start_date\" : \"2019-03-31\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockFinancialStatements\" , start_date = \"2019-03-31\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id type value origin_name 0 2019-03-31 000116 EPS 0.24 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918\uff08\u5143\uff09 1 2019-03-31 000116 EquityAttributableToOwnersOfParent 4.65569e+08 \u7d9c\u5408\u640d\u76ca\u7e3d\u984d\u6b78\u5c6c\u65bc\u6bcd\u516c\u53f8\u696d\u4e3b 2 2019-03-31 000116 Expense 8.95498e+08 \u652f\u51fa\u53ca\u8cbb\u7528 3 2019-03-31 000116 Income 1.07791e+09 \u6536\u76ca 4 2019-03-31 000116 IncomeAfterTaxes 2.74322e+08 \u672c\u671f\u6de8\u5229\uff08\u6de8\u640d\uff09","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Fundamental/#taiwanstockbalancesheet","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_balance_sheet ( stock_id = \"2330\" , start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockBalanceSheet\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockBalanceSheet\" , data_id = \"2330\" , start_date = \"2019-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id type value origin_name 0 2019-03-31 2330 AccountsPayable 2.71009e+10 \u61c9\u4ed8\u5e33\u6b3e 1 2019-03-31 2330 AccountsPayable_per 1.24 \u61c9\u4ed8\u5e33\u6b3e 2 2019-03-31 2330 AccountsPayableToRelatedParties 5.60941e+08 \u61c9\u4ed8\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba 3 2019-03-31 2330 AccountsPayableToRelatedParties_per 0.03 \u61c9\u4ed8\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba 4 2019-03-31 2330 AccountsReceivableDuefromRelatedPartiesNet 3.09821e+08 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d","title":"\u8cc7\u7522\u8ca0\u50b5\u8868 TaiwanStockBalanceSheet"},{"location":"tutor/TaiwanMarket/Fundamental/#backersponsor_1","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_balance_sheet ( start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockBalanceSheet\" , \"start_date\" : \"2019-03-31\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockBalanceSheet\" , start_date = \"2019-03-31\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id type value origin_name 0 2019-03-31 1101 AccountsPayable 7.84411e+09 \u61c9\u4ed8\u5e33\u6b3e 1 2019-03-31 1101 AccountsPayable_per 2.15 \u61c9\u4ed8\u5e33\u6b3e 2 2019-03-31 1101 AccountsReceivableDuefromRelatedPartiesNet 2.64638e+08 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d 3 2019-03-31 1101 AccountsReceivableDuefromRelatedPartiesNet_per 0.07 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d 4 2019-03-31 1101 AccountsReceivableNet 8.3396e+09 \u61c9\u6536\u5e33\u6b3e\u6de8\u984d","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Fundamental/#taiwanstockcashflowsstatement","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_cash_flows_statement ( stock_id = \"2330\" , start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockCashFlowsStatement\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockCashFlowsStatement\" , data_id = \"2330\" , start_date = \"2019-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id type value origin_name 0 2019-03-31 2330 HedgingFinancialLiabilities -2.27383e+08 \u9664\u5217\u907f\u96aa\u4e4b\u91d1\u878d\u8ca0\u50b5 1 2019-03-31 2330 CashFlowsFromOperatingActivities 1.5267e+11 \u71df\u696d\u6d3b\u52d5\u4e4b\u6de8\u73fe\u91d1\u6d41\u5165\uff08\u6d41\u51fa\uff09 2 2019-03-31 2330 CashProvidedByInvestingActivities -6.41885e+10 \u6295\u8cc7\u6d3b\u52d5\u4e4b\u6de8\u73fe\u91d1\u6d41\u5165(\u6d41\u51fa) 3 2019-03-31 2330 CashBalancesIncrease 6.78559e+10 \u672c\u671f\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u589e\u52a0\uff08\u6e1b\u5c11\uff09\u6578 4 2019-03-31 2330 NetIncomeBeforeTax 6.81817e+10 \u672c\u671f\u7a05\u524d\u6de8\u5229\uff08\u6de8\u640d\uff09","title":"\u73fe\u91d1\u6d41\u91cf\u8868 TaiwanStockCashFlowsStatement"},{"location":"tutor/TaiwanMarket/Fundamental/#backersponsor_2","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_cash_flows_statement ( start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockCashFlowsStatement\" , \"start_date\" : \"2019-03-31\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockCashFlowsStatement\" , start_date = \"2019-03-31\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id type value origin_name 0 2019-03-31 1101 DecreaseInShortTermLoans 7.59053e+09 \u77ed\u671f\u501f\u6b3e\u6e1b\u5c11 1 2019-03-31 1101 ReceivableIncrease -1.15069e+08 \u61c9\u6536\u5e33\u6b3e(\u589e\u52a0)\u6e1b\u5c11 2 2019-03-31 1101 PropertyAndPlantAndEquipment -1.48367e+09 \u53d6\u5f97\u4e0d\u52d5\u7522\u3001\u5ee0\u623f\u53ca\u8a2d\u5099 3 2019-03-31 1101 NetIncomeBeforeTax 5.6035e+09 \u672c\u671f\u7a05\u524d\u6de8\u5229\uff08\u6de8\u640d\uff09 4 2019-03-31 1101 CashProvidedByInvestingActivities -4.31058e+09 \u6295\u8cc7\u6d3b\u52d5\u4e4b\u6de8\u73fe\u91d1\u6d41\u5165(\u6d41\u51fa)","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Fundamental/#taiwanstockdividend","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_dividend ( stock_id = \"2330\" , start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDividend\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockStockDividend\" , data_id = \"2330\" , start_date = \"2019-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id year StockEarningsDistribution StockStatutorySurplus StockExDividendTradingDate TotalEmployeeStockDividend TotalEmployeeStockDividendAmount RatioOfEmployeeStockDividendOfTotal RatioOfEmployeeStockDividend CashEarningsDistribution CashStatutorySurplus CashExDividendTradingDate CashDividendPaymentDate TotalEmployeeCashDividend TotalNumberOfCashCapitalIncrease CashIncreaseSubscriptionRate CashIncreaseSubscriptionpRrice RemunerationOfDirectorsAndSupervisors ParticipateDistributionOfTotalShares AnnouncementDate AnnouncementTime 0 2019-06-30 2330 107\u5e74 0 0 0 0 0 0 8 0 2019-06-24 2019-07-18 0 0 0 0 0 2.59304e+10 2019-06-06 15:47:30 1 2019-09-25 2330 108\u5e74\u7b2c1\u5b63 0 0 0 0 0 0 2 0 2019-09-19 2019-10-17 0 0 0 0 0 2.59304e+10 2019-07-09 18:33:02 2 2019-12-25 2330 108\u5e74\u7b2c2\u5b63 0 0 0 0 0 0 2.5 0 2019-12-19 2020-01-16 0 0 0 0 0 2.59304e+10 2019-08-14 15:27:02 3 2020-03-25 2330 108\u5e74\u7b2c3\u5b63 0 0 0 0 0 0 2.5 0 2020-03-19 2020-04-16 0 0 0 0 0 2.59304e+10 2019-11-14 17:01:07 4 2020-06-24 2330 108\u5e74\u7b2c4\u5b63 0 0 0 0 0 0 2.5 0 2020-06-18 2020-07-16 0 0 0 0 0 2.59304e+10 2020-02-14 15:10:50","title":"\u80a1\u5229\u653f\u7b56\u8868 TaiwanStockDividend"},{"location":"tutor/TaiwanMarket/Fundamental/#taiwanstockdividendresult","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_dividend_result ( stock_id = \"2330\" , start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDividendResult\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockDividendResult\" , data_id = \"2330\" , start_date = \"2019-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id before_price after_price stock_and_cache_dividend stock_or_cache_dividend max_price min_price open_price reference_price 0 2019-06-24 2330 248.5 240.5 8 \u606f 264.5 216.5 240.5 240.5 1 2019-09-19 2330 267 265 2 \u606f 291.5 238.5 265 265 2 2019-12-19 2330 344.5 342 2.5 \u606f 376 308 342 342 3 2020-03-19 2330 260 257.5 2.5 \u606f 283 232 257.5 257.5 4 2020-06-18 2330 315 312.5 2.5 \u606f 343.5 281.5 312.5 312.5","title":"\u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868 TaiwanStockDividendResult"},{"location":"tutor/TaiwanMarket/Fundamental/#backersponsor_3","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_dividend_result ( start_date = '2019-06-24' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDividendResult\" , \"start_date\" : \"2019-06-24\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockDividendResult\" , start_date = \"2019-06-24\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id before_price after_price stock_and_cache_dividend stock_or_cache_dividend max_price min_price open_price reference_price 0 2019-06-24 00697B 42.48 42.21 0.27 \u9664\u606f 9999.95 0.01 42.21 42.21 1 2019-06-24 00751B 46.05 45.46 0.59 \u9664\u606f 9999.95 0.01 45.46 45.46 2 2019-06-24 1707 220 213.5 6.5 \u606f 234.5 192.5 213.5 213.5 3 2019-06-24 1711 17 16.5 0.5 \u606f 18.15 14.85 16.5 16.5 4 2019-06-24 1906 13.55 13.05 0.5 \u606f 14.35 11.75 13.05 13.05","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Fundamental/#taiwanstockmonthrevenue","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_month_revenue ( stock_id = \"2330\" , start_date = '2019-03-31' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMonthRevenue\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMonthRevenue\" , data_id = \"2330\" , start_date = \"2019-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id country revenue revenue_month revenue_year 0 2019-04-01 2330 Taiwan 79721587000 3 2019 1 2019-05-01 2330 Taiwan 74693615000 4 2019 2 2019-06-01 2330 Taiwan 80436931000 5 2019 3 2019-07-01 2330 Taiwan 85867929000 6 2019 4 2019-08-01 2330 Taiwan 84757724000 7 2019","title":"\u6708\u71df\u6536\u8868 TaiwanStockMonthRevenue"},{"location":"tutor/TaiwanMarket/Fundamental/#backersponsor_4","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_month_revenue ( start_date = '2019-04-01' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMonthRevenue\" , \"start_date\" : \"2019-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMonthRevenue\" , start_date = \"2019-01-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id country revenue revenue_month revenue_year 0 2019-05-01 1101 Taiwan 10596314000 4 2019 1 2019-05-01 1102 Taiwan 8434811000 4 2019 2 2019-05-01 1103 Taiwan 160751000 4 2019 3 2019-05-01 1104 Taiwan 418992000 4 2019 4 2019-05-01 1108 Taiwan 323834000 4 2019","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Fundamental/#taiwanstockcapitalreductionreferenceprice","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockCapitalReductionReferencePrice\" , \"data_id\" : \"2327\" , \"start_date\" : \"2010-01-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id ClosingPriceonTheLastTradingDay PostReductionReferencePrice LimitUp LimitDown OpeningReferencePrice ExrightReferencePrice ReasonforCapitalReduction 0 2013 - 09 - 18 2327 10.20 10.28 10.95 9.57 10.3 - 1.0 Cash refund 1 2014 - 10 - 09 2327 22.05 49.82 53.30 46.35 49.8 - 1.0 Cash refund 2 2016 - 08 - 15 2327 54.80 65.96 72.50 59.40 66.0 - 1.0 Cash refund 3 2017 - 08 - 18 2327 120.50 168.13 184.50 151.50 168.0 - 1.0 Cash refund R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockCapitalReductionReferencePrice\" , data_id = \"2327\" , start_date = \"2010-01-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id ClosingPriceonTheLastTradingDay PostReductionReferencePrice LimitUp LimitDown OpeningReferencePrice ExrightReferencePrice ReasonforCapitalReduction 1 2013-09-18 2327 10.20 10.28 10.95 9.57 10.3 -1.0 Cash refund 2 2014-10-09 2327 22.05 49.82 53.30 46.35 49.8 -1.0 Cash refund 3 2016-08-15 2327 54.80 65.96 72.50 59.40 66.0 -1.0 Cash refund 4 2017-08-18 2327 120.50 168.13 184.50 151.50 168.0 -1.0 Cash refund","title":"\u6e1b\u8cc7\u6062\u5fa9\u8cb7\u8ce3\u53c3\u8003\u50f9\u683c TaiwanStockCapitalReductionReferencePrice"},{"location":"tutor/TaiwanMarket/Others/","text":"\u5728\u53f0\u7063\u80a1\u7968\u65b0\u805e\u9762\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u76f8\u95dc\u65b0\u805e\u8868 TaiwanStockNews \u76f8\u95dc\u65b0\u805e\u8868 TaiwanStockNews \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockNews\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"end_date\" : \"2020-04-03\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id description link source title 0 2020 - 04 - 01 00 : 00 : 00 2330 & lt ; a href = \"https://tw.news.yahoo.com/ %E 9%9B%B... https://tw.news.yahoo.com/ %E 9%9B%BB %E 5%AD %90% E... Yahoo\u5947\u6469\u65b0\u805e \u96fb\u5b50\u6642\u5831\uff1a\u53f0\u7a4d\u96fb3\u5948\u7c73\u7167\u8d70\uff0c\u4e09\u661f\u885d\u64ca\u5927\uff0c\u860b\u679c\u4e0b\u4fee5\u5948\u7c73\u8a02\u55ae\uff0cNVIDIA\u88dc\u4f4d - Yahoo... 1 2020 - 04 - 01 00 : 57 : 33 2330 & lt ; a href = \"https://udn.com/news/story/6850/44... https://udn.com/news/story/6850/4458587 udn \u806f\u5408\u65b0\u805e\u7db2 \u4e16\u82af\u4e2d\u570b\u4f3a\u670d\u5668\u9700\u6c42\u589e - udn \u806f\u5408\u65b0\u805e\u7db2 2 2020 - 04 - 01 00 : 58 : 42 2330 & lt ; a href = \"https://finance.technews.tw/2020/0... https://finance.technews.tw/2020/04/01/tsmc-wa... \u79d1\u6280\u65b0\u5831 TechNews \u53f0\u7a4d\u96fb\u767c\u5c55\u5de5\u696d\u5ee2\u6c34\u518d\u751f\u6280\u8853\uff0c\u5357\u79d1\u5de5\u7a0b\u660e\u5e74\u555f\u52d5 - \u79d1\u6280\u65b0\u5831 TechNews 3 2020 - 04 - 01 00 : 59 : 38 2330 & lt ; a href = \"https://tw.news.yahoo.com/ %E 5 %8F %B... https://tw.news.yahoo.com/ %E 5 %8F %B0 %E 7%A9%8D %E ... Yahoo\u5947\u6469\u80a1\u5e02 \u53f0\u7a4d\u96fbADR31\u65e5\u4e0b\u8dcc0.03\u7f8e\u5143\u8dcc\u5e450.06%\u6298\u53f0\u80a1289.17\u5143 - Yahoo\u5947\u6469\u80a1\u5e02 4 2020 - 04 - 01 02 : 40 : 00 2330 & lt ; a href = \"https://fnc.ebc.net.tw/FncNews/Con... https://fnc.ebc.net.tw/FncNews/Content/117374 \u6771\u68ee\u8ca1\u7d93\u65b0\u805e \u5916\u8cc7:\u534a\u5c0e\u9ad4\u5eab\u5b58\u9762\u81e8\u4fee\u6b63\u53f0\u7a4d\u96fb\u71df\u6536\u6210\u9577\u3001\u76ee\u6a19\u50f9\u906d\u96d9\u964d\uff5c\u6771\u68ee\u8ca1\u7d93\u65b0\u805e - \u6771\u68ee\u8ca1\u7d93\u65b0\u805e R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockNews\" , data_id = \"2330\" , start_date = \"2020-04-01\" , end_date = '2020-04-03' , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) date stock_id 1 : 2020-04-01 00 : 00 : 00 2330 2 : 2020-04-01 00 : 57 : 33 2330 3 : 2020-04-01 00 : 58 : 42 2330 4 : 2020-04-01 00 : 59 : 38 2330 5 : 2020-04-01 02 : 40 : 00 2330 6 : 2020-04-01 03 : 07 : 57 2330 description 1 : & lt ; a href = \"https://tw.news.yahoo.com/%E9%9B%BB%E5%AD%90%E6%99%82%E5%A0%B1-%E5%8F%B0%E7%A9%8D%E9%9B%BB3%E5%A5%88%E7%B1%B3%E7%85%A7%E8%B5%B0-%E4%B8%89%E6%98%9F%E8%A1%9D%E6%93%8A%E5%A4%A7-%E8%98%8B%E6%9E%9C%E4%B8%8B%E4%BF%AE5%E5%A5%88%E7%B1%B3%E8%A8%82%E5%96%AE-nvidia%E8%A3%9C%E4%BD%8D-000054154.html\" target = \"_blank\" & gt ; \u96fb\u5b50\u6642\u5831\uff1a\u53f0\u7a4d\u96fb 3 \u5948\u7c73\u7167\u8d70\uff0c\u4e09\u661f\u885d\u64ca\u5927\uff0c\u860b\u679c\u4e0b\u4fee 5 \u5948\u7c73\u8a02\u55ae\uff0c NVIDIA\u88dc\u4f4d & lt ; / a & gt ; & amp ; nbsp ; & amp ; nbsp ; & lt ; font color = \"#6f6f6f\" & gt ; Yahoo\u5947\u6469\u65b0\u805e & lt ; / font & gt ; 2 : & lt ; a href = \"https://udn.com/news/story/6850/4458587\" target = \"_blank\" & gt ; \u4e16\u82af\u4e2d\u570b\u4f3a\u670d\u5668\u9700\u6c42\u589e & lt ; / a & gt ; & amp ; nbsp ; & amp ; nbsp ; & lt ; font color = \"#6f6f6f\" & gt ; udn \u806f\u5408\u65b0\u805e\u7db2 & lt ; / font & gt ; 3 : & lt ; a href = \"https://finance.technews.tw/2020/04/01/tsmc-water-recycle/\" target = \"_blank\" & gt ; \u53f0\u7a4d\u96fb\u767c\u5c55\u5de5\u696d\u5ee2\u6c34\u518d\u751f\u6280\u8853\uff0c\u5357\u79d1\u5de5\u7a0b\u660e\u5e74\u555f\u52d5 & lt ; / a & gt ; & amp ; nbsp ; & amp ; nbsp ; & lt ; font color = \"#6f6f6f\" & gt ; \u79d1\u6280\u65b0\u5831 TechNews & lt ; / font & gt ; 4 : & lt ; a href = \"https://tw.news.yahoo.com/%E5%8F%B0%E7%A9%8D%E9%9B%BBadr31%E6%97%A5%E4%B8%8B%E8%B7%8C0-03%E7%BE%8E%E5%85%83%E8%B7%8C%E5%B9%850-06-%E6%8A%98%E5%8F%B0%E8%82%A1289-17%E5%85%83-004919773.html\" target = \"_blank\" & gt ; \u53f0\u7a4d\u96fb ADR31\u65e5\u4e0b\u8dcc0.03\u7f8e\u5143\u8dcc\u5e450.06 %\u6298\u53f0\u80a1289.17\u5143&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;font color=\"#6f6f6f\"&gt;Yahoo\u5947\u6469\u80a1\u5e02&lt;/font&gt; 5: &lt;a href=\"https://fnc.ebc.net.tw/FncNews/Content/117374\" target=\"_blank\"&gt;\u5916\u8cc7:\u534a\u5c0e\u9ad4\u5eab\u5b58\u9762\u81e8\u4fee\u6b63\u53f0\u7a4d\u96fb\u71df\u6536\u6210\u9577\u3001\u76ee\u6a19\u50f9\u906d\u96d9\u964d\uff5c\u6771\u68ee\u8ca1\u7d93\u65b0\u805e&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;font color=\"#6f6f6f\"&gt;\u6771\u68ee\u8ca1\u7d93\u65b0\u805e&lt;/font&gt; 6: &lt;a href=\"https://udn.com/news/story/7253/4460355\" target=\"_blank\"&gt;\u534a\u5c0e\u9ad4\u6050\u9762\u81e8\u5eab\u5b58\u4fee\u6b63 \u5916\u8cc7\u8abf\u964d\u53f0\u7a4d\u96fb\u76ee\u6a19\u50f9&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;font color=\"#6f6f6f\"&gt;udn \u806f\u5408\u65b0\u805e\u7db2&lt;/font&gt; link 1: https://tw.news.yahoo.com/% E9 %9B% BB %E5% AD %90% E6 %99% 82 %E5% A0 %B1-% E5 %8F% B0 %E7% A9 %8D% E9 %9B% BB3 %E5% A5 %88% E7 %B1% B3 %E7% 85 %A7% E8 %B5% B0 -%E4% B8 %89% E6 %98% 9 F %E8% A1 %9D% E6 %93% 8 A %E5% A4 %A7-% E8 %98% 8 B %E6% 9 E %9C% E4 %B8% 8 B %E4% BF %AE5% E5 %A5% 88 %E7% B1 %B3% E8 %A8% 82 %E5% 96 %AE-nvidia% E8 %A3% 9 C %E4% BD %8D-000054154.html 2: https://udn.com/news/story/6850/4458587 3: https://finance.technews.tw/2020/04/01/tsmc-water-recycle/ 4: https://tw.news.yahoo.com/% E5 %8F% B0 %E7% A9 %8D% E9 %9B% BBadr31 %E6% 97 %A5% E4 %B8% 8 B %E8% B7 %8C0-03% E7 %BE% 8 E %E5% 85 %83% E8 %B7% 8 C %E5% B9 %850-06-% E6 %8A% 98 %E5% 8 F %B0% E8 %82% A1289 -17 %E5% 85 %83-004919773.html 5: https://fnc.ebc.net.tw/FncNews/Content/117374 6: https://udn.com/news/story/7253/4460355 source 1: Yahoo\u5947\u6469\u65b0\u805e 2: udn \u806f\u5408\u65b0\u805e\u7db2 3: \u79d1\u6280\u65b0\u5831 TechNews 4: Yahoo\u5947\u6469\u80a1\u5e02 5: \u6771\u68ee\u8ca1\u7d93\u65b0\u805e 6: udn \u806f\u5408\u65b0\u805e\u7db2 title 1: \u96fb\u5b50\u6642\u5831\uff1a\u53f0\u7a4d\u96fb3\u5948\u7c73\u7167\u8d70\uff0c\u4e09\u661f\u885d\u64ca\u5927\uff0c\u860b\u679c\u4e0b\u4fee5\u5948\u7c73\u8a02\u55ae\uff0cNVIDIA\u88dc\u4f4d - Yahoo\u5947\u6469\u65b0\u805e 2: \u4e16\u82af\u4e2d\u570b\u4f3a\u670d\u5668\u9700\u6c42\u589e - udn \u806f\u5408\u65b0\u805e\u7db2 3: \u53f0\u7a4d\u96fb\u767c\u5c55\u5de5\u696d\u5ee2\u6c34\u518d\u751f\u6280\u8853\uff0c\u5357\u79d1\u5de5\u7a0b\u660e\u5e74\u555f\u52d5 - \u79d1\u6280\u65b0\u5831 TechNews 4: \u53f0\u7a4d\u96fbADR31\u65e5\u4e0b\u8dcc0.03\u7f8e\u5143\u8dcc\u5e450.06% \u6298\u53f0\u80a1 289.17 \u5143 - Yahoo\u5947\u6469\u80a1\u5e02 5 : \u5916\u8cc7 : \u534a\u5c0e\u9ad4\u5eab\u5b58\u9762\u81e8\u4fee\u6b63\u53f0\u7a4d\u96fb\u71df\u6536\u6210\u9577\u3001\u76ee\u6a19\u50f9\u906d\u96d9\u964d\uff5c\u6771\u68ee\u8ca1\u7d93\u65b0\u805e - \u6771\u68ee\u8ca1\u7d93\u65b0\u805e 6 : \u534a\u5c0e\u9ad4\u6050\u9762\u81e8\u5eab\u5b58\u4fee\u6b63 \u5916\u8cc7\u8abf\u964d\u53f0\u7a4d\u96fb\u76ee\u6a19\u50f9 - udn \u806f\u5408\u65b0\u805e\u7db2","title":"\u5176\u4ed6"},{"location":"tutor/TaiwanMarket/Others/#taiwanstocknews","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockNews\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"end_date\" : \"2020-04-03\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id description link source title 0 2020 - 04 - 01 00 : 00 : 00 2330 & lt ; a href = \"https://tw.news.yahoo.com/ %E 9%9B%B... https://tw.news.yahoo.com/ %E 9%9B%BB %E 5%AD %90% E... Yahoo\u5947\u6469\u65b0\u805e \u96fb\u5b50\u6642\u5831\uff1a\u53f0\u7a4d\u96fb3\u5948\u7c73\u7167\u8d70\uff0c\u4e09\u661f\u885d\u64ca\u5927\uff0c\u860b\u679c\u4e0b\u4fee5\u5948\u7c73\u8a02\u55ae\uff0cNVIDIA\u88dc\u4f4d - Yahoo... 1 2020 - 04 - 01 00 : 57 : 33 2330 & lt ; a href = \"https://udn.com/news/story/6850/44... https://udn.com/news/story/6850/4458587 udn \u806f\u5408\u65b0\u805e\u7db2 \u4e16\u82af\u4e2d\u570b\u4f3a\u670d\u5668\u9700\u6c42\u589e - udn \u806f\u5408\u65b0\u805e\u7db2 2 2020 - 04 - 01 00 : 58 : 42 2330 & lt ; a href = \"https://finance.technews.tw/2020/0... https://finance.technews.tw/2020/04/01/tsmc-wa... \u79d1\u6280\u65b0\u5831 TechNews \u53f0\u7a4d\u96fb\u767c\u5c55\u5de5\u696d\u5ee2\u6c34\u518d\u751f\u6280\u8853\uff0c\u5357\u79d1\u5de5\u7a0b\u660e\u5e74\u555f\u52d5 - \u79d1\u6280\u65b0\u5831 TechNews 3 2020 - 04 - 01 00 : 59 : 38 2330 & lt ; a href = \"https://tw.news.yahoo.com/ %E 5 %8F %B... https://tw.news.yahoo.com/ %E 5 %8F %B0 %E 7%A9%8D %E ... Yahoo\u5947\u6469\u80a1\u5e02 \u53f0\u7a4d\u96fbADR31\u65e5\u4e0b\u8dcc0.03\u7f8e\u5143\u8dcc\u5e450.06%\u6298\u53f0\u80a1289.17\u5143 - Yahoo\u5947\u6469\u80a1\u5e02 4 2020 - 04 - 01 02 : 40 : 00 2330 & lt ; a href = \"https://fnc.ebc.net.tw/FncNews/Con... https://fnc.ebc.net.tw/FncNews/Content/117374 \u6771\u68ee\u8ca1\u7d93\u65b0\u805e \u5916\u8cc7:\u534a\u5c0e\u9ad4\u5eab\u5b58\u9762\u81e8\u4fee\u6b63\u53f0\u7a4d\u96fb\u71df\u6536\u6210\u9577\u3001\u76ee\u6a19\u50f9\u906d\u96d9\u964d\uff5c\u6771\u68ee\u8ca1\u7d93\u65b0\u805e - \u6771\u68ee\u8ca1\u7d93\u65b0\u805e R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockNews\" , data_id = \"2330\" , start_date = \"2020-04-01\" , end_date = '2020-04-03' , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) date stock_id 1 : 2020-04-01 00 : 00 : 00 2330 2 : 2020-04-01 00 : 57 : 33 2330 3 : 2020-04-01 00 : 58 : 42 2330 4 : 2020-04-01 00 : 59 : 38 2330 5 : 2020-04-01 02 : 40 : 00 2330 6 : 2020-04-01 03 : 07 : 57 2330 description 1 : & lt ; a href = \"https://tw.news.yahoo.com/%E9%9B%BB%E5%AD%90%E6%99%82%E5%A0%B1-%E5%8F%B0%E7%A9%8D%E9%9B%BB3%E5%A5%88%E7%B1%B3%E7%85%A7%E8%B5%B0-%E4%B8%89%E6%98%9F%E8%A1%9D%E6%93%8A%E5%A4%A7-%E8%98%8B%E6%9E%9C%E4%B8%8B%E4%BF%AE5%E5%A5%88%E7%B1%B3%E8%A8%82%E5%96%AE-nvidia%E8%A3%9C%E4%BD%8D-000054154.html\" target = \"_blank\" & gt ; \u96fb\u5b50\u6642\u5831\uff1a\u53f0\u7a4d\u96fb 3 \u5948\u7c73\u7167\u8d70\uff0c\u4e09\u661f\u885d\u64ca\u5927\uff0c\u860b\u679c\u4e0b\u4fee 5 \u5948\u7c73\u8a02\u55ae\uff0c NVIDIA\u88dc\u4f4d & lt ; / a & gt ; & amp ; nbsp ; & amp ; nbsp ; & lt ; font color = \"#6f6f6f\" & gt ; Yahoo\u5947\u6469\u65b0\u805e & lt ; / font & gt ; 2 : & lt ; a href = \"https://udn.com/news/story/6850/4458587\" target = \"_blank\" & gt ; \u4e16\u82af\u4e2d\u570b\u4f3a\u670d\u5668\u9700\u6c42\u589e & lt ; / a & gt ; & amp ; nbsp ; & amp ; nbsp ; & lt ; font color = \"#6f6f6f\" & gt ; udn \u806f\u5408\u65b0\u805e\u7db2 & lt ; / font & gt ; 3 : & lt ; a href = \"https://finance.technews.tw/2020/04/01/tsmc-water-recycle/\" target = \"_blank\" & gt ; \u53f0\u7a4d\u96fb\u767c\u5c55\u5de5\u696d\u5ee2\u6c34\u518d\u751f\u6280\u8853\uff0c\u5357\u79d1\u5de5\u7a0b\u660e\u5e74\u555f\u52d5 & lt ; / a & gt ; & amp ; nbsp ; & amp ; nbsp ; & lt ; font color = \"#6f6f6f\" & gt ; \u79d1\u6280\u65b0\u5831 TechNews & lt ; / font & gt ; 4 : & lt ; a href = \"https://tw.news.yahoo.com/%E5%8F%B0%E7%A9%8D%E9%9B%BBadr31%E6%97%A5%E4%B8%8B%E8%B7%8C0-03%E7%BE%8E%E5%85%83%E8%B7%8C%E5%B9%850-06-%E6%8A%98%E5%8F%B0%E8%82%A1289-17%E5%85%83-004919773.html\" target = \"_blank\" & gt ; \u53f0\u7a4d\u96fb ADR31\u65e5\u4e0b\u8dcc0.03\u7f8e\u5143\u8dcc\u5e450.06 %\u6298\u53f0\u80a1289.17\u5143&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;font color=\"#6f6f6f\"&gt;Yahoo\u5947\u6469\u80a1\u5e02&lt;/font&gt; 5: &lt;a href=\"https://fnc.ebc.net.tw/FncNews/Content/117374\" target=\"_blank\"&gt;\u5916\u8cc7:\u534a\u5c0e\u9ad4\u5eab\u5b58\u9762\u81e8\u4fee\u6b63\u53f0\u7a4d\u96fb\u71df\u6536\u6210\u9577\u3001\u76ee\u6a19\u50f9\u906d\u96d9\u964d\uff5c\u6771\u68ee\u8ca1\u7d93\u65b0\u805e&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;font color=\"#6f6f6f\"&gt;\u6771\u68ee\u8ca1\u7d93\u65b0\u805e&lt;/font&gt; 6: &lt;a href=\"https://udn.com/news/story/7253/4460355\" target=\"_blank\"&gt;\u534a\u5c0e\u9ad4\u6050\u9762\u81e8\u5eab\u5b58\u4fee\u6b63 \u5916\u8cc7\u8abf\u964d\u53f0\u7a4d\u96fb\u76ee\u6a19\u50f9&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;font color=\"#6f6f6f\"&gt;udn \u806f\u5408\u65b0\u805e\u7db2&lt;/font&gt; link 1: https://tw.news.yahoo.com/% E9 %9B% BB %E5% AD %90% E6 %99% 82 %E5% A0 %B1-% E5 %8F% B0 %E7% A9 %8D% E9 %9B% BB3 %E5% A5 %88% E7 %B1% B3 %E7% 85 %A7% E8 %B5% B0 -%E4% B8 %89% E6 %98% 9 F %E8% A1 %9D% E6 %93% 8 A %E5% A4 %A7-% E8 %98% 8 B %E6% 9 E %9C% E4 %B8% 8 B %E4% BF %AE5% E5 %A5% 88 %E7% B1 %B3% E8 %A8% 82 %E5% 96 %AE-nvidia% E8 %A3% 9 C %E4% BD %8D-000054154.html 2: https://udn.com/news/story/6850/4458587 3: https://finance.technews.tw/2020/04/01/tsmc-water-recycle/ 4: https://tw.news.yahoo.com/% E5 %8F% B0 %E7% A9 %8D% E9 %9B% BBadr31 %E6% 97 %A5% E4 %B8% 8 B %E8% B7 %8C0-03% E7 %BE% 8 E %E5% 85 %83% E8 %B7% 8 C %E5% B9 %850-06-% E6 %8A% 98 %E5% 8 F %B0% E8 %82% A1289 -17 %E5% 85 %83-004919773.html 5: https://fnc.ebc.net.tw/FncNews/Content/117374 6: https://udn.com/news/story/7253/4460355 source 1: Yahoo\u5947\u6469\u65b0\u805e 2: udn \u806f\u5408\u65b0\u805e\u7db2 3: \u79d1\u6280\u65b0\u5831 TechNews 4: Yahoo\u5947\u6469\u80a1\u5e02 5: \u6771\u68ee\u8ca1\u7d93\u65b0\u805e 6: udn \u806f\u5408\u65b0\u805e\u7db2 title 1: \u96fb\u5b50\u6642\u5831\uff1a\u53f0\u7a4d\u96fb3\u5948\u7c73\u7167\u8d70\uff0c\u4e09\u661f\u885d\u64ca\u5927\uff0c\u860b\u679c\u4e0b\u4fee5\u5948\u7c73\u8a02\u55ae\uff0cNVIDIA\u88dc\u4f4d - Yahoo\u5947\u6469\u65b0\u805e 2: \u4e16\u82af\u4e2d\u570b\u4f3a\u670d\u5668\u9700\u6c42\u589e - udn \u806f\u5408\u65b0\u805e\u7db2 3: \u53f0\u7a4d\u96fb\u767c\u5c55\u5de5\u696d\u5ee2\u6c34\u518d\u751f\u6280\u8853\uff0c\u5357\u79d1\u5de5\u7a0b\u660e\u5e74\u555f\u52d5 - \u79d1\u6280\u65b0\u5831 TechNews 4: \u53f0\u7a4d\u96fbADR31\u65e5\u4e0b\u8dcc0.03\u7f8e\u5143\u8dcc\u5e450.06% \u6298\u53f0\u80a1 289.17 \u5143 - Yahoo\u5947\u6469\u80a1\u5e02 5 : \u5916\u8cc7 : \u534a\u5c0e\u9ad4\u5eab\u5b58\u9762\u81e8\u4fee\u6b63\u53f0\u7a4d\u96fb\u71df\u6536\u6210\u9577\u3001\u76ee\u6a19\u50f9\u906d\u96d9\u964d\uff5c\u6771\u68ee\u8ca1\u7d93\u65b0\u805e - \u6771\u68ee\u8ca1\u7d93\u65b0\u805e 6 : \u534a\u5c0e\u9ad4\u6050\u9762\u81e8\u5eab\u5b58\u4fee\u6b63 \u5916\u8cc7\u8abf\u964d\u53f0\u7a4d\u96fb\u76ee\u6a19\u50f9 - udn \u806f\u5408\u65b0\u805e\u7db2","title":"\u76f8\u95dc\u65b0\u805e\u8868 TaiwanStockNews"},{"location":"tutor/TaiwanMarket/RealTime/","text":"\u5728\u53f0\u80a1\u5373\u6642\u8cc7\u6599\uff0c\u6211\u5011\u64c1\u6709 4 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u53f0\u80a1\u5373\u6642\u8cc7\u8a0a taiwan_stock_tick_snapshot \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9\u7e3d\u89bd TaiwanFutOptTickInfo \u53f0\u80a1\u671f\u8ca8\u5373\u6642\u8cc7\u8a0a taiwan_futures_snapshot \u53f0\u80a1\u9078\u64c7\u6b0a\u5373\u6642\u8cc7\u8a0a taiwan_options_snapshot \u53f0\u80a1\u5373\u6642\u8cc7\u8a0a taiwan_stock_tick_snapshot (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 (\u7d04 5 \u79d2\u66f4\u65b0\u4e00\u6b21) Example Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/taiwan_stock_tick_snapshot\" parameter = { \"data_id\" : \"2330\" , # \"data_id\": [\"2330\", \"2317\"], # \u4e00\u6b21\u62ff\u591a\u500b # \"data_id\": \"\", # \u4e00\u6b21\u5168\u90e8 \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = \"https://api.finmindtrade.com/api/v4/taiwan_stock_tick_snapshot\" response = httr :: GET ( url = url , query = list ( data_id = \"2330\" , # data_id=c(\"2330\", \"2317\"), # \u4e00\u6b21\u62ff\u591a\u500b # data_id=\"\", # \u4e00\u6b21\u5168\u90e8 token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output amount average_price buy_price buy_volume change_price change_rate close high low open sell_price sell_volume total_amount total_volume volume volume_ratio yesterday_volume date stock_id TickType 0 610000 611.42 609 208 3 0.49 610 614 608 614 610 821 5578566000 9124 1 0.49 18606 2021-12-08 10:31:23.098000 2330 1 \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9\u7e3d\u89bd TaiwanFutOptTickInfo \u00b6 \u76ee\u524d\u652f\u63f4\uff0c\u53f0\u6307\u671f\u3001\u53f0\u6307\u9078\u64c7\u6b0a\uff0c\u5373\u6642\u5831\u50f9 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futopt_tick_info () Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFutOptTickInfo\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFutOptTickInfo\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) Output code callput date name listing_date expire_price update_date 0 CAO00675R3 \u8ce3\u6b0a 2023/06 \u5357\u4e9e\u80a1\u7968\u9078\u64c7\u6b0a 2023-04-20 67.5 2023-06-05 1 CAO00850R3 \u8ce3\u6b0a 2023/06 \u5357\u4e9e\u80a1\u7968\u9078\u64c7\u6b0a 2023-01-31 85 2023-06-05 2 CBO00360R3 \u8ce3\u6b0a 2023/06 \u4e2d\u92fc\u80a1\u7968\u9078\u64c7\u6b0a 2023-01-31 36 2023-06-05 3 CCO00430R3 \u8ce3\u6b0a 2023/06 \u806f\u96fb\u80a1\u7968\u9078\u64c7\u6b0a 2023-04-20 43 2023-06-05 4 CCO00440R3 \u8ce3\u6b0a 2023/06 \u806f\u96fb\u80a1\u7968\u9078\u64c7\u6b0a 2023-01-31 44 2023-06-05 \u53f0\u80a1\u671f\u8ca8\u5373\u6642\u8cc7\u8a0a taiwan_futures_snapshot (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 (\u76ee\u524d\u652f\u63f4\u53f0\u6307\u671f\u3001\u7d04 10 \u79d2\u66f4\u65b0\u4e00\u6b21) Example Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/taiwan_futures_snapshot\" parameter = { \"data_id\" : \"TXF\" , # \u76ee\u524d\u53ea\u652f\u63f4\u53f0\u6307\u671f \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = \"https://api.finmindtrade.com/api/v4/taiwan_futures_snapshot\" response = httr :: GET ( url = url , query = list ( data_id = \"TXF\" , # \u76ee\u524d\u53ea\u652f\u63f4\u53f0\u6307\u671f token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output open high low close change_price change_rate average_price volume total_volume amount total_amount yesterday_volume buy_price buy_volume sell_price sell_volume volume_ratio date futures_id TickType 0 16720 16800 16714 16762 51 0.31 16757.2 1 52822 16762 885151394 46576 16760 61 16765 8 1.13 2023-06-03 04:59:59.243 TXFR1 2 1 16720 16800 16714 16762 51 0.31 16757.2 1 52822 16762 885151394 46576 16760 61 16765 8 1.13 2023-06-03 04:59:59.243 TXFF3 2 2 16290 16291 16290 16291 68 0.42 16290.5 1 2 16291 32581 3 16266 2 16500 2 0.67 2023-06-02 23:01:10.244 TXFC4 1 3 16409 16468 16400 16449 64 0.39 16431.9 1 110 16449 1807505 90 16424 1 16450 1 1.22 2023-06-03 03:00:34.248 TXFH3 1 4 16300 16373 16300 16335 56 0.34 16340.8 1 10 16335 163408 8 16315 1 16355 1 1.25 2023-06-03 03:36:00.561 TXFL3 1 \u53f0\u80a1\u9078\u64c7\u6b0a\u5373\u6642\u8cc7\u8a0a taiwan_options_snapshot (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 (\u76ee\u524d\u652f\u63f4\u53f0\u6307\u9078\u64c7\u6b0a\u3001\u7d04 10 \u79d2\u66f4\u65b0\u4e00\u6b21) Example Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/taiwan_options_snapshot\" parameter = { \"data_id\" : \"TXO\" , # \u76ee\u524d\u53ea\u652f\u63f4\u53f0\u6307\u9078\u64c7\u6b0a \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = \"https://api.finmindtrade.com/api/v4/taiwan_options_snapshot\" response = httr :: GET ( url = url , query = list ( data_id = \"TXO\" , # \u76ee\u524d\u53ea\u652f\u63f4\u53f0\u6307\u671f token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output open high low close change_price change_rate average_price volume total_volume amount total_amount yesterday_volume buy_price buy_volume sell_price sell_volume volume_ratio date options_id TickType 0 46 46 45.5 46 -12 -20.69 45.75 17 40 782 1830 2 0.6 5 0 0 20 2023-06-02 13:07:35.299 TXO14300T3 1 1 60 65 46.5 46.5 -17.5 -27.34 58.76 1 939 46 55172 936 48.5 2 65 3 1 2023-06-03 02:07:52.807 TXO15400S3 2 2 905 910 875 875 -45 -4.89 891.25 1 4 875 3565 2 1.1 6 0 0 2 2023-06-02 20:06:14.720 TXO17000U3 2 3 695 695 695 695 25 3.73 695 1 1 695 695 13 6.3 1 1030 2 0.08 2023-06-02 15:29:16.150 TXO16400L3 1 4 0 0 0 0 0 0 0 0 0 0 0 0 1.1 3 0 0 0 2023-06-04 08:30:00.000 TXO15000H3 0","title":"\u5373\u6642\u8cc7\u6599"},{"location":"tutor/TaiwanMarket/RealTime/#taiwan_stock_tick_snapshot-sponsor","text":"(\u7d04 5 \u79d2\u66f4\u65b0\u4e00\u6b21) Example Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/taiwan_stock_tick_snapshot\" parameter = { \"data_id\" : \"2330\" , # \"data_id\": [\"2330\", \"2317\"], # \u4e00\u6b21\u62ff\u591a\u500b # \"data_id\": \"\", # \u4e00\u6b21\u5168\u90e8 \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = \"https://api.finmindtrade.com/api/v4/taiwan_stock_tick_snapshot\" response = httr :: GET ( url = url , query = list ( data_id = \"2330\" , # data_id=c(\"2330\", \"2317\"), # \u4e00\u6b21\u62ff\u591a\u500b # data_id=\"\", # \u4e00\u6b21\u5168\u90e8 token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output amount average_price buy_price buy_volume change_price change_rate close high low open sell_price sell_volume total_amount total_volume volume volume_ratio yesterday_volume date stock_id TickType 0 610000 611.42 609 208 3 0.49 610 614 608 614 610 821 5578566000 9124 1 0.49 18606 2021-12-08 10:31:23.098000 2330 1","title":"\u53f0\u80a1\u5373\u6642\u8cc7\u8a0a taiwan_stock_tick_snapshot (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/RealTime/#taiwanfutopttickinfo","text":"\u76ee\u524d\u652f\u63f4\uff0c\u53f0\u6307\u671f\u3001\u53f0\u6307\u9078\u64c7\u6b0a\uff0c\u5373\u6642\u5831\u50f9 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_futopt_tick_info () Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFutOptTickInfo\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFutOptTickInfo\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) Output code callput date name listing_date expire_price update_date 0 CAO00675R3 \u8ce3\u6b0a 2023/06 \u5357\u4e9e\u80a1\u7968\u9078\u64c7\u6b0a 2023-04-20 67.5 2023-06-05 1 CAO00850R3 \u8ce3\u6b0a 2023/06 \u5357\u4e9e\u80a1\u7968\u9078\u64c7\u6b0a 2023-01-31 85 2023-06-05 2 CBO00360R3 \u8ce3\u6b0a 2023/06 \u4e2d\u92fc\u80a1\u7968\u9078\u64c7\u6b0a 2023-01-31 36 2023-06-05 3 CCO00430R3 \u8ce3\u6b0a 2023/06 \u806f\u96fb\u80a1\u7968\u9078\u64c7\u6b0a 2023-04-20 43 2023-06-05 4 CCO00440R3 \u8ce3\u6b0a 2023/06 \u806f\u96fb\u80a1\u7968\u9078\u64c7\u6b0a 2023-01-31 44 2023-06-05","title":"\u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9\u7e3d\u89bd TaiwanFutOptTickInfo"},{"location":"tutor/TaiwanMarket/RealTime/#taiwan_futures_snapshot-sponsor","text":"(\u76ee\u524d\u652f\u63f4\u53f0\u6307\u671f\u3001\u7d04 10 \u79d2\u66f4\u65b0\u4e00\u6b21) Example Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/taiwan_futures_snapshot\" parameter = { \"data_id\" : \"TXF\" , # \u76ee\u524d\u53ea\u652f\u63f4\u53f0\u6307\u671f \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = \"https://api.finmindtrade.com/api/v4/taiwan_futures_snapshot\" response = httr :: GET ( url = url , query = list ( data_id = \"TXF\" , # \u76ee\u524d\u53ea\u652f\u63f4\u53f0\u6307\u671f token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output open high low close change_price change_rate average_price volume total_volume amount total_amount yesterday_volume buy_price buy_volume sell_price sell_volume volume_ratio date futures_id TickType 0 16720 16800 16714 16762 51 0.31 16757.2 1 52822 16762 885151394 46576 16760 61 16765 8 1.13 2023-06-03 04:59:59.243 TXFR1 2 1 16720 16800 16714 16762 51 0.31 16757.2 1 52822 16762 885151394 46576 16760 61 16765 8 1.13 2023-06-03 04:59:59.243 TXFF3 2 2 16290 16291 16290 16291 68 0.42 16290.5 1 2 16291 32581 3 16266 2 16500 2 0.67 2023-06-02 23:01:10.244 TXFC4 1 3 16409 16468 16400 16449 64 0.39 16431.9 1 110 16449 1807505 90 16424 1 16450 1 1.22 2023-06-03 03:00:34.248 TXFH3 1 4 16300 16373 16300 16335 56 0.34 16340.8 1 10 16335 163408 8 16315 1 16355 1 1.25 2023-06-03 03:36:00.561 TXFL3 1","title":"\u53f0\u80a1\u671f\u8ca8\u5373\u6642\u8cc7\u8a0a taiwan_futures_snapshot (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/RealTime/#taiwan_options_snapshot-sponsor","text":"(\u76ee\u524d\u652f\u63f4\u53f0\u6307\u9078\u64c7\u6b0a\u3001\u7d04 10 \u79d2\u66f4\u65b0\u4e00\u6b21) Example Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/taiwan_options_snapshot\" parameter = { \"data_id\" : \"TXO\" , # \u76ee\u524d\u53ea\u652f\u63f4\u53f0\u6307\u9078\u64c7\u6b0a \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () df = pd . DataFrame ( data [ \"data\" ]) print ( df . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = \"https://api.finmindtrade.com/api/v4/taiwan_options_snapshot\" response = httr :: GET ( url = url , query = list ( data_id = \"TXO\" , # \u76ee\u524d\u53ea\u652f\u63f4\u53f0\u6307\u671f token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output open high low close change_price change_rate average_price volume total_volume amount total_amount yesterday_volume buy_price buy_volume sell_price sell_volume volume_ratio date options_id TickType 0 46 46 45.5 46 -12 -20.69 45.75 17 40 782 1830 2 0.6 5 0 0 20 2023-06-02 13:07:35.299 TXO14300T3 1 1 60 65 46.5 46.5 -17.5 -27.34 58.76 1 939 46 55172 936 48.5 2 65 3 1 2023-06-03 02:07:52.807 TXO15400S3 2 2 905 910 875 875 -45 -4.89 891.25 1 4 875 3565 2 1.1 6 0 0 2 2023-06-02 20:06:14.720 TXO17000U3 2 3 695 695 695 695 25 3.73 695 1 1 695 695 13 6.3 1 1030 2 0.08 2023-06-02 15:29:16.150 TXO16400L3 1 4 0 0 0 0 0 0 0 0 0 0 0 0 1.1 3 0 0 0 2023-06-04 08:30:00.000 TXO15000H3 0","title":"\u53f0\u80a1\u9078\u64c7\u6b0a\u5373\u6642\u8cc7\u8a0a taiwan_options_snapshot (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Technical/","text":"\u5728\u53f0\u80a1\u6280\u8853\u9762\uff0c\u6211\u5011\u64c1\u6709 9 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u53f0\u80a1\u7e3d\u89bd TaiwanStockInfo \u53f0\u7063\u80a1\u50f9\u8cc7\u6599\u8868 TaiwanStockPrice \u53f0\u7063\u9084\u539f\u80a1\u50f9\u8cc7\u6599\u8868 TaiwanStockPriceAdj \u53f0\u7063\u80a1\u50f9\u6b77\u53f2\u9010\u7b46\u8cc7\u6599\u8868 TaiwanStockPriceTick \u53f0\u7063\u500b\u80a1PER\u3001PBR\u8cc7\u6599\u8868 TaiwanStockPER \u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 TaiwanStockStatisticsOfOrderBookAndTrade \u53f0\u80a1\u52a0\u6b0a\u6307\u6578 TaiwanVariousIndicators5Seconds \u7576\u65e5\u6c96\u92b7\u4ea4\u6613\u6a19\u7684\u53ca\u6210\u4ea4\u91cf\u503c TaiwanStockDayTrading \u52a0\u6b0a\u3001\u6ac3\u8cb7\u5831\u916c\u6307\u6578 TaiwanStockTotalReturnIndex \u6839\u64da\u4e0a\u8ff0\u8cc7\u6599\u8868\u9010\u4e00\u8aaa\u660e\u600e\u9ebc\u4f7f\u7528\uff0c\u53e6\u5916\u5177\u9ad4\u8cc7\u6599\u8868 schemas \u8acb\u53c3\u8003 finmindapi \u53f0\u80a1\u7e3d\u89bd TaiwanStockInfo \u00b6 \u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u53f0\u7063\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u6bcf\u5929 1:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_info () Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockInfo\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockInfo\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output industry_category stock_id stock_name type date 0 ETF 0050 \u5143\u5927\u53f0\u706350 twse 2021-10-05 1 ETF 0051 \u5143\u5927\u4e2d\u578b100 twse 2021-10-05 2 ETF 0052 \u5bcc\u90a6\u79d1\u6280 twse 2021-10-05 3 ETF 0053 \u5143\u5927\u96fb\u5b50 twse 2021-10-05 4 ETF 0054 \u5143\u5927\u53f0\u554650 twse 2021-10-05 \u80a1\u50f9\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanStockPrice \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 17:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_daily ( stock_id = '2330' , start_date = '2020-04-02' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPrice\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-02\" , \"end_date\" : \"2020-04-12\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPrice\" , data_id = \"2330\" , start_date = \"2020-04-02\" , end_date = \"2020-04-08\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 0 2020-04-06 2330 59712754 16324198154 273 275.5 270 275.5 4 19971 1 2020-04-07 2330 48887346 13817936851 283.5 284 280.5 283 7.5 24281 2 2020-04-08 2330 38698826 11016972354 285 285.5 283 285 2 19126 3 2020-04-09 2330 29276430 8346209654 287.5 288 282.5 283 -2 15271 4 2020-04-10 2330 28206858 7894277586 280 282 279 279.5 -3.5 15833 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_daily ( start_date = '2020-04-06' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPrice\" , \"start_date\" : \"2020-04-06\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPrice\" , start_date = \"2020-04-06\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 0 2020-04-06 0050 12207626 935731083 76.95 77.1 75.75 77.05 1.15 5824 1 2020-04-06 0051 33000 953030 29.05 29.05 28.74 29.05 0.38 21 2 2020-04-06 0052 178700 10660088 59.4 60.05 58.75 60 1.25 56 3 2020-04-06 0053 17000 589750 34.66 35 34.48 34.84 0.18 17 4 2020-04-06 0054 10000 200040 19.87 20.03 19.87 20.03 0 4 \u53f0\u7063\u9084\u539f\u80a1\u50f9\u8cc7\u6599\u8868 TaiwanStockPriceAdj (\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 17:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_daily_adj ( stock_id = '2330' , start_date = '2020-04-02' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPriceAdj\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-02\" , \"end_date\" : \"2020-04-12\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPriceAdj\" , data_id = \"2330\" , start_date = \"2020-04-02\" , end_date = \"2020-04-08\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 0 2020-04-06 2330 59712754 16324198154 273 275.5 270 275.5 4 19971 1 2020-04-07 2330 48887346 13817936851 283.5 284 280.5 283 7.5 24281 2 2020-04-08 2330 38698826 11016972354 285 285.5 283 285 2 19126 3 2020-04-09 2330 29276430 8346209654 287.5 288 282.5 283 -2 15271 4 2020-04-10 2330 28206858 7894277586 280 282 279 279.5 -3.5 15833 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u4f7f\u7528) \u00b6 Example Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPriceAdj\" , \"start_date\" : \"2020-04-06\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPriceAdj\" , start_date = \"2020-04-06\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 0 2020-04-06 0050 12207626 935731083 76.95 77.1 75.75 77.05 1.15 5824 1 2020-04-06 0051 33000 953030 29.05 29.05 28.74 29.05 0.38 21 2 2020-04-06 0052 178700 10660088 59.4 60.05 58.75 60 1.25 56 3 2020-04-06 0053 17000 589750 34.66 35 34.48 34.84 0.18 17 4 2020-04-06 0054 10000 200040 19.87 20.03 19.87 20.03 0 4 \u53f0\u7063\u80a1\u50f9\u6b77\u53f2\u9010\u7b46\u8cc7\u6599\u8868 TaiwanStockPriceTick (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 (\u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599) \u8f38\u5165 dataset\u3001stock_id\u3001start_date \u53c3\u6578\uff0c\u6703\u56de\u50b3 start_date \u7576\u5929\u8cc7\u6599\u3002 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 15:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_tick ( stock_id = '2330' , date = '2020-01-02' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPriceTick\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-01-02\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPriceTick\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) Output date stock_id deal_price volume Time TickType 0 2020-01-02 2330 332.5 520 09:00:00.000 0 1 2020-01-02 2330 332.5 520 09:00:00.646 0 2 2020-01-02 2330 333 45 09:00:05.000 0 3 2020-01-02 2330 333 45 09:00:05.660 0 4 2020-01-02 2330 333 22 09:00:10.000 0 \u500b\u80a1PER\u3001PBR\u8cc7\u6599\u8868 TaiwanStockPER \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 18:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_per_pbr ( stock_id = '2330' , start_date = '2020-01-02' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPER\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPER\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id dividend_yield PER PBR 0 2020-01-02 2330 2.36 26.69 5.54 1 2020-01-03 2330 2.36 26.73 5.55 2 2020-01-06 2330 2.41 26.14 5.42 3 2020-01-07 2330 2.43 25.94 5.38 4 2020-01-08 2330 2.43 25.94 5.38 \u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 TaiwanStockStatisticsOfOrderBookAndTrade \u00b6 (\u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599) Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_book_and_trade ( date = '2021-01-07' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockStatisticsOfOrderBookAndTrade\" , \"start_date\" : \"2021-01-07\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockStatisticsOfOrderBookAndTrade\" , start_date = \"2021-01-07\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output Time TotalBuyOrder TotalBuyVolume TotalSellOrder TotalSellVolume TotalDealOrder TotalDealVolume TotalDealMoney date 0 09:00:00 298618 3229222 365465 1730137 0 0 0 2021-01-07 1 09:00:05 301246 3254929 367886 1751034 17535 97251 4515 2021-01-07 2 09:00:10 304171 3283698 370338 1770414 31370 150557 7041 2021-01-07 3 09:00:15 307686 3325195 372828 1782960 40083 177080 8088 2021-01-07 4 09:00:20 310927 3345735 375220 1792055 47250 198536 9137 2021-01-07 \u52a0\u6b0a\u6307\u6578 TaiwanVariousIndicators5Seconds \u00b6 (\u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599) Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . tse ( date = '2020-07-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanVariousIndicators5Seconds\" , \"start_date\" : \"2020-07-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanVariousIndicators5Seconds\" , start_date = \"2020-07-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date TAIEX 0 2020-07-01 09:00:00 11621.2 1 2020-07-01 09:00:05 11622.6 2 2020-07-01 09:00:10 11632.4 3 2020-07-01 09:00:15 11643.5 4 2020-07-01 09:00:20 11644.2 \u7576\u65e5\u6c96\u92b7\u4ea4\u6613\u6a19\u7684\u53ca\u6210\u4ea4\u91cf\u503c TaiwanStockDayTrading \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_day_trading ( stock_id = '2330' , start_date = '2020-04-02' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDayTrading\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-02\" , \"end_date\" : \"2020-04-12\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockDayTrading\" , data_id = \"2330\" , start_date = \"2020-04-02\" , end_date = \"2020-04-08\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output stock_id date BuyAfterSale Volume BuyAmount SellAmount 0 2330 2020-04-06 Y 8122000 2215280000 2218094500 1 2330 2020-04-07 Y 5128000 1450483500 1447872000 2 2330 2020-04-08 Y 2467000 702411500 702367000 3 2330 2020-04-09 Y 2583000 736745500 734035500 4 2330 2020-04-10 Y 1590000 445516000 444576000 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528) \u00b6 Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_day_trading ( start_date = '2020-04-06' , ) Python-request url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDayTrading\" , \"start_date\" : \"2020-04-06\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } res = requests . get ( url , params = parameter ) temp = res . json () data = pd . DataFrame ( temp [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockDayTrading\" , start_date = \"2020-04-06\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output stock_id date BuyAfterSale Volume BuyAmount SellAmount 0 0050 2020-04-06 1296000 99116100 99343200 1 0051 2020-04-06 2000 57680 57560 2 0052 2020-04-06 9000 536200 537700 3 0053 2020-04-06 0 0 0 4 0054 2020-04-06 0 0 0 \u52a0\u6b0a\u3001\u6ac3\u8cb7\u5831\u916c\u6307\u6578 TaiwanStockTotalReturnIndex \u00b6 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 16:50 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_total_return_index ( index_id = \"TAIEX\" , start_date = '2020-04-02' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockTotalReturnIndex\" , \"data_id\" : \"TAIEX\" , # \u767c\u884c\u91cf\u52a0\u6b0a\u80a1\u50f9\u5831\u916c\u6307\u6578 # \"data_id\": \"TPEx\", # \u6ac3\u8cb7\u6307\u6578\u8207\u5831\u916c\u6307\u6578 \"start_date\" : \"2020-04-02\" , \"end_date\" : \"2020-04-12\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockTotalReturnIndex\" , data_id = \"TAIEX\" , # \u767c\u884c\u91cf\u52a0\u6b0a\u80a1\u50f9\u5831\u916c\u6307\u6578 # data_id= \"TPEx\", # \u6ac3\u8cb7\u6307\u6578\u8207\u5831\u916c\u6307\u6578 start_date = \"2020-04-02\" , end_date = \"2020-04-08\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output price stock_id date 0 18356.5 TAIEX 2020-04-06 1 18688.6 TAIEX 2020-04-07 2 18952.7 TAIEX 2020-04-08 3 18922.6 TAIEX 2020-04-09 4 18994 TAIEX 2020-04-10","title":"\u6280\u8853\u9762"},{"location":"tutor/TaiwanMarket/Technical/#taiwanstockinfo","text":"\u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u53f0\u7063\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u6bcf\u5929 1:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_info () Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockInfo\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockInfo\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output industry_category stock_id stock_name type date 0 ETF 0050 \u5143\u5927\u53f0\u706350 twse 2021-10-05 1 ETF 0051 \u5143\u5927\u4e2d\u578b100 twse 2021-10-05 2 ETF 0052 \u5bcc\u90a6\u79d1\u6280 twse 2021-10-05 3 ETF 0053 \u5143\u5927\u96fb\u5b50 twse 2021-10-05 4 ETF 0054 \u5143\u5927\u53f0\u554650 twse 2021-10-05","title":"\u53f0\u80a1\u7e3d\u89bd TaiwanStockInfo"},{"location":"tutor/TaiwanMarket/Technical/#taiwanstockprice","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 17:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_daily ( stock_id = '2330' , start_date = '2020-04-02' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPrice\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-02\" , \"end_date\" : \"2020-04-12\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPrice\" , data_id = \"2330\" , start_date = \"2020-04-02\" , end_date = \"2020-04-08\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 0 2020-04-06 2330 59712754 16324198154 273 275.5 270 275.5 4 19971 1 2020-04-07 2330 48887346 13817936851 283.5 284 280.5 283 7.5 24281 2 2020-04-08 2330 38698826 11016972354 285 285.5 283 285 2 19126 3 2020-04-09 2330 29276430 8346209654 287.5 288 282.5 283 -2 15271 4 2020-04-10 2330 28206858 7894277586 280 282 279 279.5 -3.5 15833","title":"\u80a1\u50f9\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanStockPrice"},{"location":"tutor/TaiwanMarket/Technical/#backersponsor","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_daily ( start_date = '2020-04-06' , ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPrice\" , \"start_date\" : \"2020-04-06\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPrice\" , start_date = \"2020-04-06\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 0 2020-04-06 0050 12207626 935731083 76.95 77.1 75.75 77.05 1.15 5824 1 2020-04-06 0051 33000 953030 29.05 29.05 28.74 29.05 0.38 21 2 2020-04-06 0052 178700 10660088 59.4 60.05 58.75 60 1.25 56 3 2020-04-06 0053 17000 589750 34.66 35 34.48 34.84 0.18 17 4 2020-04-06 0054 10000 200040 19.87 20.03 19.87 20.03 0 4","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Technical/#taiwanstockpriceadj-backersponsor","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 17:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_daily_adj ( stock_id = '2330' , start_date = '2020-04-02' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPriceAdj\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-02\" , \"end_date\" : \"2020-04-12\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPriceAdj\" , data_id = \"2330\" , start_date = \"2020-04-02\" , end_date = \"2020-04-08\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 0 2020-04-06 2330 59712754 16324198154 273 275.5 270 275.5 4 19971 1 2020-04-07 2330 48887346 13817936851 283.5 284 280.5 283 7.5 24281 2 2020-04-08 2330 38698826 11016972354 285 285.5 283 285 2 19126 3 2020-04-09 2330 29276430 8346209654 287.5 288 282.5 283 -2 15271 4 2020-04-10 2330 28206858 7894277586 280 282 279 279.5 -3.5 15833","title":"\u53f0\u7063\u9084\u539f\u80a1\u50f9\u8cc7\u6599\u8868 TaiwanStockPriceAdj (\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Technical/#backersponsor_1","text":"Example Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPriceAdj\" , \"start_date\" : \"2020-04-06\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPriceAdj\" , start_date = \"2020-04-06\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 0 2020-04-06 0050 12207626 935731083 76.95 77.1 75.75 77.05 1.15 5824 1 2020-04-06 0051 33000 953030 29.05 29.05 28.74 29.05 0.38 21 2 2020-04-06 0052 178700 10660088 59.4 60.05 58.75 60 1.25 56 3 2020-04-06 0053 17000 589750 34.66 35 34.48 34.84 0.18 17 4 2020-04-06 0054 10000 200040 19.87 20.03 19.87 20.03 0 4","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Technical/#taiwanstockpricetick-sponsor","text":"(\u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599) \u8f38\u5165 dataset\u3001stock_id\u3001start_date \u53c3\u6578\uff0c\u6703\u56de\u50b3 start_date \u7576\u5929\u8cc7\u6599\u3002 \u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 15:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_tick ( stock_id = '2330' , date = '2020-01-02' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPriceTick\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-01-02\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPriceTick\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) Output date stock_id deal_price volume Time TickType 0 2020-01-02 2330 332.5 520 09:00:00.000 0 1 2020-01-02 2330 332.5 520 09:00:00.646 0 2 2020-01-02 2330 333 45 09:00:05.000 0 3 2020-01-02 2330 333 45 09:00:05.660 0 4 2020-01-02 2330 333 22 09:00:10.000 0","title":"\u53f0\u7063\u80a1\u50f9\u6b77\u53f2\u9010\u7b46\u8cc7\u6599\u8868 TaiwanStockPriceTick (\u53ea\u9650 sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Technical/#perpbr-taiwanstockper","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 18:00 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_per_pbr ( stock_id = '2330' , start_date = '2020-01-02' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPER\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPER\" , data_id = \"2330\" , start_date = \"2020-01-02\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date stock_id dividend_yield PER PBR 0 2020-01-02 2330 2.36 26.69 5.54 1 2020-01-03 2330 2.36 26.73 5.55 2 2020-01-06 2330 2.41 26.14 5.42 3 2020-01-07 2330 2.43 25.94 5.38 4 2020-01-08 2330 2.43 25.94 5.38","title":"\u500b\u80a1PER\u3001PBR\u8cc7\u6599\u8868 TaiwanStockPER"},{"location":"tutor/TaiwanMarket/Technical/#5-taiwanstockstatisticsoforderbookandtrade","text":"(\u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599) Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_book_and_trade ( date = '2021-01-07' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockStatisticsOfOrderBookAndTrade\" , \"start_date\" : \"2021-01-07\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockStatisticsOfOrderBookAndTrade\" , start_date = \"2021-01-07\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output Time TotalBuyOrder TotalBuyVolume TotalSellOrder TotalSellVolume TotalDealOrder TotalDealVolume TotalDealMoney date 0 09:00:00 298618 3229222 365465 1730137 0 0 0 2021-01-07 1 09:00:05 301246 3254929 367886 1751034 17535 97251 4515 2021-01-07 2 09:00:10 304171 3283698 370338 1770414 31370 150557 7041 2021-01-07 3 09:00:15 307686 3325195 372828 1782960 40083 177080 8088 2021-01-07 4 09:00:20 310927 3345735 375220 1792055 47250 198536 9137 2021-01-07","title":"\u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 TaiwanStockStatisticsOfOrderBookAndTrade"},{"location":"tutor/TaiwanMarket/Technical/#taiwanvariousindicators5seconds","text":"(\u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u55ae\u6b21\u8acb\u6c42\u53ea\u63d0\u4f9b\u4e00\u5929\u8cc7\u6599) Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . tse ( date = '2020-07-01' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanVariousIndicators5Seconds\" , \"start_date\" : \"2020-07-01\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanVariousIndicators5Seconds\" , start_date = \"2020-07-01\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output date TAIEX 0 2020-07-01 09:00:00 11621.2 1 2020-07-01 09:00:05 11622.6 2 2020-07-01 09:00:10 11632.4 3 2020-07-01 09:00:15 11643.5 4 2020-07-01 09:00:20 11644.2","title":"\u52a0\u6b0a\u6307\u6578 TaiwanVariousIndicators5Seconds"},{"location":"tutor/TaiwanMarket/Technical/#taiwanstockdaytrading","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 21:30 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_day_trading ( stock_id = '2330' , start_date = '2020-04-02' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDayTrading\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-02\" , \"end_date\" : \"2020-04-12\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockDayTrading\" , data_id = \"2330\" , start_date = \"2020-04-02\" , end_date = \"2020-04-08\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output stock_id date BuyAfterSale Volume BuyAmount SellAmount 0 2330 2020-04-06 Y 8122000 2215280000 2218094500 1 2330 2020-04-07 Y 5128000 1450483500 1447872000 2 2330 2020-04-08 Y 2467000 702411500 702367000 3 2330 2020-04-09 Y 2583000 736745500 734035500 4 2330 2020-04-10 Y 1590000 445516000 444576000","title":"\u7576\u65e5\u6c96\u92b7\u4ea4\u6613\u6a19\u7684\u53ca\u6210\u4ea4\u91cf\u503c TaiwanStockDayTrading"},{"location":"tutor/TaiwanMarket/Technical/#backersponsor_2","text":"Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_day_trading ( start_date = '2020-04-06' , ) Python-request url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDayTrading\" , \"start_date\" : \"2020-04-06\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } res = requests . get ( url , params = parameter ) temp = res . json () data = pd . DataFrame ( temp [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockDayTrading\" , start_date = \"2020-04-06\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output stock_id date BuyAfterSale Volume BuyAmount SellAmount 0 0050 2020-04-06 1296000 99116100 99343200 1 0051 2020-04-06 2000 57680 57560 2 0052 2020-04-06 9000 536200 537700 3 0053 2020-04-06 0 0 0 4 0054 2020-04-06 0 0 0","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u53ea\u9650 backer\u3001sponsor \u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Technical/#taiwanstocktotalreturnindex","text":"\u8cc7\u6599\u66f4\u65b0\u6642\u9593 \u661f\u671f\u4e00\u81f3\u4e94 16:50 \uff0c\u5be6\u969b\u66f4\u65b0\u6642\u9593\u4ee5 API \u8cc7\u6599\u70ba\u4e3b Example Package from FinMind.data import DataLoader api = DataLoader () # api.login_by_token(api_token='token') # api.login(user_id='user_id',password='password') df = api . taiwan_stock_total_return_index ( index_id = \"TAIEX\" , start_date = '2020-04-02' , end_date = '2020-04-12' ) Python-request import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockTotalReturnIndex\" , \"data_id\" : \"TAIEX\" , # \u767c\u884c\u91cf\u52a0\u6b0a\u80a1\u50f9\u5831\u916c\u6307\u6578 # \"data_id\": \"TPEx\", # \u6ac3\u8cb7\u6307\u6578\u8207\u5831\u916c\u6307\u6578 \"start_date\" : \"2020-04-02\" , \"end_date\" : \"2020-04-12\" , \"token\" : \"\" , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockTotalReturnIndex\" , data_id = \"TAIEX\" , # \u767c\u884c\u91cf\u52a0\u6b0a\u80a1\u50f9\u5831\u916c\u6307\u6578 # data_id= \"TPEx\", # \u6ac3\u8cb7\u6307\u6578\u8207\u5831\u916c\u6307\u6578 start_date = \"2020-04-02\" , end_date = \"2020-04-08\" , token = \"\" # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) Output price stock_id date 0 18356.5 TAIEX 2020-04-06 1 18688.6 TAIEX 2020-04-07 2 18952.7 TAIEX 2020-04-08 3 18922.6 TAIEX 2020-04-09 4 18994 TAIEX 2020-04-10","title":"\u52a0\u6b0a\u3001\u6ac3\u8cb7\u5831\u916c\u6307\u6578 TaiwanStockTotalReturnIndex"},{"location":"tutor/UnitedKingdomMarket/DataList/","text":"\u5728\u82f1\u570b\u91d1\u878d\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u82f1\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 UKStockInfo \u80a1\u50f9 TaiwanStock \u00b6 \u82f1\u570b\u80a1\u50f9\u8cc7\u6599\u8868 UKStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u7e3d\u89bd"},{"location":"tutor/UnitedKingdomMarket/DataList/#taiwanstock","text":"\u82f1\u570b\u80a1\u50f9\u8cc7\u6599\u8868 UKStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u80a1\u50f9 TaiwanStock"},{"location":"tutor/UnitedKingdomMarket/Technical/","text":"\u5728\u82f1\u570b\u80a1\u7968\u8cc7\u6599\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u82f1\u570b\u80a1\u50f9\u8cc7\u6599\u8868 UKStockPrice \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u7684\u5217\u8868\u5982\u4e0b: \u82f1\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 UKStockInfo \u6839\u64da\u4e0a\u8ff0\u8cc7\u6599\u8868\u9010\u4e00\u8aaa\u660e\u600e\u9ebc\u4f7f\u7528\uff0c\u53e6\u5916\u5177\u9ad4\u8cc7\u6599\u8868 schemas \u8acb\u53c3\u8003 finmindapi \u82f1\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 UKStockInfo \u00b6 \u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u82f1\u570b\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"UKStockInfo\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Country stock_name 0 2019-01-31 01IC.L USD QUEBEC FRN20 1 2019-01-31 01IE.L USD ROY.BK.SCOTSERB 2 2019-01-31 01KG.L GBP SCOT.AMER.8%DB. 3 2019-01-31 01LQ.L GBP SCOT.PWR.UK6T23 4 2019-01-31 01LT.L GBP RES.MORT.4CTBRA \u82f1\u570b\u80a1\u50f9\u8cc7\u6599\u8868 UKStockPrice \u00b6 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"UKStockPrice\" , \"data_id\" : \"BP.L\" , \"start_date\" : \"2020-06-16\" , \"end_date\" : \"2021-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Adj_Close Close High Low Open Volume 0 2020-06-16 BP.L 290.26 321.65 331.8 318.65 322.15 55470516 1 2020-06-17 BP.L 285.84 316.75 328.35 315.1 322.85 38005133 2 2020-06-18 BP.L 284.13 314.85 316.7 308.9 313.9 33988764 3 2020-06-19 BP.L 290.08 321.45 325.95 315.7 316.8 95409968 4 2020-06-22 BP.L 284.67 315.45 318.9 311.1 318.15 58369094","title":"\u6280\u8853\u9762"},{"location":"tutor/UnitedKingdomMarket/Technical/#ukstockinfo","text":"\u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u82f1\u570b\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"UKStockInfo\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Country stock_name 0 2019-01-31 01IC.L USD QUEBEC FRN20 1 2019-01-31 01IE.L USD ROY.BK.SCOTSERB 2 2019-01-31 01KG.L GBP SCOT.AMER.8%DB. 3 2019-01-31 01LQ.L GBP SCOT.PWR.UK6T23 4 2019-01-31 01LT.L GBP RES.MORT.4CTBRA","title":"\u82f1\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 UKStockInfo"},{"location":"tutor/UnitedKingdomMarket/Technical/#ukstockprice","text":"Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"UKStockPrice\" , \"data_id\" : \"BP.L\" , \"start_date\" : \"2020-06-16\" , \"end_date\" : \"2021-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Adj_Close Close High Low Open Volume 0 2020-06-16 BP.L 290.26 321.65 331.8 318.65 322.15 55470516 1 2020-06-17 BP.L 285.84 316.75 328.35 315.1 322.85 38005133 2 2020-06-18 BP.L 284.13 314.85 316.7 308.9 313.9 33988764 3 2020-06-19 BP.L 290.08 321.45 325.95 315.7 316.8 95409968 4 2020-06-22 BP.L 284.67 315.45 318.9 311.1 318.15 58369094","title":"\u82f1\u570b\u80a1\u50f9\u8cc7\u6599\u8868 UKStockPrice"},{"location":"tutor/UnitedStatesMarket/DataList/","text":"\u5728\u7f8e\u570b\u91d1\u878d\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u7f8e\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 USStockInfo \u80a1\u50f9 TaiwanStock \u00b6 \u7f8e\u570b\u80a1\u50f9 minute \u8cc7\u6599\u8868 USStockPriceMinute \u7f8e\u570b\u80a1\u50f9 daily \u8cc7\u6599\u8868 USStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u7e3d\u89bd"},{"location":"tutor/UnitedStatesMarket/DataList/#taiwanstock","text":"\u7f8e\u570b\u80a1\u50f9 minute \u8cc7\u6599\u8868 USStockPriceMinute \u7f8e\u570b\u80a1\u50f9 daily \u8cc7\u6599\u8868 USStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u80a1\u50f9 TaiwanStock"},{"location":"tutor/UnitedStatesMarket/Technical/","text":"\u5728\u7f8e\u570b\u80a1\u7968\u8cc7\u6599\uff0c\u6211\u5011\u64c1\u6709 2 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u7f8e\u570b\u80a1\u50f9 minute \u8cc7\u6599\u8868 USStockPriceMinute \u7f8e\u570b\u80a1\u50f9 daily \u8cc7\u6599\u8868 USStockPrice \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u7684\u5217\u8868\u5982\u4e0b: \u7f8e\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 USStockInfo \u6839\u64da\u4e0a\u8ff0\u8cc7\u6599\u8868\u9010\u4e00\u8aaa\u660e\u600e\u9ebc\u4f7f\u7528\uff0c\u53e6\u5916\u5177\u9ad4\u8cc7\u6599\u8868 schemas \u8acb\u53c3\u8003 finmindapi \u7f8e\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 USStockInfo \u00b6 \u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u7f8e\u570b\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"USStockInfo\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Country IPOYear MarketCap Subsector stock_name 0 2019-01-10 A United States 1999 21610000000 Biotechnology:LaboratoryAnalyticalInstruments Agilent Technologies, Inc. 1 2019-01-10 AA n/a 2016 5270000000 Aluminum Alcoa Corporation 2 2019-01-10 AABA United States 0 36780000000 EDPServices Altaba Inc. 3 2019-01-10 AAC United States 2014 55360000 MedicalSpecialities AAC Holdings, Inc. 4 2019-01-10 AAL United States 0 14930000000 AirFreight/DeliveryServices American Airlines Group, Inc. \u7f8e\u570b\u80a1\u50f9 minute \u8cc7\u6599\u8868 USStockPriceMinute \u00b6 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"USStockPriceMinute\" , \"data_id\" : \"^DJI\" , \"start_date\" : \"2022-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id close high low open volume 0 2022-06-16 13:31:00 ^DJI 30082.5 30094.9 30076.6 30091.4 1686944 1 2022-06-16 13:32:00 ^DJI 30075.6 30087.9 30069.2 30081.7 1939377 2 2022-06-16 13:33:00 ^DJI 30039.5 30085.8 30036.4 30078.1 1589351 3 2022-06-16 13:34:00 ^DJI 30001.6 30036.5 29995.9 30036.5 2127155 4 2022-06-16 13:35:00 ^DJI 29996.7 30008 29984.3 30002.2 1917277 \u7f8e\u570b\u80a1\u50f9 daily \u8cc7\u6599\u8868 USStockPrice \u00b6 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"USStockPrice\" , \"data_id\" : \"^DJI\" , \"start_date\" : \"2020-06-16\" , \"end_date\" : \"2021-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Adj_Close Close High Low Open Volume 0 2020-06-16 ^DJI 26290 26290 26611 25811.7 26326.7 489500000 1 2020-06-17 ^DJI 26119.6 26119.6 26400.1 26068.4 26330.5 328830000 2 2020-06-18 ^DJI 26080.1 26080.1 26154.2 25848.5 26016.5 328390000 3 2020-06-19 ^DJI 25871.5 25871.5 26451.4 25759.7 26213.1 669390000 4 2020-06-22 ^DJI 26025 26025 26059.8 25667.7 25865.1 351780000","title":"\u6280\u8853\u9762"},{"location":"tutor/UnitedStatesMarket/Technical/#usstockinfo","text":"\u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u7f8e\u570b\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"USStockInfo\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Country IPOYear MarketCap Subsector stock_name 0 2019-01-10 A United States 1999 21610000000 Biotechnology:LaboratoryAnalyticalInstruments Agilent Technologies, Inc. 1 2019-01-10 AA n/a 2016 5270000000 Aluminum Alcoa Corporation 2 2019-01-10 AABA United States 0 36780000000 EDPServices Altaba Inc. 3 2019-01-10 AAC United States 2014 55360000 MedicalSpecialities AAC Holdings, Inc. 4 2019-01-10 AAL United States 0 14930000000 AirFreight/DeliveryServices American Airlines Group, Inc.","title":"\u7f8e\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 USStockInfo"},{"location":"tutor/UnitedStatesMarket/Technical/#minute-usstockpriceminute","text":"Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"USStockPriceMinute\" , \"data_id\" : \"^DJI\" , \"start_date\" : \"2022-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id close high low open volume 0 2022-06-16 13:31:00 ^DJI 30082.5 30094.9 30076.6 30091.4 1686944 1 2022-06-16 13:32:00 ^DJI 30075.6 30087.9 30069.2 30081.7 1939377 2 2022-06-16 13:33:00 ^DJI 30039.5 30085.8 30036.4 30078.1 1589351 3 2022-06-16 13:34:00 ^DJI 30001.6 30036.5 29995.9 30036.5 2127155 4 2022-06-16 13:35:00 ^DJI 29996.7 30008 29984.3 30002.2 1917277","title":"\u7f8e\u570b\u80a1\u50f9 minute \u8cc7\u6599\u8868 USStockPriceMinute"},{"location":"tutor/UnitedStatesMarket/Technical/#daily-usstockprice","text":"Example import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"USStockPrice\" , \"data_id\" : \"^DJI\" , \"start_date\" : \"2020-06-16\" , \"end_date\" : \"2021-06-16\" , \"token\" : token , # \u53c3\u8003\u767b\u5165\uff0c\u7372\u53d6\u91d1\u9470 } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Output date stock_id Adj_Close Close High Low Open Volume 0 2020-06-16 ^DJI 26290 26290 26611 25811.7 26326.7 489500000 1 2020-06-17 ^DJI 26119.6 26119.6 26400.1 26068.4 26330.5 328830000 2 2020-06-18 ^DJI 26080.1 26080.1 26154.2 25848.5 26016.5 328390000 3 2020-06-19 ^DJI 25871.5 25871.5 26451.4 25759.7 26213.1 669390000 4 2020-06-22 ^DJI 26025 26025 26059.8 25667.7 25865.1 351780000","title":"\u7f8e\u570b\u80a1\u50f9 daily \u8cc7\u6599\u8868 USStockPrice"},{"location":"tutor/analysis/Backtesting/","text":"\u7dda\u4e0a\u9023\u7d50 \u00b6 \u5982\u4e0b\u7a0b\u5f0f\u8aaa\u660e\u5982\u4f55\u4f7f\u7528 FinMind \u9032\u884c\u7b56\u7565\u56de\u6e2c\uff0c\u4e3b\u8981\u900f\u904e strategies \u4f86\u9032\u884c\u56de\u6e2c\uff0c DataLoader \u8b80\u53d6 FinMind \u63d0\u4f9b\u7684\u8cc7\u6599\u3002 \u5728\u9032\u884c\u56de\u6e2c\u7684\u904e\u7a0b\u4e2d\uff0c\u4e3b\u8981\u8981\u5148\u6c7a\u5b9a\u56de\u6e2c\u6a19\u7684\u3001\u56de\u6e2c\u5340\u9593\u3001\u8cc7\u91d1\u90e8\u4f4d\u3001\u4ea4\u6613\u7a05\u4ee5\u53ca\u7b56\u7565\u7684\u8a2d\u8a08\u3002 \u56de\u6e2c\u908f\u8f2f\u4e3b\u8981\u662f\u53bb\u6c7a\u5b9a \u9032\u5834\u3001\u7dad\u6301\u548c\u51fa\u5834 \u7684\u8a0a\u865f (signal)\uff0c\u4f8b\u5982: - \u4eca\u5929\u8a08\u7b97\u51fa\u4f86\u7684\u8a0a\u865f\u70ba -1\uff0c\u4ee3\u8868\u660e\u5929\u6703\u4ee5\u958b\u76e4\u50f9**\u8ce3\u6389** 1 \u5f35\u80a1\u7968 - \u4eca\u5929\u8a08\u7b97\u51fa\u4f86\u7684\u8a0a\u865f\u70ba 0\uff0c\u4ee3\u8868\u660e\u5929\u4ec0\u9ebc\u4e8b\u90fd\u4e0d\u505a - \u4eca\u5929\u8a08\u7b97\u51fa\u4f86\u7684\u8a0a\u865f\u70ba 1\uff0c\u4ee3\u8868\u660e\u5929\u6703\u4ee5\u958b\u76e4\u50f9**\u8cb7\u9032** 1 \u5f35\u80a1\u7968 \u56de\u6e2c\u7d50\u679c\u63d0\u4f9b\u8cc7\u8a0a\u5982\u4e0b: - trade_detail: \u56de\u6e2c\u8a73\u7d30\u8cc7\u6599 - compare_market_detail: \u5927\u76e4\u7d2f\u7a4d\u5831\u916c\u548c\u56de\u6e2c\u7d2f\u7a4d\u5831\u916c\u8d70\u52e2 - final_stats: \u56de\u6e2c\u7d50\u679c - compare_market_stats: \u5927\u76e4\u5e74\u5316\u5831\u916c\u7387\u548c\u7b56\u7565\u5e74\u5316\u5831\u916c\u7387 \u5728\u7bc4\u4f8b\u7a0b\u5f0f\u4e2d\uff0c\u4e3b\u8981\u5206\u6210\u4f7f\u7528 FinMind \u63d0\u4f9b\u7684\u7b56\u7565\u548c\u5ba2\u88fd\u5316\u7b56\u7565\u3002 \u521d\u59cb\u5316\uff0c\u8a2d\u5b9a\u56de\u6e2c\u80a1\u7968\u4ee3\u78bc\u3001\u6642\u9593\u5340\u9593 import numpy as np import pandas as pd from FinMind import strategies from FinMind.data import DataLoader from FinMind.strategies.base import Strategy from ta.momentum import StochasticOscillator data_loader = DataLoader () # data_loader.login(user_id, password) # \u53ef\u9078 obj = strategies . BackTest ( stock_id = \"0056\" , start_date = \"2018-01-01\" , end_date = \"2019-01-01\" , trader_fund = 500000.0 , fee = 0.001425 , data_loader = data_loader , ) obj . stock_price \u5c07\u6703\u7528\u4ee5\u4e0b data \u8a08\u7b97\u56de\u6e2c date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover CashEarningsDistribution StockEarningsDistribution 0 2018 - 01 - 02 0056 1868451 46856990 25.00 25.14 25.00 25.13 0.13 733.0 0.0 0.0 1 2018 - 01 - 03 0056 3846820 97179269 25.15 25.31 25.15 25.31 0.18 1202.0 0.0 0.0 2 2018 - 01 - 04 0056 2736229 69496928 25.31 25.45 25.31 25.41 0.10 957.0 0.0 0.0 3 2018 - 01 - 05 0056 2383585 60620826 25.41 25.48 25.39 25.44 0.03 782.0 0.0 0.0 4 2018 - 01 - 08 0056 3048596 77817525 25.45 25.57 25.45 25.57 0.13 1236.0 0.0 0.0 .. ... ... ... ... ... ... ... ... ... ... ... ... 242 2018 - 12 - 24 0056 1501284 36271556 24.20 24.21 24.09 24.18 0.01 773.0 0.0 0.0 243 2018 - 12 - 25 0056 13908880 332473777 24.01 24.06 23.84 23.97 - 0.21 6359.0 0.0 0.0 244 2018 - 12 - 26 0056 12600245 300239138 24.09 24.09 23.67 23.72 - 0.25 6413.0 0.0 0.0 245 2018 - 12 - 27 0056 2986526 71566004 24.00 24.02 23.90 23.91 0.19 1651.0 0.0 0.0 246 2018 - 12 - 28 0056 2657586 63571334 23.93 23.96 23.89 23.94 0.03 1075.0 0.0 0.0 \u8a2d\u8a08\u7b56\u7565 class Kd ( Strategy ): \"\"\" summary: \u65e5KD 80 20 \u65e5K\u7dda <= 20 \u9032\u5834 \u65e5K\u7dda >= 80 \u51fa\u5834 \"\"\" kdays = 9 kd_upper = 80 kd_lower = 20 def create_trade_sign ( self , stock_price : pd . DataFrame ) -> pd . DataFrame : stock_price = stock_price . sort_values ( \"date\" ) kd = StochasticOscillator ( high = stock_price [ \"max\" ], low = stock_price [ \"min\" ], close = stock_price [ \"close\" ], n = self . kdays , ) rsv_ = kd . stoch () . fillna ( 50 ) _k = np . zeros ( stock_price . shape [ 0 ]) _d = np . zeros ( stock_price . shape [ 0 ]) for i , r in enumerate ( rsv_ ): if i == 0 : _k [ i ] = 50 _d [ i ] = 50 else : _k [ i ] = _k [ i - 1 ] * 2 / 3 + r / 3 _d [ i ] = _d [ i - 1 ] * 2 / 3 + _k [ i ] / 3 stock_price [ \"K\" ] = _k stock_price [ \"D\" ] = _d stock_price . index = range ( len ( stock_price )) stock_price [ \"signal\" ] = 0 stock_price . loc [ stock_price [ \"K\" ] <= self . kd_lower , \"signal\" ] = 1 stock_price . loc [ stock_price [ \"K\" ] >= self . kd_upper , \"signal\" ] = - 1 return stock_price \u56de\u6e2c\u6a21\u64ec\u4ea4\u6613 obj . add_strategy ( Kd ) obj . simulate () obj . final_stats output MeanProfit 2366.450976 MaxLoss - 1425.510000 FinalProfit 6196.970000 MeanProfitPer 0.470000 FinalProfitPer 1.240000 MaxLossPer - 0.290000 AnnualReturnPer 1.250000 AnnualSharpRatio 0.860000 dtype : float64 \u4ea4\u6613\u660e\u7d30 obj . trade_detail output stock_id date EverytimeProfit RealizedProfit UnrealizedProfit board_lot hold_cost hold_volume signal tax fee trade_price trader_fund 0 0056 2018 - 01 - 03 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.15 500000.00000 1 0056 2018 - 01 - 04 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.31 500000.00000 2 0056 2018 - 01 - 05 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.41 500000.00000 3 0056 2018 - 01 - 08 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.45 500000.00000 4 0056 2018 - 01 - 09 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.55 500000.00000 .. ... ... ... ... ... ... ... ... ... ... ... ... ... 241 0056 2018 - 12 - 24 7274.35 5677.56 1596.79 1000 23.742118 4000 0 0.001 0.001425 24.20 410709.09425 242 0056 2018 - 12 - 25 6516.19 5677.56 838.63 1000 23.742118 4000 0 0.001 0.001425 24.01 410709.09425 243 0056 2018 - 12 - 26 6835.42 5677.56 1157.86 1000 23.742118 4000 0 0.001 0.001425 24.09 410709.09425 244 0056 2018 - 12 - 27 6476.29 5677.56 798.73 1000 23.742118 4000 0 0.001 0.001425 24.00 410709.09425 245 0056 2018 - 12 - 28 6196.97 5677.56 519.41 1000 23.742118 4000 0 0.001 0.001425 23.93 410709.09425 \u8996\u89ba\u5316 obj . plot ()","title":"\u56de\u6e2c"},{"location":"tutor/analysis/Backtesting/#_1","text":"\u5982\u4e0b\u7a0b\u5f0f\u8aaa\u660e\u5982\u4f55\u4f7f\u7528 FinMind \u9032\u884c\u7b56\u7565\u56de\u6e2c\uff0c\u4e3b\u8981\u900f\u904e strategies \u4f86\u9032\u884c\u56de\u6e2c\uff0c DataLoader \u8b80\u53d6 FinMind \u63d0\u4f9b\u7684\u8cc7\u6599\u3002 \u5728\u9032\u884c\u56de\u6e2c\u7684\u904e\u7a0b\u4e2d\uff0c\u4e3b\u8981\u8981\u5148\u6c7a\u5b9a\u56de\u6e2c\u6a19\u7684\u3001\u56de\u6e2c\u5340\u9593\u3001\u8cc7\u91d1\u90e8\u4f4d\u3001\u4ea4\u6613\u7a05\u4ee5\u53ca\u7b56\u7565\u7684\u8a2d\u8a08\u3002 \u56de\u6e2c\u908f\u8f2f\u4e3b\u8981\u662f\u53bb\u6c7a\u5b9a \u9032\u5834\u3001\u7dad\u6301\u548c\u51fa\u5834 \u7684\u8a0a\u865f (signal)\uff0c\u4f8b\u5982: - \u4eca\u5929\u8a08\u7b97\u51fa\u4f86\u7684\u8a0a\u865f\u70ba -1\uff0c\u4ee3\u8868\u660e\u5929\u6703\u4ee5\u958b\u76e4\u50f9**\u8ce3\u6389** 1 \u5f35\u80a1\u7968 - \u4eca\u5929\u8a08\u7b97\u51fa\u4f86\u7684\u8a0a\u865f\u70ba 0\uff0c\u4ee3\u8868\u660e\u5929\u4ec0\u9ebc\u4e8b\u90fd\u4e0d\u505a - \u4eca\u5929\u8a08\u7b97\u51fa\u4f86\u7684\u8a0a\u865f\u70ba 1\uff0c\u4ee3\u8868\u660e\u5929\u6703\u4ee5\u958b\u76e4\u50f9**\u8cb7\u9032** 1 \u5f35\u80a1\u7968 \u56de\u6e2c\u7d50\u679c\u63d0\u4f9b\u8cc7\u8a0a\u5982\u4e0b: - trade_detail: \u56de\u6e2c\u8a73\u7d30\u8cc7\u6599 - compare_market_detail: \u5927\u76e4\u7d2f\u7a4d\u5831\u916c\u548c\u56de\u6e2c\u7d2f\u7a4d\u5831\u916c\u8d70\u52e2 - final_stats: \u56de\u6e2c\u7d50\u679c - compare_market_stats: \u5927\u76e4\u5e74\u5316\u5831\u916c\u7387\u548c\u7b56\u7565\u5e74\u5316\u5831\u916c\u7387 \u5728\u7bc4\u4f8b\u7a0b\u5f0f\u4e2d\uff0c\u4e3b\u8981\u5206\u6210\u4f7f\u7528 FinMind \u63d0\u4f9b\u7684\u7b56\u7565\u548c\u5ba2\u88fd\u5316\u7b56\u7565\u3002 \u521d\u59cb\u5316\uff0c\u8a2d\u5b9a\u56de\u6e2c\u80a1\u7968\u4ee3\u78bc\u3001\u6642\u9593\u5340\u9593 import numpy as np import pandas as pd from FinMind import strategies from FinMind.data import DataLoader from FinMind.strategies.base import Strategy from ta.momentum import StochasticOscillator data_loader = DataLoader () # data_loader.login(user_id, password) # \u53ef\u9078 obj = strategies . BackTest ( stock_id = \"0056\" , start_date = \"2018-01-01\" , end_date = \"2019-01-01\" , trader_fund = 500000.0 , fee = 0.001425 , data_loader = data_loader , ) obj . stock_price \u5c07\u6703\u7528\u4ee5\u4e0b data \u8a08\u7b97\u56de\u6e2c date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover CashEarningsDistribution StockEarningsDistribution 0 2018 - 01 - 02 0056 1868451 46856990 25.00 25.14 25.00 25.13 0.13 733.0 0.0 0.0 1 2018 - 01 - 03 0056 3846820 97179269 25.15 25.31 25.15 25.31 0.18 1202.0 0.0 0.0 2 2018 - 01 - 04 0056 2736229 69496928 25.31 25.45 25.31 25.41 0.10 957.0 0.0 0.0 3 2018 - 01 - 05 0056 2383585 60620826 25.41 25.48 25.39 25.44 0.03 782.0 0.0 0.0 4 2018 - 01 - 08 0056 3048596 77817525 25.45 25.57 25.45 25.57 0.13 1236.0 0.0 0.0 .. ... ... ... ... ... ... ... ... ... ... ... ... 242 2018 - 12 - 24 0056 1501284 36271556 24.20 24.21 24.09 24.18 0.01 773.0 0.0 0.0 243 2018 - 12 - 25 0056 13908880 332473777 24.01 24.06 23.84 23.97 - 0.21 6359.0 0.0 0.0 244 2018 - 12 - 26 0056 12600245 300239138 24.09 24.09 23.67 23.72 - 0.25 6413.0 0.0 0.0 245 2018 - 12 - 27 0056 2986526 71566004 24.00 24.02 23.90 23.91 0.19 1651.0 0.0 0.0 246 2018 - 12 - 28 0056 2657586 63571334 23.93 23.96 23.89 23.94 0.03 1075.0 0.0 0.0 \u8a2d\u8a08\u7b56\u7565 class Kd ( Strategy ): \"\"\" summary: \u65e5KD 80 20 \u65e5K\u7dda <= 20 \u9032\u5834 \u65e5K\u7dda >= 80 \u51fa\u5834 \"\"\" kdays = 9 kd_upper = 80 kd_lower = 20 def create_trade_sign ( self , stock_price : pd . DataFrame ) -> pd . DataFrame : stock_price = stock_price . sort_values ( \"date\" ) kd = StochasticOscillator ( high = stock_price [ \"max\" ], low = stock_price [ \"min\" ], close = stock_price [ \"close\" ], n = self . kdays , ) rsv_ = kd . stoch () . fillna ( 50 ) _k = np . zeros ( stock_price . shape [ 0 ]) _d = np . zeros ( stock_price . shape [ 0 ]) for i , r in enumerate ( rsv_ ): if i == 0 : _k [ i ] = 50 _d [ i ] = 50 else : _k [ i ] = _k [ i - 1 ] * 2 / 3 + r / 3 _d [ i ] = _d [ i - 1 ] * 2 / 3 + _k [ i ] / 3 stock_price [ \"K\" ] = _k stock_price [ \"D\" ] = _d stock_price . index = range ( len ( stock_price )) stock_price [ \"signal\" ] = 0 stock_price . loc [ stock_price [ \"K\" ] <= self . kd_lower , \"signal\" ] = 1 stock_price . loc [ stock_price [ \"K\" ] >= self . kd_upper , \"signal\" ] = - 1 return stock_price \u56de\u6e2c\u6a21\u64ec\u4ea4\u6613 obj . add_strategy ( Kd ) obj . simulate () obj . final_stats output MeanProfit 2366.450976 MaxLoss - 1425.510000 FinalProfit 6196.970000 MeanProfitPer 0.470000 FinalProfitPer 1.240000 MaxLossPer - 0.290000 AnnualReturnPer 1.250000 AnnualSharpRatio 0.860000 dtype : float64 \u4ea4\u6613\u660e\u7d30 obj . trade_detail output stock_id date EverytimeProfit RealizedProfit UnrealizedProfit board_lot hold_cost hold_volume signal tax fee trade_price trader_fund 0 0056 2018 - 01 - 03 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.15 500000.00000 1 0056 2018 - 01 - 04 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.31 500000.00000 2 0056 2018 - 01 - 05 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.41 500000.00000 3 0056 2018 - 01 - 08 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.45 500000.00000 4 0056 2018 - 01 - 09 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.55 500000.00000 .. ... ... ... ... ... ... ... ... ... ... ... ... ... 241 0056 2018 - 12 - 24 7274.35 5677.56 1596.79 1000 23.742118 4000 0 0.001 0.001425 24.20 410709.09425 242 0056 2018 - 12 - 25 6516.19 5677.56 838.63 1000 23.742118 4000 0 0.001 0.001425 24.01 410709.09425 243 0056 2018 - 12 - 26 6835.42 5677.56 1157.86 1000 23.742118 4000 0 0.001 0.001425 24.09 410709.09425 244 0056 2018 - 12 - 27 6476.29 5677.56 798.73 1000 23.742118 4000 0 0.001 0.001425 24.00 410709.09425 245 0056 2018 - 12 - 28 6196.97 5677.56 519.41 1000 23.742118 4000 0 0.001 0.001425 23.93 410709.09425 \u8996\u89ba\u5316 obj . plot ()","title":"\u7dda\u4e0a\u9023\u7d50"},{"location":"tutor/analysis/BacktestingOtherData/","text":"\u7dda\u4e0a\u9023\u7d50 \u00b6 pip install FinMind \u521d\u59cb\u5316\uff0c\u8a2d\u5b9a\u56de\u6e2c\u80a1\u7968\u4ee3\u78bc\u3001\u6642\u9593\u5340\u9593 import numpy as np import pandas as pd from FinMind import strategies from FinMind.data import DataLoader from FinMind.strategies.base import Strategy from ta.momentum import StochasticOscillator data_loader = DataLoader () # data_loader.login(user_id, password) # \u53ef\u9078 obj = strategies . BackTest ( stock_id = \"0056\" , start_date = \"2018-01-01\" , end_date = \"2019-01-01\" , trader_fund = 500000.0 , fee = 0.001425 , data_loader = data_loader , ) obj . stock_price \u5c07\u6703\u7528\u4ee5\u4e0b data \u8a08\u7b97\u56de\u6e2c date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover CashEarningsDistribution StockEarningsDistribution 0 2018 - 01 - 02 2330 18055269 4188555408 231.5 232.5 231.0 232.5 3.0 9954.0 0.0 0.0 1 2018 - 01 - 03 2330 31706091 7504382512 236.0 238.0 235.5 237.0 4.5 13633.0 0.0 0.0 2 2018 - 01 - 04 2330 29179613 6963192636 240.0 240.0 236.5 239.5 2.5 10953.0 0.0 0.0 3 2018 - 01 - 05 2330 23721255 5681934695 240.0 240.0 238.0 240.0 0.5 8659.0 0.0 0.0 4 2018 - 01 - 08 2330 21846692 5281823362 242.0 242.5 240.5 242.0 2.0 10251.0 0.0 0.0 .. ... ... ... ... ... ... ... ... ... ... ... ... 729 2020 - 12 - 25 2330 12581145 6449612552 514.0 515.0 510.0 511.0 1.0 14988.0 0.0 0.0 730 2020 - 12 - 28 2330 19262886 9890545245 512.0 515.0 509.0 515.0 4.0 16673.0 0.0 0.0 731 2020 - 12 - 29 2330 20151736 10370562545 515.0 517.0 513.0 515.0 0.0 17186.0 0.0 0.0 732 2020 - 12 - 30 2330 46705107 24306881615 516.0 525.0 514.0 525.0 10.0 33173.0 0.0 0.0 733 2020 - 12 - 31 2330 30326332 15989936054 526.0 530.0 524.0 530.0 5.0 25134.0 0.0 0.0 \u8a2d\u8a08\u7b56\u7565 class ShortSaleMarginPurchaseRatio ( Strategy ): \"\"\" summary: \u7b56\u7565\u6982\u5ff5: \u5238\u8cc7\u6bd4\u8d8a\u9ad8\u4ee3\u8868\u6563\u6236\u770b\u7a7a\uff0c\u6cd5\u4eba\u8cb7\u8d85\u80a1\u7968\u6703\u4e0a\u6f32\uff0c\u9019\u6642\u5019\u8ce3\u53ef\u4ee5\u8ddf\u5927\u90e8\u5206\u6563\u6236\u9032\u884c\u76f8\u53cd\u7684\u64cd\u4f5c\uff0c\u53cd\u4e4b\u4ea6\u7136 \u7b56\u7565\u898f\u5247: \u5238\u8cc7\u6bd4>=30% \u4e14\u6cd5\u4eba\u8cb7\u8d85\u80a1\u7968, \u8ce3 \u5238\u8cc7\u6bd4<30% \u4e14\u6cd5\u4eba\u8ce3\u8d85\u80a1\u7968 \u8cb7 \"\"\" ShortSaleMarginPurchaseTodayRatioThreshold = 0.3 def load_taiwan_stock_margin_purchase_short_sale ( self ): self . TaiwanStockMarginPurchaseShortSale = ( self . data_loader . taiwan_stock_margin_purchase_short_sale ( stock_id = self . stock_id , start_date = self . start_date , end_date = self . end_date , ) ) self . TaiwanStockMarginPurchaseShortSale [ [ \"ShortSaleTodayBalance\" , \"MarginPurchaseTodayBalance\" ] ] = self . TaiwanStockMarginPurchaseShortSale [ [ \"ShortSaleTodayBalance\" , \"MarginPurchaseTodayBalance\" ] ] . astype ( int ) self . TaiwanStockMarginPurchaseShortSale [ \"ShortSaleMarginPurchaseTodayRatio\" ] = ( self . TaiwanStockMarginPurchaseShortSale [ \"ShortSaleTodayBalance\" ] / self . TaiwanStockMarginPurchaseShortSale [ \"MarginPurchaseTodayBalance\" ] ) def load_institutional_investors_buy_sell ( self ): self . InstitutionalInvestorsBuySell = ( self . data_loader . taiwan_stock_institutional_investors ( stock_id = self . stock_id , start_date = self . start_date , end_date = self . end_date , ) ) self . InstitutionalInvestorsBuySell [[ \"sell\" , \"buy\" ]] = ( self . InstitutionalInvestorsBuySell [[ \"sell\" , \"buy\" ]] . fillna ( 0 ) . astype ( int ) ) self . InstitutionalInvestorsBuySell = ( self . InstitutionalInvestorsBuySell . groupby ( [ \"date\" , \"stock_id\" ], as_index = False ) . agg ({ \"buy\" : np . sum , \"sell\" : np . sum }) ) self . InstitutionalInvestorsBuySell [ \"diff\" ] = ( self . InstitutionalInvestorsBuySell [ \"buy\" ] - self . InstitutionalInvestorsBuySell [ \"sell\" ] ) def create_trade_sign ( self , stock_price : pd . DataFrame ) -> pd . DataFrame : stock_price = stock_price . sort_values ( \"date\" ) self . load_taiwan_stock_margin_purchase_short_sale () self . load_institutional_investors_buy_sell () stock_price = pd . merge ( stock_price , self . InstitutionalInvestorsBuySell [[ \"stock_id\" , \"date\" , \"diff\" ]], on = [ \"stock_id\" , \"date\" ], how = \"left\" , ) . fillna ( 0 ) stock_price = pd . merge ( stock_price , self . TaiwanStockMarginPurchaseShortSale [ [ \"stock_id\" , \"date\" , \"ShortSaleMarginPurchaseTodayRatio\" ] ], on = [ \"stock_id\" , \"date\" ], how = \"left\" , ) . fillna ( 0 ) stock_price . index = range ( len ( stock_price )) stock_price [ \"signal\" ] = 0 sell_mask = ( stock_price [ \"ShortSaleMarginPurchaseTodayRatio\" ] >= self . ShortSaleMarginPurchaseTodayRatioThreshold ) & ( stock_price [ \"diff\" ] > 0 ) stock_price . loc [ sell_mask , \"signal\" ] = - 1 buy_mask = ( stock_price [ \"ShortSaleMarginPurchaseTodayRatio\" ] < self . ShortSaleMarginPurchaseTodayRatioThreshold ) & ( stock_price [ \"diff\" ] < 0 ) stock_price . loc [ buy_mask , \"signal\" ] = 1 return stock_price \u56de\u6e2c\u6a21\u64ec\u4ea4\u6613 obj . add_strategy ( ShortSaleMarginPurchaseRatio ) obj . simulate () obj . final_stats output MeanProfit 187013.454352 MaxLoss - 17592.160000 FinalProfit 716596.810000 MeanProfitPer 37.400000 FinalProfitPer 143.320000 MaxLossPer - 3.520000 AnnualReturnPer 34.500000 AnnualSharpRatio 1.430000 dtype : float64 \u4ea4\u6613\u660e\u7d30 obj . trade_detail output stock_id date EverytimeProfit RealizedProfit UnrealizedProfit board_lot hold_cost hold_volume signal tax fee trade_price trader_fund 0 2330 2018 - 01 - 03 0.00 0.00 0.00 1000 0.0000 0 0 0.003 0.001425 236.0 500000.000 1 2330 2018 - 01 - 04 0.00 0.00 0.00 1000 0.0000 0 0 0.003 0.001425 240.0 500000.000 2 2330 2018 - 01 - 05 0.00 0.00 0.00 1000 0.0000 0 0 0.003 0.001425 240.0 500000.000 3 2330 2018 - 01 - 08 0.00 0.00 0.00 1000 0.0000 0 - 1 0.003 0.001425 242.0 500000.000 4 2330 2018 - 01 - 09 0.00 0.00 0.00 1000 0.0000 0 - 1 0.003 0.001425 242.0 500000.000 .. ... ... ... ... ... ... ... ... ... ... ... ... ... 728 2330 2020 - 12 - 25 692703.01 160992.91 531710.10 1000 245.8705 2000 0 0.003 0.001425 514.0 47251.925 729 2330 2020 - 12 - 28 688720.71 160992.91 527727.80 1000 245.8705 2000 0 0.003 0.001425 512.0 47251.925 730 2330 2020 - 12 - 29 694694.16 160992.91 533701.25 1000 245.8705 2000 0 0.003 0.001425 515.0 47251.925 731 2330 2020 - 12 - 30 696685.31 160992.91 535692.40 1000 245.8705 2000 0 0.003 0.001425 516.0 47251.925 732 2330 2020 - 12 - 31 716596.81 160992.91 555603.90 1000 245.8705 2000 0 0.003 0.001425 526.0 47251.925 \u8996\u89ba\u5316 obj . plot ()","title":"\u56de\u6e2c(\u5f15\u7528\u5916\u90e8 data)"},{"location":"tutor/analysis/BacktestingOtherData/#_1","text":"pip install FinMind \u521d\u59cb\u5316\uff0c\u8a2d\u5b9a\u56de\u6e2c\u80a1\u7968\u4ee3\u78bc\u3001\u6642\u9593\u5340\u9593 import numpy as np import pandas as pd from FinMind import strategies from FinMind.data import DataLoader from FinMind.strategies.base import Strategy from ta.momentum import StochasticOscillator data_loader = DataLoader () # data_loader.login(user_id, password) # \u53ef\u9078 obj = strategies . BackTest ( stock_id = \"0056\" , start_date = \"2018-01-01\" , end_date = \"2019-01-01\" , trader_fund = 500000.0 , fee = 0.001425 , data_loader = data_loader , ) obj . stock_price \u5c07\u6703\u7528\u4ee5\u4e0b data \u8a08\u7b97\u56de\u6e2c date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover CashEarningsDistribution StockEarningsDistribution 0 2018 - 01 - 02 2330 18055269 4188555408 231.5 232.5 231.0 232.5 3.0 9954.0 0.0 0.0 1 2018 - 01 - 03 2330 31706091 7504382512 236.0 238.0 235.5 237.0 4.5 13633.0 0.0 0.0 2 2018 - 01 - 04 2330 29179613 6963192636 240.0 240.0 236.5 239.5 2.5 10953.0 0.0 0.0 3 2018 - 01 - 05 2330 23721255 5681934695 240.0 240.0 238.0 240.0 0.5 8659.0 0.0 0.0 4 2018 - 01 - 08 2330 21846692 5281823362 242.0 242.5 240.5 242.0 2.0 10251.0 0.0 0.0 .. ... ... ... ... ... ... ... ... ... ... ... ... 729 2020 - 12 - 25 2330 12581145 6449612552 514.0 515.0 510.0 511.0 1.0 14988.0 0.0 0.0 730 2020 - 12 - 28 2330 19262886 9890545245 512.0 515.0 509.0 515.0 4.0 16673.0 0.0 0.0 731 2020 - 12 - 29 2330 20151736 10370562545 515.0 517.0 513.0 515.0 0.0 17186.0 0.0 0.0 732 2020 - 12 - 30 2330 46705107 24306881615 516.0 525.0 514.0 525.0 10.0 33173.0 0.0 0.0 733 2020 - 12 - 31 2330 30326332 15989936054 526.0 530.0 524.0 530.0 5.0 25134.0 0.0 0.0 \u8a2d\u8a08\u7b56\u7565 class ShortSaleMarginPurchaseRatio ( Strategy ): \"\"\" summary: \u7b56\u7565\u6982\u5ff5: \u5238\u8cc7\u6bd4\u8d8a\u9ad8\u4ee3\u8868\u6563\u6236\u770b\u7a7a\uff0c\u6cd5\u4eba\u8cb7\u8d85\u80a1\u7968\u6703\u4e0a\u6f32\uff0c\u9019\u6642\u5019\u8ce3\u53ef\u4ee5\u8ddf\u5927\u90e8\u5206\u6563\u6236\u9032\u884c\u76f8\u53cd\u7684\u64cd\u4f5c\uff0c\u53cd\u4e4b\u4ea6\u7136 \u7b56\u7565\u898f\u5247: \u5238\u8cc7\u6bd4>=30% \u4e14\u6cd5\u4eba\u8cb7\u8d85\u80a1\u7968, \u8ce3 \u5238\u8cc7\u6bd4<30% \u4e14\u6cd5\u4eba\u8ce3\u8d85\u80a1\u7968 \u8cb7 \"\"\" ShortSaleMarginPurchaseTodayRatioThreshold = 0.3 def load_taiwan_stock_margin_purchase_short_sale ( self ): self . TaiwanStockMarginPurchaseShortSale = ( self . data_loader . taiwan_stock_margin_purchase_short_sale ( stock_id = self . stock_id , start_date = self . start_date , end_date = self . end_date , ) ) self . TaiwanStockMarginPurchaseShortSale [ [ \"ShortSaleTodayBalance\" , \"MarginPurchaseTodayBalance\" ] ] = self . TaiwanStockMarginPurchaseShortSale [ [ \"ShortSaleTodayBalance\" , \"MarginPurchaseTodayBalance\" ] ] . astype ( int ) self . TaiwanStockMarginPurchaseShortSale [ \"ShortSaleMarginPurchaseTodayRatio\" ] = ( self . TaiwanStockMarginPurchaseShortSale [ \"ShortSaleTodayBalance\" ] / self . TaiwanStockMarginPurchaseShortSale [ \"MarginPurchaseTodayBalance\" ] ) def load_institutional_investors_buy_sell ( self ): self . InstitutionalInvestorsBuySell = ( self . data_loader . taiwan_stock_institutional_investors ( stock_id = self . stock_id , start_date = self . start_date , end_date = self . end_date , ) ) self . InstitutionalInvestorsBuySell [[ \"sell\" , \"buy\" ]] = ( self . InstitutionalInvestorsBuySell [[ \"sell\" , \"buy\" ]] . fillna ( 0 ) . astype ( int ) ) self . InstitutionalInvestorsBuySell = ( self . InstitutionalInvestorsBuySell . groupby ( [ \"date\" , \"stock_id\" ], as_index = False ) . agg ({ \"buy\" : np . sum , \"sell\" : np . sum }) ) self . InstitutionalInvestorsBuySell [ \"diff\" ] = ( self . InstitutionalInvestorsBuySell [ \"buy\" ] - self . InstitutionalInvestorsBuySell [ \"sell\" ] ) def create_trade_sign ( self , stock_price : pd . DataFrame ) -> pd . DataFrame : stock_price = stock_price . sort_values ( \"date\" ) self . load_taiwan_stock_margin_purchase_short_sale () self . load_institutional_investors_buy_sell () stock_price = pd . merge ( stock_price , self . InstitutionalInvestorsBuySell [[ \"stock_id\" , \"date\" , \"diff\" ]], on = [ \"stock_id\" , \"date\" ], how = \"left\" , ) . fillna ( 0 ) stock_price = pd . merge ( stock_price , self . TaiwanStockMarginPurchaseShortSale [ [ \"stock_id\" , \"date\" , \"ShortSaleMarginPurchaseTodayRatio\" ] ], on = [ \"stock_id\" , \"date\" ], how = \"left\" , ) . fillna ( 0 ) stock_price . index = range ( len ( stock_price )) stock_price [ \"signal\" ] = 0 sell_mask = ( stock_price [ \"ShortSaleMarginPurchaseTodayRatio\" ] >= self . ShortSaleMarginPurchaseTodayRatioThreshold ) & ( stock_price [ \"diff\" ] > 0 ) stock_price . loc [ sell_mask , \"signal\" ] = - 1 buy_mask = ( stock_price [ \"ShortSaleMarginPurchaseTodayRatio\" ] < self . ShortSaleMarginPurchaseTodayRatioThreshold ) & ( stock_price [ \"diff\" ] < 0 ) stock_price . loc [ buy_mask , \"signal\" ] = 1 return stock_price \u56de\u6e2c\u6a21\u64ec\u4ea4\u6613 obj . add_strategy ( ShortSaleMarginPurchaseRatio ) obj . simulate () obj . final_stats output MeanProfit 187013.454352 MaxLoss - 17592.160000 FinalProfit 716596.810000 MeanProfitPer 37.400000 FinalProfitPer 143.320000 MaxLossPer - 3.520000 AnnualReturnPer 34.500000 AnnualSharpRatio 1.430000 dtype : float64 \u4ea4\u6613\u660e\u7d30 obj . trade_detail output stock_id date EverytimeProfit RealizedProfit UnrealizedProfit board_lot hold_cost hold_volume signal tax fee trade_price trader_fund 0 2330 2018 - 01 - 03 0.00 0.00 0.00 1000 0.0000 0 0 0.003 0.001425 236.0 500000.000 1 2330 2018 - 01 - 04 0.00 0.00 0.00 1000 0.0000 0 0 0.003 0.001425 240.0 500000.000 2 2330 2018 - 01 - 05 0.00 0.00 0.00 1000 0.0000 0 0 0.003 0.001425 240.0 500000.000 3 2330 2018 - 01 - 08 0.00 0.00 0.00 1000 0.0000 0 - 1 0.003 0.001425 242.0 500000.000 4 2330 2018 - 01 - 09 0.00 0.00 0.00 1000 0.0000 0 - 1 0.003 0.001425 242.0 500000.000 .. ... ... ... ... ... ... ... ... ... ... ... ... ... 728 2330 2020 - 12 - 25 692703.01 160992.91 531710.10 1000 245.8705 2000 0 0.003 0.001425 514.0 47251.925 729 2330 2020 - 12 - 28 688720.71 160992.91 527727.80 1000 245.8705 2000 0 0.003 0.001425 512.0 47251.925 730 2330 2020 - 12 - 29 694694.16 160992.91 533701.25 1000 245.8705 2000 0 0.003 0.001425 515.0 47251.925 731 2330 2020 - 12 - 30 696685.31 160992.91 535692.40 1000 245.8705 2000 0 0.003 0.001425 516.0 47251.925 732 2330 2020 - 12 - 31 716596.81 160992.91 555603.90 1000 245.8705 2000 0 0.003 0.001425 526.0 47251.925 \u8996\u89ba\u5316 obj . plot ()","title":"\u7dda\u4e0a\u9023\u7d50"},{"location":"tutor/analysis/CustomerDashboardWebServer/","text":"\u5ba2\u88fd\u5316\u770b\u76e4\u5100\u8868\u677f\u3001\u4e26\u5728 local \u67b6\u8a2d web \u00b6 K \u7dda from pathlib import Path from flask import Flask , render_template , request from loguru import logger from pyecharts.charts import Page import FinMind from FinMind import plotting from FinMind.data import DataLoader def get_path (): path = Path ( FinMind . __file__ ) path = path . parent . joinpath ( \"templates\" ) return path PATH = get_path () def kline ( data_loader : DataLoader , stock_id : str , start_date : str , end_date : str ): stock_data = data_loader . taiwan_stock_daily ( stock_id , start_date , end_date ) stock_data = data_loader . feature . add_kline_institutional_investors ( stock_data ) stock_data = data_loader . feature . add_kline_margin_purchase_short_sale ( stock_data ) # \u7e6a\u88fdk\u7dda\u5716 kline_plot = plotting . kline ( stock_data ) return kline_plot \u6708\u71df\u6536\u3001\u9577\u689d\u5716 def bar ( data_loader : DataLoader , stock_id : str , start_date : str , end_date : str ): df = data_loader . taiwan_stock_month_revenue ( stock_id = stock_id , start_date = start_date , end_date = end_date ) df [ \"labels\" ] = ( df [[ \"revenue_year\" , \"revenue_month\" ]] . astype ( str ) . apply ( lambda date : f \" { date [ 0 ] } - { date [ 1 ] } M\" , axis = 1 ) ) df [ \"series\" ] = df [ \"revenue\" ] . map ( lambda value : round ( value * 1e-8 , 2 )) bar_plot = plotting . bar ( labels = df [ \"labels\" ], series = df [ \"series\" ], title = \"\u6708\u71df\u6536\" , yaxis_color = \"orange\" , y_axis_name = \"\u5104\" , ) return bar_plot \u5916\u8cc7\u6301\u80a1\u6bd4\u4f8b\u3001\u7dda\u5716 def line ( data_loader : DataLoader , stock_id : str , start_date : str , end_date : str ): df = data_loader . taiwan_stock_shareholding ( stock_id = stock_id , start_date = start_date , end_date = end_date ) df [ \"series\" ] = df [ \"ForeignInvestmentSharesRatio\" ] . map ( lambda value : round ( value * 1e-2 , 2 ) ) df [ \"labels\" ] = df [ \"date\" ] line_plot = plotting . line ( labels = df [ \"labels\" ], series = df [ \"series\" ], title = \"\u5916\u8cc7\u6301\u80a1\u6bd4\u4f8b\" , yaxis_color = \"blue\" , y_axis_name = \"\" , ) return line_plot \u80a1\u6b0a\u5206\u6563\u8868\u3001\u5713\u9905\u5716 def pie ( data_loader : DataLoader , stock_id : str , start_date : str , end_date : str ): df = data_loader . taiwan_stock_holding_shares_per ( stock_id = stock_id , start_date = start_date , end_date = end_date ) df = df [ df [ \"date\" ] == max ( df [ \"date\" ])] df = df [ df [ \"HoldingSharesLevel\" ] != \"total\" ] df [ \"labels\" ] = df [ \"HoldingSharesLevel\" ] df [ \"series\" ] = df [ \"percent\" ] pie_plot = plotting . pie ( labels = df [ \"labels\" ], series = df [ \"series\" ], title = \"\u80a1\u6b0a\u5206\u6563\u8868\" ) return pie_plot \u5408\u4f75\u6210 dashboard def dashboard ( stock_id : str , start_date : str , end_date : str ): data_loader = DataLoader () page = Page ( layout = Page . SimplePageLayout ) page . add ( kline ( data_loader , stock_id , start_date , end_date ), bar ( data_loader , stock_id , start_date , end_date ), line ( data_loader , stock_id , start_date , end_date ), pie ( data_loader , stock_id , start_date , end_date ), ) dashboard_html_path = str ( PATH . joinpath ( \"dashboard.html\" )) post_html_path = str ( PATH . joinpath ( \"post.html\" )) page . render ( dashboard_html_path ) post_html = open ( post_html_path , \"r\" , encoding = \"utf-8\" ) . read () dashboard_html = open ( dashboard_html_path , \"r\" , encoding = \"utf-8\" ) . read () html = post_html . replace ( \"DASHBOARD\" , dashboard_html ) with open ( dashboard_html_path , \"w\" , encoding = \"utf-8\" ) as e : e . write ( html ) \u7528 flask run web app = Flask ( __name__ , template_folder = str ( PATH )) @app . route ( \"/\" , methods = [ \"GET\" , \"POST\" ]) def submit (): if request . method == \"POST\" : stock_id = request . form . get ( \"stock_id\" ) start_date = request . form . get ( \"start_date\" ) end_date = request . form . get ( \"end_date\" ) logger . info ( stock_id ) dashboard ( stock_id = stock_id , start_date = start_date , end_date = end_date ) return render_template ( \"dashboard.html\" ) return render_template ( \"post.html\" ) app . run ( host = \"0.0.0.0\" , debug = True )","title":"\u5ba2\u88fd\u5316\u770b\u76e4\u5100\u8868\u677f"},{"location":"tutor/analysis/CustomerDashboardWebServer/#local-web","text":"K \u7dda from pathlib import Path from flask import Flask , render_template , request from loguru import logger from pyecharts.charts import Page import FinMind from FinMind import plotting from FinMind.data import DataLoader def get_path (): path = Path ( FinMind . __file__ ) path = path . parent . joinpath ( \"templates\" ) return path PATH = get_path () def kline ( data_loader : DataLoader , stock_id : str , start_date : str , end_date : str ): stock_data = data_loader . taiwan_stock_daily ( stock_id , start_date , end_date ) stock_data = data_loader . feature . add_kline_institutional_investors ( stock_data ) stock_data = data_loader . feature . add_kline_margin_purchase_short_sale ( stock_data ) # \u7e6a\u88fdk\u7dda\u5716 kline_plot = plotting . kline ( stock_data ) return kline_plot \u6708\u71df\u6536\u3001\u9577\u689d\u5716 def bar ( data_loader : DataLoader , stock_id : str , start_date : str , end_date : str ): df = data_loader . taiwan_stock_month_revenue ( stock_id = stock_id , start_date = start_date , end_date = end_date ) df [ \"labels\" ] = ( df [[ \"revenue_year\" , \"revenue_month\" ]] . astype ( str ) . apply ( lambda date : f \" { date [ 0 ] } - { date [ 1 ] } M\" , axis = 1 ) ) df [ \"series\" ] = df [ \"revenue\" ] . map ( lambda value : round ( value * 1e-8 , 2 )) bar_plot = plotting . bar ( labels = df [ \"labels\" ], series = df [ \"series\" ], title = \"\u6708\u71df\u6536\" , yaxis_color = \"orange\" , y_axis_name = \"\u5104\" , ) return bar_plot \u5916\u8cc7\u6301\u80a1\u6bd4\u4f8b\u3001\u7dda\u5716 def line ( data_loader : DataLoader , stock_id : str , start_date : str , end_date : str ): df = data_loader . taiwan_stock_shareholding ( stock_id = stock_id , start_date = start_date , end_date = end_date ) df [ \"series\" ] = df [ \"ForeignInvestmentSharesRatio\" ] . map ( lambda value : round ( value * 1e-2 , 2 ) ) df [ \"labels\" ] = df [ \"date\" ] line_plot = plotting . line ( labels = df [ \"labels\" ], series = df [ \"series\" ], title = \"\u5916\u8cc7\u6301\u80a1\u6bd4\u4f8b\" , yaxis_color = \"blue\" , y_axis_name = \"\" , ) return line_plot \u80a1\u6b0a\u5206\u6563\u8868\u3001\u5713\u9905\u5716 def pie ( data_loader : DataLoader , stock_id : str , start_date : str , end_date : str ): df = data_loader . taiwan_stock_holding_shares_per ( stock_id = stock_id , start_date = start_date , end_date = end_date ) df = df [ df [ \"date\" ] == max ( df [ \"date\" ])] df = df [ df [ \"HoldingSharesLevel\" ] != \"total\" ] df [ \"labels\" ] = df [ \"HoldingSharesLevel\" ] df [ \"series\" ] = df [ \"percent\" ] pie_plot = plotting . pie ( labels = df [ \"labels\" ], series = df [ \"series\" ], title = \"\u80a1\u6b0a\u5206\u6563\u8868\" ) return pie_plot \u5408\u4f75\u6210 dashboard def dashboard ( stock_id : str , start_date : str , end_date : str ): data_loader = DataLoader () page = Page ( layout = Page . SimplePageLayout ) page . add ( kline ( data_loader , stock_id , start_date , end_date ), bar ( data_loader , stock_id , start_date , end_date ), line ( data_loader , stock_id , start_date , end_date ), pie ( data_loader , stock_id , start_date , end_date ), ) dashboard_html_path = str ( PATH . joinpath ( \"dashboard.html\" )) post_html_path = str ( PATH . joinpath ( \"post.html\" )) page . render ( dashboard_html_path ) post_html = open ( post_html_path , \"r\" , encoding = \"utf-8\" ) . read () dashboard_html = open ( dashboard_html_path , \"r\" , encoding = \"utf-8\" ) . read () html = post_html . replace ( \"DASHBOARD\" , dashboard_html ) with open ( dashboard_html_path , \"w\" , encoding = \"utf-8\" ) as e : e . write ( html ) \u7528 flask run web app = Flask ( __name__ , template_folder = str ( PATH )) @app . route ( \"/\" , methods = [ \"GET\" , \"POST\" ]) def submit (): if request . method == \"POST\" : stock_id = request . form . get ( \"stock_id\" ) start_date = request . form . get ( \"start_date\" ) end_date = request . form . get ( \"end_date\" ) logger . info ( stock_id ) dashboard ( stock_id = stock_id , start_date = start_date , end_date = end_date ) return render_template ( \"dashboard.html\" ) return render_template ( \"post.html\" ) app . run ( host = \"0.0.0.0\" , debug = True )","title":"\u5ba2\u88fd\u5316\u770b\u76e4\u5100\u8868\u677f\u3001\u4e26\u5728 local \u67b6\u8a2d web"},{"location":"tutor/analysis/Kline/","text":"kbar_plotting.ipynb \u00b6 \u7e6a\u88fd K \u7dda # \u53d6\u5f97\u80a1\u50f9 from FinMind.data import DataLoader dl = DataLoader () # \u4e0b\u8f09\u53f0\u80a1\u80a1\u50f9\u8cc7\u6599 stock_data = dl . taiwan_stock_daily ( stock_id = '2609' , start_date = '2018-01-01' , end_date = '2021-06-26' ) # \u4e0b\u8f09\u4e09\u5927\u6cd5\u4eba\u8cc7\u6599 stock_data = dl . feature . add_kline_institutional_investors ( stock_data ) # \u4e0b\u8f09\u878d\u8cc7\u5238\u8cc7\u6599 stock_data = dl . feature . add_kline_margin_purchase_short_sale ( stock_data ) # \u7e6a\u88fdk\u7dda\u5716 from FinMind import plotting plotting . kline ( stock_data )","title":"K \u7dda"},{"location":"tutor/analysis/Kline/#kbar_plottingipynb","text":"\u7e6a\u88fd K \u7dda # \u53d6\u5f97\u80a1\u50f9 from FinMind.data import DataLoader dl = DataLoader () # \u4e0b\u8f09\u53f0\u80a1\u80a1\u50f9\u8cc7\u6599 stock_data = dl . taiwan_stock_daily ( stock_id = '2609' , start_date = '2018-01-01' , end_date = '2021-06-26' ) # \u4e0b\u8f09\u4e09\u5927\u6cd5\u4eba\u8cc7\u6599 stock_data = dl . feature . add_kline_institutional_investors ( stock_data ) # \u4e0b\u8f09\u878d\u8cc7\u5238\u8cc7\u6599 stock_data = dl . feature . add_kline_margin_purchase_short_sale ( stock_data ) # \u7e6a\u88fdk\u7dda\u5716 from FinMind import plotting plotting . kline ( stock_data )","title":"kbar_plotting.ipynb"},{"location":"tutor/analysis/RealTimeDataSubscription/","text":"\u5373\u6642\u5831\u50f9 \u00b6 \u5982\u4e0b\u7a0b\u5f0f\u8aaa\u660e\u5982\u4f55\u5728 \u76e4\u4e2d \u7372\u5f97\u5373\u6642\u5831\u50f9\uff0c\u4e3b\u8981\u900f\u904e DataSubscriber \u4f86\u9032\u884c\u8a02\u95b1\u548c\u9000\u8a02\u3002 DataSubscriber \u4e3b\u8981\u6709\u5206\u6e2c\u8a66\u6a21\u5f0f\u8ddf\u6b63\u5f0f\u6a21\u5f0f\uff0c\u900f\u904e testing \u8b8a\u6578\u4f86\u505a\u5207\u63db\u3002 - testing=True: \u6e2c\u8a66\u6a21\u5f0f - testing=False: \u6b63\u5f0f\u6a21\u5f0f \u6b63\u5f0f\u6a21\u5f0f\u4e2d\uff0c\u53ea\u6709\u5728\u958b\u76e4\u7684\u60c5\u6cc1\u4e0b\u624d\u6709\u8fa6\u6cd5\u63d0\u4f9b\u8cc7\u6599\u3002 \u5728\u7bc4\u4f8b\u7a0b\u5f0f\u4e2d\uff0c\u524d\u90e8\u5206\u4e3b\u8981\u8aaa\u660e\u8a02\u95b1\uff0c\u5f8c\u90e8\u5206\u4e3b\u8981\u8aaa\u660e\u9000\u8a02\u7684\u65b9\u5f0f\u3002 Demo code \u00b6 \u8a02\u95b1\u7bc4\u4f8b from FinMind.data import DataSubscriber from FinMind.data import Stock from FinMind.data import FutureAndOption ds = DataSubscriber ( testing = True ) # \u8a02\u95b1 2330 \u80a1\u7968 Tick \u8cc7\u6599 ds . subscribe ( \"2330\" , Stock . Tick ) # \u8a02\u95b1 2330 \u80a1\u7968\u4e94\u6a94\u5831\u50f9\u8cc7\u6599 ds . subscribe ( \"2330\" , Stock . BidAsk ) # \u8a02\u95b1 TXFF1 \u671f\u6b0a\u5831\u50f9 ds . subscribe ( \"TXFF1\" , FutureAndOption . Tick ) \u8a02\u95b1\u7bc4\u4f8b + \u81ea\u5b9a callback # \u81ea\u5b9a\u56de\u8abf\u51fd\u6578 def cb ( message ): stock_id = message . get ( \"stock_id\" , \"\" ) deal_price = message . get ( \"deal_price\" , \"\" ) volume = message . get ( \"volume\" , \"\" ) time = message . get ( \"Time\" , \"\" ) tick_type = message . get ( \"TickType\" , \"\" ) print ( f \"stock_id: { stock_id } , deal_price: { deal_price } , volume: { volume } , time: { time } , tick_type: { tick_type } \" ) # \u8a02\u95b1 2330 \u80a1\u7968 Tick \u8cc7\u6599\uff0c\u4f7f\u7528\u5ba2\u88fd\u5316\u56de\u8abf\u51fd\u6578 ds . subscribe ( \"2330\" , Stock . Tick , cb ) # \u8a02\u95b1 2330 \u80a1\u7968\u4e94\u6a94\u5831\u50f9\u8cc7\u6599\uff0c\u4f7f\u7528\u5ba2\u88fd\u5316\u56de\u8abf\u51fd\u6578 ds . subscribe ( \"2330\" , Stock . BidAsk , cb ) # \u8a02\u95b1 TXFF1 \u671f\u6b0a\u5831\u50f9\uff0c\u4f7f\u7528\u5ba2\u88fd\u5316\u56de\u8abf\u51fd\u6578 ds . subscribe ( \"TXFF1\" , FutureAndOption . Tick , cb ) \u9000\u8a02\u7bc4\u4f8b # \u53d6\u6d88 2330 \u80a1\u7968 Tick \u8cc7\u6599\u8a02\u95b1 ds . unsubscribe ( \"2330\" , Stock . Tick ) # \u95dc\u9589\u6240\u6709\u8a02\u95b1 ds . close ()","title":"\u5373\u6642\u5831\u50f9"},{"location":"tutor/analysis/RealTimeDataSubscription/#_1","text":"\u5982\u4e0b\u7a0b\u5f0f\u8aaa\u660e\u5982\u4f55\u5728 \u76e4\u4e2d \u7372\u5f97\u5373\u6642\u5831\u50f9\uff0c\u4e3b\u8981\u900f\u904e DataSubscriber \u4f86\u9032\u884c\u8a02\u95b1\u548c\u9000\u8a02\u3002 DataSubscriber \u4e3b\u8981\u6709\u5206\u6e2c\u8a66\u6a21\u5f0f\u8ddf\u6b63\u5f0f\u6a21\u5f0f\uff0c\u900f\u904e testing \u8b8a\u6578\u4f86\u505a\u5207\u63db\u3002 - testing=True: \u6e2c\u8a66\u6a21\u5f0f - testing=False: \u6b63\u5f0f\u6a21\u5f0f \u6b63\u5f0f\u6a21\u5f0f\u4e2d\uff0c\u53ea\u6709\u5728\u958b\u76e4\u7684\u60c5\u6cc1\u4e0b\u624d\u6709\u8fa6\u6cd5\u63d0\u4f9b\u8cc7\u6599\u3002 \u5728\u7bc4\u4f8b\u7a0b\u5f0f\u4e2d\uff0c\u524d\u90e8\u5206\u4e3b\u8981\u8aaa\u660e\u8a02\u95b1\uff0c\u5f8c\u90e8\u5206\u4e3b\u8981\u8aaa\u660e\u9000\u8a02\u7684\u65b9\u5f0f\u3002","title":"\u5373\u6642\u5831\u50f9"},{"location":"tutor/analysis/RealTimeDataSubscription/#demo-code","text":"\u8a02\u95b1\u7bc4\u4f8b from FinMind.data import DataSubscriber from FinMind.data import Stock from FinMind.data import FutureAndOption ds = DataSubscriber ( testing = True ) # \u8a02\u95b1 2330 \u80a1\u7968 Tick \u8cc7\u6599 ds . subscribe ( \"2330\" , Stock . Tick ) # \u8a02\u95b1 2330 \u80a1\u7968\u4e94\u6a94\u5831\u50f9\u8cc7\u6599 ds . subscribe ( \"2330\" , Stock . BidAsk ) # \u8a02\u95b1 TXFF1 \u671f\u6b0a\u5831\u50f9 ds . subscribe ( \"TXFF1\" , FutureAndOption . Tick ) \u8a02\u95b1\u7bc4\u4f8b + \u81ea\u5b9a callback # \u81ea\u5b9a\u56de\u8abf\u51fd\u6578 def cb ( message ): stock_id = message . get ( \"stock_id\" , \"\" ) deal_price = message . get ( \"deal_price\" , \"\" ) volume = message . get ( \"volume\" , \"\" ) time = message . get ( \"Time\" , \"\" ) tick_type = message . get ( \"TickType\" , \"\" ) print ( f \"stock_id: { stock_id } , deal_price: { deal_price } , volume: { volume } , time: { time } , tick_type: { tick_type } \" ) # \u8a02\u95b1 2330 \u80a1\u7968 Tick \u8cc7\u6599\uff0c\u4f7f\u7528\u5ba2\u88fd\u5316\u56de\u8abf\u51fd\u6578 ds . subscribe ( \"2330\" , Stock . Tick , cb ) # \u8a02\u95b1 2330 \u80a1\u7968\u4e94\u6a94\u5831\u50f9\u8cc7\u6599\uff0c\u4f7f\u7528\u5ba2\u88fd\u5316\u56de\u8abf\u51fd\u6578 ds . subscribe ( \"2330\" , Stock . BidAsk , cb ) # \u8a02\u95b1 TXFF1 \u671f\u6b0a\u5831\u50f9\uff0c\u4f7f\u7528\u5ba2\u88fd\u5316\u56de\u8abf\u51fd\u6578 ds . subscribe ( \"TXFF1\" , FutureAndOption . Tick , cb ) \u9000\u8a02\u7bc4\u4f8b # \u53d6\u6d88 2330 \u80a1\u7968 Tick \u8cc7\u6599\u8a02\u95b1 ds . unsubscribe ( \"2330\" , Stock . Tick ) # \u95dc\u9589\u6240\u6709\u8a02\u95b1 ds . close ()","title":"Demo code"},{"location":"tutor/analysis/SnapshotTreemap/","text":"\u9810\u671f\u57f7\u884c\u7d50\u679c\u5982\u4e0b\uff08\u5df2\u5728\u7a0b\u5f0f\u78bc 136 \u884c\uff0c\u52a0\u5165 html \u8a9e\u6cd5\uff0c\u7db2\u9801\u6703\u81ea\u52d5\u66f4\u65b0\uff09 \u00b6 \u5982\u4f55\u57f7\u884c\uff1f \u00b6 \u5c07\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\uff0c\u5132\u5b58\u70ba\uff0c FinMind - \u53f0\u80a1\u200a-\u200a\u5373\u6642\u8cc7\u8a0a X \u7248\u584a\u5716 X flask.py \u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4 FINMIND_API_TOKEN = your_token python FinMind - \u53f0\u80a1 \u200a - \u200a \u5373\u6642\u8cc7\u8a0a X \u7248\u584a\u5716 X flask . py \u7a0b\u5f0f\u78bc\u5982\u4e0b \u00b6 REF \u00b6 medium","title":"\u5373\u6642\u80a1\u5e02\u8cc7\u8a0a X \u677f\u584a\u5716"},{"location":"tutor/analysis/SnapshotTreemap/#136-html","text":"","title":"\u9810\u671f\u57f7\u884c\u7d50\u679c\u5982\u4e0b\uff08\u5df2\u5728\u7a0b\u5f0f\u78bc 136 \u884c\uff0c\u52a0\u5165 html \u8a9e\u6cd5\uff0c\u7db2\u9801\u6703\u81ea\u52d5\u66f4\u65b0\uff09"},{"location":"tutor/analysis/SnapshotTreemap/#_1","text":"\u5c07\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\uff0c\u5132\u5b58\u70ba\uff0c FinMind - \u53f0\u80a1\u200a-\u200a\u5373\u6642\u8cc7\u8a0a X \u7248\u584a\u5716 X flask.py \u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4 FINMIND_API_TOKEN = your_token python FinMind - \u53f0\u80a1 \u200a - \u200a \u5373\u6642\u8cc7\u8a0a X \u7248\u584a\u5716 X flask . py","title":"\u5982\u4f55\u57f7\u884c\uff1f"},{"location":"tutor/analysis/SnapshotTreemap/#_2","text":"","title":"\u7a0b\u5f0f\u78bc\u5982\u4e0b"},{"location":"tutor/analysis/SnapshotTreemap/#ref","text":"medium","title":"REF"}]}