{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9019\u662f\u4ec0\u9ebc? \u00b6 FinMind \u63d0\u4f9b\u4ee5\u53f0\u80a1\u70ba\u4e3b\uff0c\u8d85\u904e 50 \u7a2e\u91d1\u878d\u958b\u6e90\u6578\u64da( open data )\uff0c\u5e0c\u671b\u8b93\u5927\u6578\u64da\u3001\u8cc7\u6599\u5206\u6790\uff0c\u6e1b\u5c11\u8cc7\u6599\u6536\u96c6\u7684\u9580\u6abb\u3002 \u6280\u8853\u9762 : \u53f0\u80a1\u80a1\u50f9 daily\u3001\u5373\u6642\u5831\u50f9\u3001\u5373\u6642\u6700\u4f73\u4e94\u6a94\u3001PER\u3001PBR\u3001\u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08\u3001\u53f0\u80a1\u52a0\u6b0a\u6307\u6578\u3002 \u57fa\u672c\u9762 : \u7d9c\u5408\u640d\u76ca\u8868\u3001\u73fe\u91d1\u6d41\u91cf\u8868\u3001\u8cc7\u7522\u8ca0\u50b5\u8868\u3001\u80a1\u5229\u653f\u7b56\u8868\u3001\u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868\u3001\u6708\u71df\u6536\u3002 \u7c4c\u78bc\u9762 : \u5916\u8cc7\u6301\u80a1\u3001\u80a1\u6b0a\u5206\u6563\u8868\u3001\u878d\u8cc7\u878d\u5238\u3001\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3\u3001\u501f\u5238\u6210\u4ea4\u660e\u7d30\u3002 \u6d88\u606f\u9762 : \u53f0\u80a1\u76f8\u95dc\u65b0\u805e\u3002 \u884d\u751f\u6027\u5546\u54c1 : \u671f\u8ca8\u3001\u9078\u64c7\u6b0a daily data\u3001\u5373\u6642\u5831\u50f9\u3001\u4ea4\u6613\u660e\u7d30\u3002 \u570b\u969b\u5e02\u5834 : \u7f8e\u80a1\u80a1\u50f9 daily\u3001minute\u3001\u7f8e\u570b\u50b5\u5238\u6b96\u5229\u7387\u3001\u8ca8\u5e63\u767c\u884c\u91cf(\u7f8e\u570b)\u3001\u9ec3\u91d1\u50f9\u683c\u3001\u539f\u6cb9\u50f9\u683c\u3001G8 \u592e\u884c\u5229\u7387\u3001G8 \u532f\u7387\u3001 \u8cc7\u6599\u6bcf\u5929\u66f4\u65b0\u3002\u4f60\u4e0d\u9700\u6536\u96c6\u8cc7\u6599\uff0c\u5c31\u53ef\u9032\u884c\u5206\u6790\u3002\u672a\u4f86\u5c07\u6301\u7e8c\u65b0\u589e\u66f4\u591a data\u3002 What is it? \u00b6 FinMind is open source of more than 50 datasets , contain Taiwan stock trade data daily\u3001tick, Financial Statements, Balance Sheet, Cash Flows Statement, Month Revenue, Holding Shares Per, Institutional Investors Buy Sell. Taiwan Futures Trade Detail, Taiwan Option Trade Detail. US stock price daily, minute ( 2019-06-01 ~ now, total more than 80 million data ), oil price, gold price, G7 exchange rate, interest rate. US Government Bonds Yield. The datasets are automatically updated daily. You can analyze financial data without having to collect the data by yourself.","title":"\u7e3d\u89bd"},{"location":"#_1","text":"FinMind \u63d0\u4f9b\u4ee5\u53f0\u80a1\u70ba\u4e3b\uff0c\u8d85\u904e 50 \u7a2e\u91d1\u878d\u958b\u6e90\u6578\u64da( open data )\uff0c\u5e0c\u671b\u8b93\u5927\u6578\u64da\u3001\u8cc7\u6599\u5206\u6790\uff0c\u6e1b\u5c11\u8cc7\u6599\u6536\u96c6\u7684\u9580\u6abb\u3002 \u6280\u8853\u9762 : \u53f0\u80a1\u80a1\u50f9 daily\u3001\u5373\u6642\u5831\u50f9\u3001\u5373\u6642\u6700\u4f73\u4e94\u6a94\u3001PER\u3001PBR\u3001\u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08\u3001\u53f0\u80a1\u52a0\u6b0a\u6307\u6578\u3002 \u57fa\u672c\u9762 : \u7d9c\u5408\u640d\u76ca\u8868\u3001\u73fe\u91d1\u6d41\u91cf\u8868\u3001\u8cc7\u7522\u8ca0\u50b5\u8868\u3001\u80a1\u5229\u653f\u7b56\u8868\u3001\u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868\u3001\u6708\u71df\u6536\u3002 \u7c4c\u78bc\u9762 : \u5916\u8cc7\u6301\u80a1\u3001\u80a1\u6b0a\u5206\u6563\u8868\u3001\u878d\u8cc7\u878d\u5238\u3001\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3\u3001\u501f\u5238\u6210\u4ea4\u660e\u7d30\u3002 \u6d88\u606f\u9762 : \u53f0\u80a1\u76f8\u95dc\u65b0\u805e\u3002 \u884d\u751f\u6027\u5546\u54c1 : \u671f\u8ca8\u3001\u9078\u64c7\u6b0a daily data\u3001\u5373\u6642\u5831\u50f9\u3001\u4ea4\u6613\u660e\u7d30\u3002 \u570b\u969b\u5e02\u5834 : \u7f8e\u80a1\u80a1\u50f9 daily\u3001minute\u3001\u7f8e\u570b\u50b5\u5238\u6b96\u5229\u7387\u3001\u8ca8\u5e63\u767c\u884c\u91cf(\u7f8e\u570b)\u3001\u9ec3\u91d1\u50f9\u683c\u3001\u539f\u6cb9\u50f9\u683c\u3001G8 \u592e\u884c\u5229\u7387\u3001G8 \u532f\u7387\u3001 \u8cc7\u6599\u6bcf\u5929\u66f4\u65b0\u3002\u4f60\u4e0d\u9700\u6536\u96c6\u8cc7\u6599\uff0c\u5c31\u53ef\u9032\u884c\u5206\u6790\u3002\u672a\u4f86\u5c07\u6301\u7e8c\u65b0\u589e\u66f4\u591a data\u3002","title":"\u9019\u662f\u4ec0\u9ebc?"},{"location":"#what-is-it","text":"FinMind is open source of more than 50 datasets , contain Taiwan stock trade data daily\u3001tick, Financial Statements, Balance Sheet, Cash Flows Statement, Month Revenue, Holding Shares Per, Institutional Investors Buy Sell. Taiwan Futures Trade Detail, Taiwan Option Trade Detail. US stock price daily, minute ( 2019-06-01 ~ now, total more than 80 million data ), oil price, gold price, G7 exchange rate, interest rate. US Government Bonds Yield. The datasets are automatically updated daily. You can analyze financial data without having to collect the data by yourself.","title":"What is it?"},{"location":"Contact/","text":"Chat: \u00b6 Issue: GitHub \u00b6 other: FinMind.TW@gmail.com \u00b6","title":"\u806f\u7d61\u6211\u5011"},{"location":"Contact/#chat","text":"","title":"Chat:"},{"location":"Contact/#issue-github","text":"","title":"Issue: GitHub"},{"location":"Contact/#other-finmindtwgmailcom","text":"","title":"other: FinMind.TW@gmail.com"},{"location":"Donate/","text":"\u8d0a\u52a9\u6211\u5011\u767c\u5c55\u66f4\u591a\u529f\u80fd (\u91d1\u984d\u7531\u4f60\u6c7a\u5b9a) \u00b6","title":"\u8d0a\u52a9\u6211\u5011"},{"location":"Donate/#_1","text":"","title":"\u8d0a\u52a9\u6211\u5011\u767c\u5c55\u66f4\u591a\u529f\u80fd (\u91d1\u984d\u7531\u4f60\u6c7a\u5b9a)"},{"location":"License/","text":"License \u00b6 \u8cc7\u6599\u4f86\u6e90: \u8b49\u4ea4\u6240 , \u6ac3\u8cb7\u4e2d\u5fc3 , \u516c\u958b\u8cc7\u8a0a\u89c0\u6e2c\u7ad9 , \u671f\u4ea4\u6240 \u3002 \u00b6 \u672c\u5c08\u6848\u63d0\u4f9b\u7684\u6240\u6709\u5167\u5bb9\u5747\u7528\u65bc\u6559\u80b2\u3001\u975e\u5546\u696d\u7528\u9014\u3002\u8cc7\u6599\u50c5\u4f9b\u53c3\u8003\uff0c\u4f7f\u7528\u8005\u4f9d\u672c\u8cc7\u6599\u4ea4\u6613\u767c\u751f\u4ea4\u6613\u640d\u5931\u9700\u81ea\u884c\u8ca0\u8cac\uff0c\u672c\u5c08\u6848\u4e0d\u5c0d\u8cc7\u6599\u5167\u5bb9\u932f\u8aa4\u3001\u66f4\u65b0\u5ef6\u8aa4\u6216\u50b3\u8f38\u4e2d\u65b7\u8ca0\u4efb\u4f55\u8cac\u4efb\u3002 \u00b6","title":"\u4f7f\u7528\u689d\u6b3e"},{"location":"License/#license","text":"","title":"License"},{"location":"License/#_1","text":"","title":"\u8cc7\u6599\u4f86\u6e90: \u8b49\u4ea4\u6240, \u6ac3\u8cb7\u4e2d\u5fc3, \u516c\u958b\u8cc7\u8a0a\u89c0\u6e2c\u7ad9, \u671f\u4ea4\u6240\u3002"},{"location":"License/#_2","text":"","title":"\u672c\u5c08\u6848\u63d0\u4f9b\u7684\u6240\u6709\u5167\u5bb9\u5747\u7528\u65bc\u6559\u80b2\u3001\u975e\u5546\u696d\u7528\u9014\u3002\u8cc7\u6599\u50c5\u4f9b\u53c3\u8003\uff0c\u4f7f\u7528\u8005\u4f9d\u672c\u8cc7\u6599\u4ea4\u6613\u767c\u751f\u4ea4\u6613\u640d\u5931\u9700\u81ea\u884c\u8ca0\u8cac\uff0c\u672c\u5c08\u6848\u4e0d\u5c0d\u8cc7\u6599\u5167\u5bb9\u932f\u8aa4\u3001\u66f4\u65b0\u5ef6\u8aa4\u6216\u50b3\u8f38\u4e2d\u65b7\u8ca0\u4efb\u4f55\u8cac\u4efb\u3002"},{"location":"WhatIsNew/","text":"2020-05-06 \u00b6 \u65b0\u589e \u501f\u5238\u6210\u4ea4\u660e\u7d30 SecuritiesLending \u65b0\u589e \u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 StockStatisticsOfOrderBookAndTrade 2020-05-01 \u00b6 \u65b0\u589e \u53f0\u80a1\u671f\u8ca8 daily data \u65b0\u589e \u53f0\u80a1\u9078\u64c7\u6b0a daily data 2020-04-24 \u00b6 \u65b0\u589e \u53f0\u80a1\u5373\u6642\u6700\u4f73\u4e94\u6a94 \u65b0\u589e \u53f0\u80a1\u671f\u8ca8\u5373\u6642\u5831\u50f9 2020-04-15 \u00b6 \u65b0\u589e document \u65b0\u589e \u53f0\u80a1\u5373\u6642\u80a1\u50f9 \u65b0\u589e \u7f8e\u570b\u50b5\u5238\u6b96\u5229\u7387 \u65b0\u589e \u53f0\u7063\u500b\u80a1PER\u3001PBR\u8cc7\u6599\u8868 TaiwanStockPER 2019-10-23 \u00b6 \u65b0\u589e TotalMarginPurchaseShortSale \u7576\u5929\u7e3d\u9ad4\u878d\u8cc7\u878d\u5238\u8cb7\u8ce3 \u65b0\u589e TaiwanStockNews \u53f0\u80a1\u76f8\u95dc\u65b0\u805e 2019-10-10 \u00b6 \u65b0\u589e TaiwanFutures \u53f0\u80a1\u671f\u8ca8\u4ea4\u6613\u660e\u7d30 \u65b0\u589e TaiwanOption \u53f0\u80a1\u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30 FinMind 1.0.80 (2019-07-15) \u00b6 \u91cd\u5927\u66f4\u65b0\uff0c\u904e\u53bb\u662f\u76f4\u63a5\u9023 DataBase\uff0c\u76ee\u524d\u6539\u8d70 api \u65b9\u5f0f\uff0c\u672a\u4f86\u820a\u7248 package \u5c07\u6703\u5931\u6548\uff0c\u7121\u6cd5\u76f4\u63a5\u9023 DataBase\u3002\u8acb\u66f4\u65b0\u5230\u6700\u65b0\u7248\u672c\uff0c\u6216\u662f\u76f4\u63a5\u8d70 api\u3002 FinMind 1.0.70 (2019-06-23) \u00b6 add api add function Mind.MoveAverage , e.g : Mind . MoveAverage ( _2330 . StockPrice , days = 5 , variable = 'close' ) add function Mind.RSV , e.g : Mind.RSV(_2330.StockPrice,days = 5) add function Mind.BIAS , e.g : Mind.BIAS(_2330.StockPrice,days = 5) FinMind 1.0.60 (2019-05-24) \u00b6 New data TaiwanStockMonthRevenue from FinMind.Data import Load TaiwanStockMonthRevenue = Load . FinData ( dataset = 'TaiwanStockMonthRevenue' , select = '2330' , date = '2018-01-01' ) Market index: TSEC weighted index ( Taiwan weighted index ) : stock_id - ^TWII SP500 : stock_id - ^GSPC Dow Jones Industrial Average : stock_id - ^DJI FinMind 1.0.57 (2019-04-28) \u00b6 Change taiwan stock id, delete TWO and TW. ( eg. 2330.TW -> 2330 ) FinMind 1.0.54 (2019-04-13) \u00b6 Optimize speeds of loading TaiwanStockPrice, USStockPrice Add DataSource FinMind 1.0.53 (2019-04-07) \u00b6 Fix FinMind.Data.Load \u00b6 optimize speeds of loading data , ex : from FinMind.Data import Load import datetime TaiwanStockInfo = Load . FinData ( dataset = 'TaiwanStockInfo' ) s = datetime . datetime . now () TaiwanStockFinancialStatements = Load . FinData ( dataset = 'FinancialStatements' , select = list ( TaiwanStockInfo [ 'stock_id' ]), date = '2018-12-01' ) t = datetime . datetime . now () - s print ( t ) 0 : 00 : 01.861724 FinMind 1.0.52 (2019-04-06) \u00b6 New Data \u00b6 BalanceSheet ( Taiwan \u8cc7\u7522\u8ca0\u50b5\u8868 ) TaiwanStockHoldingSharesPer ( Taiwan \u80a1\u6b0a\u5206\u6563\u8868 ) Shareholding ( Taiwan \u500b\u80a1\u5916\u8cc7\u6301\u80a1 ) RawMaterialFuturesPrices ( \u7f8e\u570b\u539f\u7269\u6599\u671f\u8ca8 ) New Function \u00b6 transpose(data) demp2.py 2018/8/5 \u00b6 \u592e\u884c\u5229\u7387 100% ( 13 Countrys, Contains G8 ) FED Federal Reserve System \u7f8e\u570b ECB European Central Bank \u6b50\u6d32 BOE Bank of England \u82f1\u570b SNB Swiss National Bank \u745e\u58eb RBA Reserve Bank of Australia \u6fb3\u6d32 BOC Bank of Canada \u52a0\u62ff\u5927 RBNZ Reserve Bank of New Zealand \u7d10\u897f\u862d BOJ Bank of Japan \u65e5\u672c CBR The Central Bank of the Russian Federation \u4fc4\u7f85\u65af RBI Reserve Bank of India \u5370\u5ea6 PBOC People's Bank of China \u4e2d\u570b BCB Banco Central do Brasil \u5df4\u897f Gold Price 100% Government bond ->>> https://data.oecd.org/interest/long-term-interest-rates.htm \u671f\u8ca8 ->>> https://www.investing.com/commodities/energies S&P 500\u6307\u6578\uff0c\u4e26\u722c\u53d6\u8a72 500 \u5bb6\u80a1\u7968\u80a1\u50f9 ->>> 2018/7/5 \u00b6 \u570b\u969b\u6cb9\u50f9 \u8b80\u53d6\u7bc4\u4f8b Load data example. (100%) \u5404\u570b\u532f\u7387 ( 53 Countrys, Contains G8 ) (100%) 2018/7/2 \u672a\u4f86\u722c\u87f2\u9806\u5e8f \u00b6 \u592e\u884c\u5229\u7387 from https://tradingeconomics.com/search.aspx?q=Interest%20Rate Inflation (\u901a\u8ca8\u81a8\u8139) monthly from https://tradingeconomics.com/russia/inflation-cpi Consumer Price Index (CPI) monthly from https://tradingeconomics.com/russia/consumer-price-index-cpi Output Gap monthly from https://tradingeconomics.com/russia/gdp-deflator S&P 500 from yahoo finance \u9ec3\u91d1\u50f9\u683c from https://www.gold.org/data/gold-price","title":"What's New"},{"location":"WhatIsNew/#2020-05-06","text":"\u65b0\u589e \u501f\u5238\u6210\u4ea4\u660e\u7d30 SecuritiesLending \u65b0\u589e \u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 StockStatisticsOfOrderBookAndTrade","title":"2020-05-06"},{"location":"WhatIsNew/#2020-05-01","text":"\u65b0\u589e \u53f0\u80a1\u671f\u8ca8 daily data \u65b0\u589e \u53f0\u80a1\u9078\u64c7\u6b0a daily data","title":"2020-05-01"},{"location":"WhatIsNew/#2020-04-24","text":"\u65b0\u589e \u53f0\u80a1\u5373\u6642\u6700\u4f73\u4e94\u6a94 \u65b0\u589e \u53f0\u80a1\u671f\u8ca8\u5373\u6642\u5831\u50f9","title":"2020-04-24"},{"location":"WhatIsNew/#2020-04-15","text":"\u65b0\u589e document \u65b0\u589e \u53f0\u80a1\u5373\u6642\u80a1\u50f9 \u65b0\u589e \u7f8e\u570b\u50b5\u5238\u6b96\u5229\u7387 \u65b0\u589e \u53f0\u7063\u500b\u80a1PER\u3001PBR\u8cc7\u6599\u8868 TaiwanStockPER","title":"2020-04-15"},{"location":"WhatIsNew/#2019-10-23","text":"\u65b0\u589e TotalMarginPurchaseShortSale \u7576\u5929\u7e3d\u9ad4\u878d\u8cc7\u878d\u5238\u8cb7\u8ce3 \u65b0\u589e TaiwanStockNews \u53f0\u80a1\u76f8\u95dc\u65b0\u805e","title":"2019-10-23"},{"location":"WhatIsNew/#2019-10-10","text":"\u65b0\u589e TaiwanFutures \u53f0\u80a1\u671f\u8ca8\u4ea4\u6613\u660e\u7d30 \u65b0\u589e TaiwanOption \u53f0\u80a1\u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30","title":"2019-10-10"},{"location":"WhatIsNew/#finmind-1080-2019-07-15","text":"\u91cd\u5927\u66f4\u65b0\uff0c\u904e\u53bb\u662f\u76f4\u63a5\u9023 DataBase\uff0c\u76ee\u524d\u6539\u8d70 api \u65b9\u5f0f\uff0c\u672a\u4f86\u820a\u7248 package \u5c07\u6703\u5931\u6548\uff0c\u7121\u6cd5\u76f4\u63a5\u9023 DataBase\u3002\u8acb\u66f4\u65b0\u5230\u6700\u65b0\u7248\u672c\uff0c\u6216\u662f\u76f4\u63a5\u8d70 api\u3002","title":"FinMind 1.0.80 (2019-07-15)"},{"location":"WhatIsNew/#finmind-1070-2019-06-23","text":"add api add function Mind.MoveAverage , e.g : Mind . MoveAverage ( _2330 . StockPrice , days = 5 , variable = 'close' ) add function Mind.RSV , e.g : Mind.RSV(_2330.StockPrice,days = 5) add function Mind.BIAS , e.g : Mind.BIAS(_2330.StockPrice,days = 5)","title":"FinMind 1.0.70 (2019-06-23)"},{"location":"WhatIsNew/#finmind-1060-2019-05-24","text":"New data TaiwanStockMonthRevenue from FinMind.Data import Load TaiwanStockMonthRevenue = Load . FinData ( dataset = 'TaiwanStockMonthRevenue' , select = '2330' , date = '2018-01-01' ) Market index: TSEC weighted index ( Taiwan weighted index ) : stock_id - ^TWII SP500 : stock_id - ^GSPC Dow Jones Industrial Average : stock_id - ^DJI","title":"FinMind 1.0.60 (2019-05-24)"},{"location":"WhatIsNew/#finmind-1057-2019-04-28","text":"Change taiwan stock id, delete TWO and TW. ( eg. 2330.TW -> 2330 )","title":"FinMind 1.0.57 (2019-04-28)"},{"location":"WhatIsNew/#finmind-1054-2019-04-13","text":"Optimize speeds of loading TaiwanStockPrice, USStockPrice Add DataSource","title":"FinMind 1.0.54 (2019-04-13)"},{"location":"WhatIsNew/#finmind-1053-2019-04-07","text":"","title":"FinMind 1.0.53 (2019-04-07)"},{"location":"WhatIsNew/#fix-finminddataload","text":"optimize speeds of loading data , ex : from FinMind.Data import Load import datetime TaiwanStockInfo = Load . FinData ( dataset = 'TaiwanStockInfo' ) s = datetime . datetime . now () TaiwanStockFinancialStatements = Load . FinData ( dataset = 'FinancialStatements' , select = list ( TaiwanStockInfo [ 'stock_id' ]), date = '2018-12-01' ) t = datetime . datetime . now () - s print ( t ) 0 : 00 : 01.861724","title":"Fix FinMind.Data.Load"},{"location":"WhatIsNew/#finmind-1052-2019-04-06","text":"","title":"FinMind 1.0.52 (2019-04-06)"},{"location":"WhatIsNew/#new-data","text":"BalanceSheet ( Taiwan \u8cc7\u7522\u8ca0\u50b5\u8868 ) TaiwanStockHoldingSharesPer ( Taiwan \u80a1\u6b0a\u5206\u6563\u8868 ) Shareholding ( Taiwan \u500b\u80a1\u5916\u8cc7\u6301\u80a1 ) RawMaterialFuturesPrices ( \u7f8e\u570b\u539f\u7269\u6599\u671f\u8ca8 )","title":"New Data"},{"location":"WhatIsNew/#new-function","text":"transpose(data) demp2.py","title":"New Function"},{"location":"WhatIsNew/#201885","text":"\u592e\u884c\u5229\u7387 100% ( 13 Countrys, Contains G8 ) FED Federal Reserve System \u7f8e\u570b ECB European Central Bank \u6b50\u6d32 BOE Bank of England \u82f1\u570b SNB Swiss National Bank \u745e\u58eb RBA Reserve Bank of Australia \u6fb3\u6d32 BOC Bank of Canada \u52a0\u62ff\u5927 RBNZ Reserve Bank of New Zealand \u7d10\u897f\u862d BOJ Bank of Japan \u65e5\u672c CBR The Central Bank of the Russian Federation \u4fc4\u7f85\u65af RBI Reserve Bank of India \u5370\u5ea6 PBOC People's Bank of China \u4e2d\u570b BCB Banco Central do Brasil \u5df4\u897f Gold Price 100% Government bond ->>> https://data.oecd.org/interest/long-term-interest-rates.htm \u671f\u8ca8 ->>> https://www.investing.com/commodities/energies S&P 500\u6307\u6578\uff0c\u4e26\u722c\u53d6\u8a72 500 \u5bb6\u80a1\u7968\u80a1\u50f9 ->>>","title":"2018/8/5"},{"location":"WhatIsNew/#201875","text":"\u570b\u969b\u6cb9\u50f9 \u8b80\u53d6\u7bc4\u4f8b Load data example. (100%) \u5404\u570b\u532f\u7387 ( 53 Countrys, Contains G8 ) (100%)","title":"2018/7/5"},{"location":"WhatIsNew/#201872","text":"\u592e\u884c\u5229\u7387 from https://tradingeconomics.com/search.aspx?q=Interest%20Rate Inflation (\u901a\u8ca8\u81a8\u8139) monthly from https://tradingeconomics.com/russia/inflation-cpi Consumer Price Index (CPI) monthly from https://tradingeconomics.com/russia/consumer-price-index-cpi Output Gap monthly from https://tradingeconomics.com/russia/gdp-deflator S&P 500 from yahoo finance \u9ec3\u91d1\u50f9\u683c from https://www.gold.org/data/gold-price","title":"2018/7/2 \u672a\u4f86\u722c\u87f2\u9806\u5e8f"},{"location":"quickstart/","text":"Quick start with FinMind Finance data API \u00b6 \u5e0c\u671b\u900f\u904e\u5982\u4e0b\u8aaa\u660e\uff0c\u53ef\u4ee5\u5feb\u901f\u4e86\u89e3 FinMind data api \u4f7f\u7528\u65b9\u5f0f note \u6d41\u91cf\u9650\u5236 \u9650\u5236 request \u4e0a\u9650 : 600/hour\u3002Limit amount of request, 600/hour. \u81f3 FinMind \u8a3b\u518a\u4e26\u9a57\u8b49\u4fe1\u7bb1\u5f8c\uff0crequest api add user_id, password \u53c3\u6578\uff0c\u4f7f\u7528\u4e0a\u9650\u53ef\u63d0\u9ad8\u5230 1500/hr\u3002 FinMind data api \u4e3b\u8981\u6709\u56db\u7a2e\u985e\u578b API \u00b6 \u767b\u5165 API \u767b\u5165\u7372\u5f97 token\uff0c\u4e26\u5728\u62ff\u53d6\u8cc7\u6599\u6642\uff0c\u5e36 token\uff0c\u53ef\u589e\u52a0\u4f7f\u7528\u9650\u5236 https://api.finmindtrade.com/api/v4/login \u7372\u53d6\u8cc7\u6599 API \u6839\u64da\u4f60\u60f3\u4f7f\u7528\u7684\u8cc7\u6599\u96c6\u4f86\u7372\u53d6\u8cc7\u6599\uff0c\u4f8b\u5982\u60f3\u8981\u67e5\u8a62\u53f0\u7063\u80a1\u7968\u5e02\u5834\u500b\u80a1\u7684\u50f9\u683c\uff0c\u5c31\u53ef\u4ee5\u900f\u904e TaiwanStockPrice \u8cc7\u6599\u96c6\u4f86\u67e5\u8a62 https://api.finmindtrade.com/api/v4/data \u67e5\u8a62\u8cc7\u6599\u53c3\u6578\u6e05\u55ae API \u6bcf\u500b\u8cc7\u6599\u96c6\u90fd\u6703\u6709\u4e00\u4e9b\u53c3\u6578\u9700\u8981\u4f5c\u9078\u64c7\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u53c3\u6578\u6578\u503c\u6709\u54ea\u4e9b\u53ef\u4ee5\u505a\u9078\u64c7\uff0c \u53ef\u4ee5\u4f7f\u7528\u9019\u500b API \u4f86\u5e6b\u52a9\u4f60\u4e86\u89e3\uff0c\u4f8b\u5982\u4f60\u4e0d\u77e5\u9053\u532f\u7387\u8cc7\u6599\u6709\u54ea\u4e9b\u5e63\u5225\uff0c \u53ea\u8981\u8cc7\u6599\u96c6\u9078\u64c7 TaiwanExchangeRate \u5c31\u53ef\u4ee5\u900f\u904e\u9019 API \u4f86\u67e5\u8a62\u76ee\u524d\u8ddf\u53f0\u5e63\u514c\u63db\u7684\u5e63\u5225 https://api.finmindtrade.com/api/v4/datalist \u67e5\u8a62\u6b04\u4f4d\u540d\u7a31\u4e2d\u82f1\u5c0d\u7167 API \u6709\u4e9b\u8cc7\u6599\u96c6\u6b04\u4f4d\u540d\u7a31\u53ef\u80fd\u53ea\u6709\u82f1\u6587\u800c\u4e14\u540d\u7a31\u76f8\u5c0d\u8907\u96dc\u96e3\u61c2\uff0c\u53ef\u4ee5\u900f\u904e\u9019 API \u4f86\u67e5\u8a62\u5176\u4e2d\u6587\u540d\u7a31\uff0c \u4f8b\u5982\u8cc7\u7522\u8ca0\u50b5\u8868\u4e2d AccountsPayable \uff0c\u900f\u904e\u9019 API \u5f97\u77e5\u4e2d\u6587\u53eb \u61c9\u4ed8\u5e33\u6b3e \uff0c\u85c9\u6b64\u4f86\u5e6b\u52a9\u4f60\u4e86\u89e3\u8cc7\u6599 https://api.finmindtrade.com/api/v4/translation API \u63cf\u8ff0 \u00b6 login \u00b6 POST: https://api.finmindtrade.com/api/v4/login \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! response: token \u7372\u53d6\u8cc7\u6599 API \u00b6 GET: https://api.finmindtrade.com/api/v4/data \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e dataset str Y \u8cc7\u6599\u96c6\u540d\u7a31 data_id str N \u8cc7\u6599\u4ee3\u78bc start_date str N \u8d77\u59cb\u6642\u9593\uff0c\u5982\u679c\u8ddf end_date \u4e00\u8d77\u4f7f\u7528\uff0c\u6703\u8f38\u51fa start_date \u5230 end_date \u6642\u9593\u7684\u8cc7\u6599\uff0c\u53cd\u4e4b\u6703\u8f38\u51fa\u5230\u6700\u65b0\u7684\u8cc7\u6599\uff0cstart_date \u548c end_date \u81f3\u5c11\u5247\u4e00\u4f7f\u7528 end_date str N \u7d50\u675f\u6642\u9593\uff0c\u5982\u679c\u8ddf start_date \u4e00\u8d77\u4f7f\u7528\uff0c\u6703\u8f38\u51fa start_date \u5230 end_date \u6642\u9593\u7684\u8cc7\u6599\uff0c\u53cd\u4e4b\u6703\u8f38\u51fa\u5230 end_date \u7684\u8cc7\u6599\uff0cstart_date \u548c end_date \u81f3\u5c11\u5247\u4e00\u4f7f\u7528 token str N \u4f7f\u7528\u8005 token\uff0c\u8acb\u5148\u767b\u5165\u62ff\u5230 token \u67e5\u8a62\u8cc7\u6599\u53c3\u6578\u6e05\u55ae API \u00b6 GET: https://api.finmindtrade.com/api/v4/datalist? \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e dataset str Y \u8cc7\u6599\u96c6\u540d\u7a31 user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! \u67e5\u8a62\u6b04\u4f4d\u540d\u7a31\u4e2d\u82f1\u5c0d\u7167 API \u00b6 GET: https://api.finmindtrade.com/api/v4/translation? \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e dataset str Y \u8cc7\u6599\u96c6\u540d\u7a31 user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427!","title":"\u5feb\u901f\u958b\u59cb"},{"location":"quickstart/#quick-start-with-finmind-finance-data-api","text":"\u5e0c\u671b\u900f\u904e\u5982\u4e0b\u8aaa\u660e\uff0c\u53ef\u4ee5\u5feb\u901f\u4e86\u89e3 FinMind data api \u4f7f\u7528\u65b9\u5f0f note \u6d41\u91cf\u9650\u5236 \u9650\u5236 request \u4e0a\u9650 : 600/hour\u3002Limit amount of request, 600/hour. \u81f3 FinMind \u8a3b\u518a\u4e26\u9a57\u8b49\u4fe1\u7bb1\u5f8c\uff0crequest api add user_id, password \u53c3\u6578\uff0c\u4f7f\u7528\u4e0a\u9650\u53ef\u63d0\u9ad8\u5230 1500/hr\u3002","title":"Quick start with FinMind Finance data API"},{"location":"quickstart/#finmind-data-api-api","text":"\u767b\u5165 API \u767b\u5165\u7372\u5f97 token\uff0c\u4e26\u5728\u62ff\u53d6\u8cc7\u6599\u6642\uff0c\u5e36 token\uff0c\u53ef\u589e\u52a0\u4f7f\u7528\u9650\u5236 https://api.finmindtrade.com/api/v4/login \u7372\u53d6\u8cc7\u6599 API \u6839\u64da\u4f60\u60f3\u4f7f\u7528\u7684\u8cc7\u6599\u96c6\u4f86\u7372\u53d6\u8cc7\u6599\uff0c\u4f8b\u5982\u60f3\u8981\u67e5\u8a62\u53f0\u7063\u80a1\u7968\u5e02\u5834\u500b\u80a1\u7684\u50f9\u683c\uff0c\u5c31\u53ef\u4ee5\u900f\u904e TaiwanStockPrice \u8cc7\u6599\u96c6\u4f86\u67e5\u8a62 https://api.finmindtrade.com/api/v4/data \u67e5\u8a62\u8cc7\u6599\u53c3\u6578\u6e05\u55ae API \u6bcf\u500b\u8cc7\u6599\u96c6\u90fd\u6703\u6709\u4e00\u4e9b\u53c3\u6578\u9700\u8981\u4f5c\u9078\u64c7\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u53c3\u6578\u6578\u503c\u6709\u54ea\u4e9b\u53ef\u4ee5\u505a\u9078\u64c7\uff0c \u53ef\u4ee5\u4f7f\u7528\u9019\u500b API \u4f86\u5e6b\u52a9\u4f60\u4e86\u89e3\uff0c\u4f8b\u5982\u4f60\u4e0d\u77e5\u9053\u532f\u7387\u8cc7\u6599\u6709\u54ea\u4e9b\u5e63\u5225\uff0c \u53ea\u8981\u8cc7\u6599\u96c6\u9078\u64c7 TaiwanExchangeRate \u5c31\u53ef\u4ee5\u900f\u904e\u9019 API \u4f86\u67e5\u8a62\u76ee\u524d\u8ddf\u53f0\u5e63\u514c\u63db\u7684\u5e63\u5225 https://api.finmindtrade.com/api/v4/datalist \u67e5\u8a62\u6b04\u4f4d\u540d\u7a31\u4e2d\u82f1\u5c0d\u7167 API \u6709\u4e9b\u8cc7\u6599\u96c6\u6b04\u4f4d\u540d\u7a31\u53ef\u80fd\u53ea\u6709\u82f1\u6587\u800c\u4e14\u540d\u7a31\u76f8\u5c0d\u8907\u96dc\u96e3\u61c2\uff0c\u53ef\u4ee5\u900f\u904e\u9019 API \u4f86\u67e5\u8a62\u5176\u4e2d\u6587\u540d\u7a31\uff0c \u4f8b\u5982\u8cc7\u7522\u8ca0\u50b5\u8868\u4e2d AccountsPayable \uff0c\u900f\u904e\u9019 API \u5f97\u77e5\u4e2d\u6587\u53eb \u61c9\u4ed8\u5e33\u6b3e \uff0c\u85c9\u6b64\u4f86\u5e6b\u52a9\u4f60\u4e86\u89e3\u8cc7\u6599 https://api.finmindtrade.com/api/v4/translation","title":"FinMind data api \u4e3b\u8981\u6709\u56db\u7a2e\u985e\u578b API"},{"location":"quickstart/#api","text":"","title":"API \u63cf\u8ff0"},{"location":"quickstart/#login","text":"POST: https://api.finmindtrade.com/api/v4/login \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! response: token","title":"login"},{"location":"quickstart/#api_1","text":"GET: https://api.finmindtrade.com/api/v4/data \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e dataset str Y \u8cc7\u6599\u96c6\u540d\u7a31 data_id str N \u8cc7\u6599\u4ee3\u78bc start_date str N \u8d77\u59cb\u6642\u9593\uff0c\u5982\u679c\u8ddf end_date \u4e00\u8d77\u4f7f\u7528\uff0c\u6703\u8f38\u51fa start_date \u5230 end_date \u6642\u9593\u7684\u8cc7\u6599\uff0c\u53cd\u4e4b\u6703\u8f38\u51fa\u5230\u6700\u65b0\u7684\u8cc7\u6599\uff0cstart_date \u548c end_date \u81f3\u5c11\u5247\u4e00\u4f7f\u7528 end_date str N \u7d50\u675f\u6642\u9593\uff0c\u5982\u679c\u8ddf start_date \u4e00\u8d77\u4f7f\u7528\uff0c\u6703\u8f38\u51fa start_date \u5230 end_date \u6642\u9593\u7684\u8cc7\u6599\uff0c\u53cd\u4e4b\u6703\u8f38\u51fa\u5230 end_date \u7684\u8cc7\u6599\uff0cstart_date \u548c end_date \u81f3\u5c11\u5247\u4e00\u4f7f\u7528 token str N \u4f7f\u7528\u8005 token\uff0c\u8acb\u5148\u767b\u5165\u62ff\u5230 token","title":"\u7372\u53d6\u8cc7\u6599 API"},{"location":"quickstart/#api_2","text":"GET: https://api.finmindtrade.com/api/v4/datalist? \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e dataset str Y \u8cc7\u6599\u96c6\u540d\u7a31 user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427!","title":"\u67e5\u8a62\u8cc7\u6599\u53c3\u6578\u6e05\u55ae API"},{"location":"quickstart/#api_3","text":"GET: https://api.finmindtrade.com/api/v4/translation? \u8acb\u6c42\u53c3\u6578: \u53c3\u6578\u540d\u7a31 \u53c3\u6578\u578b\u5225 \u5fc5\u586b \u8aaa\u660e dataset str Y \u8cc7\u6599\u96c6\u540d\u7a31 user_id str N \u4f7f\u7528\u8005 id \uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427! password str N \u4f7f\u7528\u8005\u5bc6\u78bc\uff0c\u7533\u8fa6\u5e33\u865f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7528\u91cf\u5594\uff0c\u5feb\u4f86 \u7533\u8acb \u5427!","title":"\u67e5\u8a62\u6b04\u4f4d\u540d\u7a31\u4e2d\u82f1\u5c0d\u7167 API"},{"location":"release/","text":"version: 1.2.2.dev2 (2020-09-01) \u00b6 feat: add Strategies path commit_id: b41a18d5 release_at: 2020-09-01 06:03:37.810 version: 1.2.2.dev0 (2020-07-07) \u00b6 add strategies commit_id: 7ca74fd8 release_at: 2020-07-07 06:54:03.595 version: 1.2.1 (2020-06-23) \u00b6 release commit_id: 18ffdd5d release_at: 2020-06-23 14:13:49.596 version: 1.2.0.dev6 (2020-06-23) \u00b6 fix: version commit_id: bcbbd3c9 release_at: 2020-06-23 08:10:32.177 version: 1.2.0.dev5 (2020-06-17) \u00b6 add \"requests\", \"importlib_metadata\", \"matplotlib\", \"pandas\" to setup install_requires commit_id: 0eafefee release_at: 2020-06-17 15:07:22.178 version: 1.2.0.dev4 (2020-06-17) \u00b6 fix CD to auto upload github commit_id: 7f4c94c9 release_at: 2020-06-17 14:41:39.133 version: 1.2.0.dev3 (2020-06-17) \u00b6 add CD to auto upload github commit_id: 379d8613 release_at: 2020-06-17 09:02:31.455 version: 1.2.0.dev2 (2020-06-17) \u00b6 add cd to auto update github commit_id: 379d8613 release_at: 2020-06-17 08:55:23.648 version: 1.2.0.dev1 (2020-06-17) \u00b6 add backtesting commit_id: 9fc4dafb release_at: 2020-06-17 08:16:00.402 version: 1.2.0.dev0 (2020-06-17) \u00b6 add backtesting commit_id: f31ad7f5 release_at: 2020-06-17 08:13:06.617","title":"Release Note"},{"location":"release/#version-122dev2-2020-09-01","text":"feat: add Strategies path commit_id: b41a18d5 release_at: 2020-09-01 06:03:37.810","title":"version: 1.2.2.dev2 (2020-09-01)"},{"location":"release/#version-122dev0-2020-07-07","text":"add strategies commit_id: 7ca74fd8 release_at: 2020-07-07 06:54:03.595","title":"version: 1.2.2.dev0 (2020-07-07)"},{"location":"release/#version-121-2020-06-23","text":"release commit_id: 18ffdd5d release_at: 2020-06-23 14:13:49.596","title":"version: 1.2.1 (2020-06-23)"},{"location":"release/#version-120dev6-2020-06-23","text":"fix: version commit_id: bcbbd3c9 release_at: 2020-06-23 08:10:32.177","title":"version: 1.2.0.dev6 (2020-06-23)"},{"location":"release/#version-120dev5-2020-06-17","text":"add \"requests\", \"importlib_metadata\", \"matplotlib\", \"pandas\" to setup install_requires commit_id: 0eafefee release_at: 2020-06-17 15:07:22.178","title":"version: 1.2.0.dev5 (2020-06-17)"},{"location":"release/#version-120dev4-2020-06-17","text":"fix CD to auto upload github commit_id: 7f4c94c9 release_at: 2020-06-17 14:41:39.133","title":"version: 1.2.0.dev4 (2020-06-17)"},{"location":"release/#version-120dev3-2020-06-17","text":"add CD to auto upload github commit_id: 379d8613 release_at: 2020-06-17 09:02:31.455","title":"version: 1.2.0.dev3 (2020-06-17)"},{"location":"release/#version-120dev2-2020-06-17","text":"add cd to auto update github commit_id: 379d8613 release_at: 2020-06-17 08:55:23.648","title":"version: 1.2.0.dev2 (2020-06-17)"},{"location":"release/#version-120dev1-2020-06-17","text":"add backtesting commit_id: 9fc4dafb release_at: 2020-06-17 08:16:00.402","title":"version: 1.2.0.dev1 (2020-06-17)"},{"location":"release/#version-120dev0-2020-06-17","text":"add backtesting commit_id: f31ad7f5 release_at: 2020-06-17 08:13:06.617","title":"version: 1.2.0.dev0 (2020-06-17)"},{"location":"tutor/ExchangeRate/","text":"\u5728\u532f\u7387\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 19 \u7a2e\u5e63\u5225\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: (\u8cc7\u6599\u4f86\u6e90-\u53f0\u7063\u9280\u884c) \u5916\u5e63\u5c0d\u53f0\u5e63\u8cc7\u6599\u8868 TaiwanExchangeRate \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u5916\u5e63\u514c\u63db\u6e05\u55ae\uff0c\u76ee\u524d\u5171\u6709 19 \u7a2e\u5e63\u5225 data_id AUD CAD CHF CNY EUR GBP HKD IDR JPY KRW MYR NZD PHP SEK SGD THB USD VND ZAR \u5e63\u5225 \u6fb3\u6d32 \u52a0\u62ff\u5927 \u745e\u58eb\u6cd5\u90ce \u4eba\u6c11\u5e63 \u6b50\u5143 \u82f1\u938a \u6e2f\u5e63 \u5370\u5c3c\u5e63 \u65e5\u5713 \u97d3\u5143 \u99ac\u4f86\u5e63 \u7d10\u5143 \u83f2\u570b\u6bd4\u7d22 \u745e\u5178\u5e63 \u65b0\u52a0\u5761\u5e63 \u6cf0\u5e63 \u7f8e\u91d1 \u8d8a\u5357\u76fe \u5357\u975e\u5e63 \u5916\u5e63\u5c0d\u53f0\u5e63\u8cc7\u6599\u8868 TaiwanExchangeRate \u00b6 \u91dd\u5c0d USD \u505a\u793a\u7bc4 import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanExchangeRate\" , \"data_id\" : \"USD\" , \"start_date\" : \"2006-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date currency cash_buy cash_sell spot_buy spot_sell 0 2006 - 01 - 02 USD 32.470 33.005 - 99.000 - 99.000 1 2006 - 01 - 03 USD 32.295 32.830 32.595 32.695 2 2006 - 01 - 04 USD 31.985 32.520 32.285 32.385 3 2006 - 01 - 05 USD 31.670 32.205 31.970 32.070 4 2006 - 01 - 06 USD 31.830 32.372 32.130 32.230","title":"\u532f\u7387"},{"location":"tutor/ExchangeRate/#taiwanexchangerate","text":"\u91dd\u5c0d USD \u505a\u793a\u7bc4 import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanExchangeRate\" , \"data_id\" : \"USD\" , \"start_date\" : \"2006-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date currency cash_buy cash_sell spot_buy spot_sell 0 2006 - 01 - 02 USD 32.470 33.005 - 99.000 - 99.000 1 2006 - 01 - 03 USD 32.295 32.830 32.595 32.695 2 2006 - 01 - 04 USD 31.985 32.520 32.285 32.385 3 2006 - 01 - 05 USD 31.670 32.205 31.970 32.070 4 2006 - 01 - 06 USD 31.830 32.372 32.130 32.230","title":"\u5916\u5e63\u5c0d\u53f0\u5e63\u8cc7\u6599\u8868 TaiwanExchangeRate"},{"location":"tutor/InterestRate/","text":"\u5728\u5229\u7387\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 12 \u570b\u592e\u884c\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u5229\u7387\u8cc7\u6599\u8868 InterestRate data_id BOE RBA FED PBOC BOC ECB RBNZ RBI CBR BCB BOJ SNB \u570b\u5bb6 \u82f1\u683c\u862d\u9280\u884c \u6fb3\u6d32\u5132\u5099\u9280\u884c \u806f\u90a6\u6e96\u5099\u9280\u884c \u4e2d\u570b\u4eba\u6c11\u9280\u884c \u4e2d\u570b\u9280\u884c \u6b50\u6d32\u4e2d\u592e\u9280\u884c \u7d10\u897f\u862d\u5132\u5099\u9280\u884c \u5370\u5ea6\u5132\u5099\u9280\u884c \u4fc4\u7f85\u65af\u4e2d\u592e\u9280\u884c \u99ac\u4f86\u897f\u4e9e\u5546\u696d\u9280\u884c \u65e5\u672c\u9280\u884c \u745e\u58eb\u570b\u5bb6\u9280\u884c \u5229\u7387\u8cc7\u6599\u8868 InterestRate \u00b6 \u91dd\u5c0d FED \u505a\u793a\u7bc4 import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"InterestRate\" , \"data_id\" : \"FED\" , \"start_date\" : \"1982-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) country date full_country_name interest_rate 0 FED 1982 - 09 - 27 Federal Reserve 10.25 1 FED 1982 - 10 - 01 Federal Reserve 10.00 2 FED 1982 - 10 - 07 Federal Reserve 9.50 3 FED 1982 - 11 - 19 Federal Reserve 9.00 4 FED 1982 - 12 - 14 Federal Reserve 8.50","title":"\u592e\u884c\u5229\u7387"},{"location":"tutor/InterestRate/#interestrate","text":"\u91dd\u5c0d FED \u505a\u793a\u7bc4 import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"InterestRate\" , \"data_id\" : \"FED\" , \"start_date\" : \"1982-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) country date full_country_name interest_rate 0 FED 1982 - 09 - 27 Federal Reserve 10.25 1 FED 1982 - 10 - 01 Federal Reserve 10.00 2 FED 1982 - 10 - 07 Federal Reserve 9.50 3 FED 1982 - 11 - 19 Federal Reserve 9.00 4 FED 1982 - 12 - 14 Federal Reserve 8.50","title":"\u5229\u7387\u8cc7\u6599\u8868 InterestRate"},{"location":"tutor/Macroeconomy/","text":"\u5728\u7e3d\u9ad4\u7d93\u6fdf\u65b9\u9762\uff0c\u6211\u5011\u64c1\u6709 2 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u5404\u570b\u8ca8\u5e63\u767c\u884c\u91cf\u8868 CurrencyCirculation \u7f8e\u570b\u653f\u5e9c\u516c\u50b5\u6b96\u5229\u7387\u8868 GovernmentBondsYield \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u7f8e\u50b5\u6e05\u55ae\uff0c\u76ee\u524d\u5171\u6709 12 \u7a2e data_id United States 1-Month United States 2-Month United States 3-Month United States 6-Month United States 1-Year United States 2-Year United States 3-Year United States 5-Year United States 7-Year United States 10-Year United States 20-Year United States 30-Year \u50b5\u5238 1\u6708\u671f 2\u6708\u671f 3\u6708\u671f 6\u6708\u671f 1\u5e74\u671f 2\u5e74\u671f 3\u5e74\u671f 5\u5e74\u671f 7\u5e74\u671f 10\u5e74\u671f 20\u5e74\u671f 30\u5e74\u671f \u5404\u570b\u8ca8\u5e63\u767c\u884c\u91cf\u8868 CurrencyCirculation \u00b6 import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v3/data\" parameter = { \"dataset\" : \"CurrencyCirculation\" , \"data_id\" : \"US\" , \"date\" : \"2020-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) country date type value 0 US 2020 - 01 - 01 Monthly 1798.984 B 1 US 2020 - 02 - 01 Monthly 1795.990 B 2 US 2020 - 03 - 01 Monthly 1826.102 B 3 US 2020 - 04 - 01 Monthly 1876.878 B \u653f\u5e9c\u516c\u50b5\u6b96\u5229\u7387\u8868 GovernmentBondsYield \u00b6 import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v3/data\" parameter = { \"dataset\" : \"GovernmentBondsYield\" , \"data_id\" : \"United States 1-Month\" , \"date\" : \"2020-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date name value 0 2020 - 01 - 02 United States 3 - Year 1.59 1 2020 - 01 - 03 United States 3 - Year 1.54 2 2020 - 01 - 06 United States 3 - Year 1.56 3 2020 - 01 - 07 United States 3 - Year 1.55 4 2020 - 01 - 08 United States 3 - Year 1.61","title":"Macroeconomy"},{"location":"tutor/Macroeconomy/#currencycirculation","text":"import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v3/data\" parameter = { \"dataset\" : \"CurrencyCirculation\" , \"data_id\" : \"US\" , \"date\" : \"2020-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) country date type value 0 US 2020 - 01 - 01 Monthly 1798.984 B 1 US 2020 - 02 - 01 Monthly 1795.990 B 2 US 2020 - 03 - 01 Monthly 1826.102 B 3 US 2020 - 04 - 01 Monthly 1876.878 B","title":"\u5404\u570b\u8ca8\u5e63\u767c\u884c\u91cf\u8868 CurrencyCirculation"},{"location":"tutor/Macroeconomy/#governmentbondsyield","text":"import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v3/data\" parameter = { \"dataset\" : \"GovernmentBondsYield\" , \"data_id\" : \"United States 1-Month\" , \"date\" : \"2020-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date name value 0 2020 - 01 - 02 United States 3 - Year 1.59 1 2020 - 01 - 03 United States 3 - Year 1.54 2 2020 - 01 - 06 United States 3 - Year 1.56 3 2020 - 01 - 07 United States 3 - Year 1.55 4 2020 - 01 - 08 United States 3 - Year 1.61","title":"\u653f\u5e9c\u516c\u50b5\u6b96\u5229\u7387\u8868 GovernmentBondsYield"},{"location":"tutor/Materials/","text":"\u5728\u539f\u7269\u6599\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 2 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u9ec3\u91d1\u50f9\u683c\u8868 GoldPrice \u539f\u6cb9\u8cc7\u6599\u8868 CrudeOilPrices \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u539f\u6cb9\u6e05\u55ae\uff0c\u76ee\u524d\u5171\u6709 2 \u7a2e data_id Brent WTI \u539f\u6cb9 \u5e03\u862d\u7279 \u897f\u5fb7\u5dde \u9ec3\u91d1\u50f9\u683c\u8868 GoldPrice \u00b6 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"GoldPrice\" , \"start_date\" : \"2020-01-01\" , \"end_date\" : \"2020-01-02\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Price date 0 1517.2 2020 - 01 - 01 00 : 00 : 01 1 1517.2 2020 - 01 - 01 00 : 03 : 01 2 1517.2 2020 - 01 - 01 00 : 08 : 02 3 1517.2 2020 - 01 - 01 00 : 13 : 02 4 1517.2 2020 - 01 - 01 00 : 18 : 01 \u539f\u6cb9\u8cc7\u6599\u8868 CrudeOilPrices \u00b6 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"CrudeOilPrices\" , \"data_id\" : \"WTI\" , \"start_date\" : \"2020-01-01\" , \"end_date\" : \"2020-01-08\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date name price 0 2020 - 01 - 02 WTI 61.17 1 2020 - 01 - 03 WTI 63 2 2020 - 01 - 06 WTI 63.27 3 2020 - 01 - 07 WTI 62.7 4 2020 - 01 - 08 WTI 59.65","title":"\u539f\u7269\u6599\u5e02\u5834"},{"location":"tutor/Materials/#goldprice","text":"import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"GoldPrice\" , \"start_date\" : \"2020-01-01\" , \"end_date\" : \"2020-01-02\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Price date 0 1517.2 2020 - 01 - 01 00 : 00 : 01 1 1517.2 2020 - 01 - 01 00 : 03 : 01 2 1517.2 2020 - 01 - 01 00 : 08 : 02 3 1517.2 2020 - 01 - 01 00 : 13 : 02 4 1517.2 2020 - 01 - 01 00 : 18 : 01","title":"\u9ec3\u91d1\u50f9\u683c\u8868 GoldPrice"},{"location":"tutor/Materials/#crudeoilprices","text":"import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v4/data' parameter = { \"dataset\" : \"CrudeOilPrices\" , \"data_id\" : \"WTI\" , \"start_date\" : \"2020-01-01\" , \"end_date\" : \"2020-01-08\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date name price 0 2020 - 01 - 02 WTI 61.17 1 2020 - 01 - 03 WTI 63 2 2020 - 01 - 06 WTI 63.27 3 2020 - 01 - 07 WTI 62.7 4 2020 - 01 - 08 WTI 59.65","title":"\u539f\u6cb9\u8cc7\u6599\u8868 CrudeOilPrices"},{"location":"tutor/EuropeMarket/DataList/","text":"\u5728\u6b50\u6d32\u91d1\u878d\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u6b50\u6d32\u80a1\u7968\u6e05\u55ae\u5217\u8868 EuropeStockInfo \u80a1\u50f9 TaiwanStock \u00b6 \u6b50\u6d32\u80a1\u50f9\u8cc7\u6599\u8868 EuropeStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u7e3d\u89bd"},{"location":"tutor/EuropeMarket/DataList/#taiwanstock","text":"\u6b50\u6d32\u80a1\u50f9\u8cc7\u6599\u8868 EuropeStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u80a1\u50f9 TaiwanStock"},{"location":"tutor/EuropeMarket/Technical/","text":"\u5728\u6b50\u6d32\u80a1\u7968\u8cc7\u6599\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u6b50\u6d32\u80a1\u50f9\u8cc7\u6599\u8868 EuropeStockPrice \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u7684\u5217\u8868\u5982\u4e0b: \u6b50\u6d32\u80a1\u7968\u6e05\u55ae\u5217\u8868 EuropeStockInfo \u6839\u64da\u4e0a\u8ff0\u8cc7\u6599\u8868\u9010\u4e00\u8aaa\u660e\u600e\u9ebc\u4f7f\u7528\uff0c\u53e6\u5916\u5177\u9ad4\u8cc7\u6599\u8868 schemas \u8acb\u53c3\u8003 finmindapi \u6b50\u6d32\u80a1\u7968\u6e05\u55ae\u5217\u8868 EuropeStockInfo \u00b6 \u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u6b50\u6d32\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=EuropeStockInfo' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date ... stock_name 0 2019 - 01 - 14 ... 2 CRSI 1 2019 - 01 - 14 ... AP ALTERNAT ASSETS 2 2019 - 01 - 14 ... AALBERTS INDUSTR 3 2019 - 01 - 14 ... AB SCIENCE 4 2019 - 01 - 14 ... ABC ARBITRAGE \u6b50\u6d32\u80a1\u50f9\u8cc7\u6599\u8868 EuropeStockPrice \u00b6 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=EuropeStockPrice&stock_id=AALB.AS&date=2019-01-01' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Adj_Close Close High Low Open Volume date stock_id 0 28.39 28.39 28.80 28.09 28.80 328812 2019 - 01 - 02 AALB . AS 1 27.52 27.52 28.13 27.52 28.04 271337 2019 - 01 - 03 AALB . AS 2 28.81 28.81 28.90 27.70 27.72 311458 2019 - 01 - 04 AALB . AS 3 28.82 28.82 29.16 28.46 29.10 319543 2019 - 01 - 07 AALB . AS 4 29.25 29.25 29.62 28.89 28.89 355597 2019 - 01 - 08 AALB . A","title":"\u6280\u8853\u9762"},{"location":"tutor/EuropeMarket/Technical/#europestockinfo","text":"\u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u6b50\u6d32\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=EuropeStockInfo' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date ... stock_name 0 2019 - 01 - 14 ... 2 CRSI 1 2019 - 01 - 14 ... AP ALTERNAT ASSETS 2 2019 - 01 - 14 ... AALBERTS INDUSTR 3 2019 - 01 - 14 ... AB SCIENCE 4 2019 - 01 - 14 ... ABC ARBITRAGE","title":"\u6b50\u6d32\u80a1\u7968\u6e05\u55ae\u5217\u8868 EuropeStockInfo"},{"location":"tutor/EuropeMarket/Technical/#europestockprice","text":"import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=EuropeStockPrice&stock_id=AALB.AS&date=2019-01-01' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Adj_Close Close High Low Open Volume date stock_id 0 28.39 28.39 28.80 28.09 28.80 328812 2019 - 01 - 02 AALB . AS 1 27.52 27.52 28.13 27.52 28.04 271337 2019 - 01 - 03 AALB . AS 2 28.81 28.81 28.90 27.70 27.72 311458 2019 - 01 - 04 AALB . AS 3 28.82 28.82 29.16 28.46 29.10 319543 2019 - 01 - 07 AALB . AS 4 29.25 29.25 29.62 28.89 28.89 355597 2019 - 01 - 08 AALB . A","title":"\u6b50\u6d32\u80a1\u50f9\u8cc7\u6599\u8868 EuropeStockPrice"},{"location":"tutor/JapanMarket/DataList/","text":"\u5728\u65e5\u672c\u91d1\u878d\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u65e5\u672c\u80a1\u7968\u6e05\u55ae\u5217\u8868 JapanStockInfo \u80a1\u50f9 TaiwanStock \u00b6 \u65e5\u672c\u80a1\u50f9\u8cc7\u6599\u8868 JapanStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u7e3d\u89bd"},{"location":"tutor/JapanMarket/DataList/#taiwanstock","text":"\u65e5\u672c\u80a1\u50f9\u8cc7\u6599\u8868 JapanStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u80a1\u50f9 TaiwanStock"},{"location":"tutor/JapanMarket/Technical/","text":"\u5728\u65e5\u672c\u80a1\u7968\u8cc7\u6599\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u65e5\u672c\u80a1\u50f9\u8cc7\u6599\u8868 JapanStockPrice \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u7684\u5217\u8868\u5982\u4e0b: \u65e5\u672c\u80a1\u7968\u6e05\u55ae\u5217\u8868 JapanStockInfo \u6839\u64da\u4e0a\u8ff0\u8cc7\u6599\u8868\u9010\u4e00\u8aaa\u660e\u600e\u9ebc\u4f7f\u7528\uff0c\u53e6\u5916\u5177\u9ad4\u8cc7\u6599\u8868 schemas \u8acb\u53c3\u8003 finmindapi \u65e5\u672c\u80a1\u7968\u6e05\u55ae\u5217\u8868 JapanStockInfo \u00b6 \u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u65e5\u672c\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=JapanStockInfo' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date ... stock_name 0 2019 - 01 - 14 ... Kyokuyo Co . Ltd . 1 2019 - 01 - 14 ... Nippon Suisan Kaisha Ltd . 2 2019 - 01 - 14 ... Maruha Nichiro Corp . 3 2019 - 01 - 14 ... Hohsui Corp . 4 2019 - 01 - 14 ... Kaneko Seeds Co . Ltd . \u65e5\u672c\u80a1\u50f9\u8cc7\u6599\u8868 JapanStockPrice \u00b6 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=JapanStockPrice&stock_id=7203.T&date=2019-01-01' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Adj_Close Close High ... Volume date stock_id 0 6406.0 6406.0 6406.0 ... 0 2019 - 01 - 01 7203. T 1 6406.0 6406.0 6406.0 ... 0 2019 - 01 - 02 7203. T 2 6406.0 6406.0 6406.0 ... 0 2019 - 01 - 03 7203. T 3 6346.0 6346.0 6360.0 ... 10011900 2019 - 01 - 04 7203. T 4 6546.0 6546.0 6622.0 ... 7677200 2019 - 01 - 07 7203. T","title":"\u6280\u8853\u9762"},{"location":"tutor/JapanMarket/Technical/#japanstockinfo","text":"\u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u65e5\u672c\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=JapanStockInfo' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date ... stock_name 0 2019 - 01 - 14 ... Kyokuyo Co . Ltd . 1 2019 - 01 - 14 ... Nippon Suisan Kaisha Ltd . 2 2019 - 01 - 14 ... Maruha Nichiro Corp . 3 2019 - 01 - 14 ... Hohsui Corp . 4 2019 - 01 - 14 ... Kaneko Seeds Co . Ltd .","title":"\u65e5\u672c\u80a1\u7968\u6e05\u55ae\u5217\u8868 JapanStockInfo"},{"location":"tutor/JapanMarket/Technical/#japanstockprice","text":"import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=JapanStockPrice&stock_id=7203.T&date=2019-01-01' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Adj_Close Close High ... Volume date stock_id 0 6406.0 6406.0 6406.0 ... 0 2019 - 01 - 01 7203. T 1 6406.0 6406.0 6406.0 ... 0 2019 - 01 - 02 7203. T 2 6406.0 6406.0 6406.0 ... 0 2019 - 01 - 03 7203. T 3 6346.0 6346.0 6360.0 ... 10011900 2019 - 01 - 04 7203. T 4 6546.0 6546.0 6622.0 ... 7677200 2019 - 01 - 07 7203. T","title":"\u65e5\u672c\u80a1\u50f9\u8cc7\u6599\u8868 JapanStockPrice"},{"location":"tutor/TaiwanMarket/Chip/","text":"\u5728\u53f0\u80a1\u7c4c\u78bc\u9762\uff0c\u6211\u5011\u64c1\u6709 7 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u500b\u80a1\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockMarginPurchaseShortSale \u6574\u9ad4\u5e02\u5834\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockTotalMarginPurchaseShortSale \u500b\u80a1\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockInstitutionalInvestorsBuySell \u6574\u9ad4\u5e02\u5834\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockTotalInstitutionalInvestors \u5916\u8cc7\u6301\u80a1\u8868 TaiwanStockShareholding \u80a1\u6b0a\u6301\u80a1\u5206\u7d1a\u8868 TaiwanStockHoldingSharesPer \u501f\u5238\u6210\u4ea4\u660e\u7d30 TaiwanStockSecuritiesLending \u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockMarginPurchaseShortSale \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMarginPurchaseShortSale\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id MarginPurchaseBuy MarginPurchaseCashRepayment MarginPurchaseLimit ... ShortSaleCashRepayment ShortSaleLimit ShortSaleSell ShortSaleTodayBalance ShortSaleYesterdayBalance 0 2019 - 01 - 02 2330 1013 7 6482595 ... 0.0 6482595 66 2782 3179 1 2019 - 01 - 03 2330 830 0 6482595 ... 0.0 6482595 133 2475 2782 2 2019 - 01 - 04 2330 2153 2 6482595 ... 0.0 6482595 496 2164 2475 3 2019 - 01 - 07 2330 296 7 6482595 ... 0.0 6482595 198 2154 2164 4 2019 - 01 - 08 2330 264 4 6482595 ... 0.0 6482595 150 2219 2154 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMarginPurchaseShortSale\" , data_id = \"2330\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id MarginPurchaseBuy MarginPurchaseCashRepayment MarginPurchaseLimit 1 : 2019-01-02 2330 1013 7 6482595 2 : 2019-01-03 2330 830 0 6482595 3 : 2019-01-04 2330 2153 2 6482595 4 : 2019-01-07 2330 296 7 6482595 5 : 2019-01-08 2330 264 4 6482595 6 : 2019-01-09 2330 173 10 6482595 MarginPurchaseSell MarginPurchaseTodayBalance MarginPurchaseYesterdayBalance Note OffsetLoanAndShort 1 : 221 13389 12604 None 6 2 : 120 14099 13389 None 16 3 : 1163 15087 14099 None 25 4 : 1188 14188 15087 None 7 5 : 201 14247 14188 None 2 6 : 1147 13263 14247 None 3 ShortSaleBuy ShortSaleCashRepayment ShortSaleLimit ShortSaleSell ShortSaleTodayBalance 1 : 463 0.0 6482595 66 2782 2 : 440 0.0 6482595 133 2475 3 : 807 0.0 6482595 496 2164 4 : 208 0.0 6482595 198 2154 5 : 85 0.0 6482595 150 2219 6 : 136 0.0 6482595 342 2425 ShortSaleYesterdayBalance 1 : 3179 2 : 2782 3 : 2475 4 : 2164 5 : 2154 6 : 2219 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528) \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMarginPurchaseShortSale\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id MarginPurchaseBuy MarginPurchaseCashRepayment ... ShortSaleLimit ShortSaleSell ShortSaleTodayBalance ShortSaleYesterdayBalance 0 2020 - 04 - 01 0050 193 15 ... 263750 13 2283 2336 1 2020 - 04 - 01 0051 0 0 ... 2375 0 0 0 2 2020 - 04 - 01 0052 0 0 ... 7500 0 0 0 3 2020 - 04 - 01 0053 0 0 ... 1622 0 0 0 4 2020 - 04 - 01 0054 0 0 ... 2531 0 0 0 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMarginPurchaseShortSale\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id MarginPurchaseBuy MarginPurchaseCashRepayment 1 : 2020-01-02 0050 20 0 2 : 2020-01-02 0051 0 0 3 : 2020-01-02 0052 3 0 4 : 2020-01-02 0053 0 0 5 : 2020-01-02 0054 0 0 6 : 2020-01-02 0055 0 0 MarginPurchaseLimit MarginPurchaseSell MarginPurchaseTodayBalance 1 : 171750 6 374 2 : 2375 0 3 3 : 8250 1 23 4 : 1372 0 52 5 : 2531 0 0 6 : 9163 0 25 MarginPurchaseYesterdayBalance Note OffsetLoanAndShort ShortSaleBuy 1 : 360 0 1 2 : 3 0 0 3 : 21 0 0 4 : 52 0 0 5 : 0 X 0 0 6 : 25 0 0 ShortSaleCashRepayment ShortSaleLimit ShortSaleSell 1 : 0 171750 2 2 : 0 2375 0 3 : 0 8250 0 4 : 0 1372 0 5 : 0 2531 0 6 : 0 9163 0 ShortSaleTodayBalance ShortSaleYesterdayBalance 1 : 172 171 2 : 0 0 3 : 0 0 4 : 4 4 5 : 0 0 6 : 1 1 \u53f0\u7063\u5e02\u5834\u6574\u9ad4\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockTotalMarginPurchaseShortSale \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockTotalMarginPurchaseShortSale\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) TodayBalance YesBalance buy date name sell 0 7394954 7355321 173277 2019 - 01 - 02 MarginPurchase 129650 1 7359773 7394951 132298 2019 - 01 - 03 MarginPurchase 157962 2 7279580 7359772 156698 2019 - 01 - 04 MarginPurchase 230462 3 7297059 7279573 203646 2019 - 01 - 07 MarginPurchase 180036 4 7299390 7297056 133556 2019 - 01 - 08 MarginPurchase 127360 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockTotalMarginPurchaseShortSale\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) TodayBalance YesBalance buy date name sell 1 : 7394954 7355321 173277 2019-01-02 MarginPurchase 129650 2 : 7359773 7394951 132298 2019-01-03 MarginPurchase 157962 3 : 7279580 7359772 156698 2019-01-04 MarginPurchase 230462 4 : 7297059 7279573 203646 2019-01-07 MarginPurchase 180036 5 : 7299390 7297056 133556 2019-01-08 MarginPurchase 127360 6 : 7243011 7299388 205733 2019-01-09 MarginPurchase 256017 \u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockInstitutionalInvestorsBuySell \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockInstitutionalInvestorsBuySell\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id buy name sell 0 2019 - 01 - 02 2330 183000.0 Dealer_Hedging 344000.0 1 2019 - 01 - 02 2330 742000.0 Dealer_self 1375000.0 2 2019 - 01 - 02 2330 0.0 Foreign_Dealer_Self 0.0 3 2019 - 01 - 02 2330 13633825.0 Foreign_Investor 22365017.0 4 2019 - 01 - 02 2330 175000.0 Investment_Trust 166000.0 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockInstitutionalInvestorsBuySell\" , data_id = \"2330\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id buy name sell 1 : 2019-01-02 2330 183000.0 Dealer_Hedging 344000.0 2 : 2019-01-02 2330 742000.0 Dealer_self 1375000.0 3 : 2019-01-02 2330 0.0 Foreign_Dealer_Self 0.0 4 : 2019-01-02 2330 13633825.0 Foreign_Investor 22365017.0 5 : 2019-01-02 2330 175000.0 Investment_Trust 166000.0 6 : 2019-01-03 2330 1114000.0 Dealer_Hedging 81000.0 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528) \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockInstitutionalInvestorsBuySell\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) date stock_id buy name sell 0 2020 - 04 - 01 0050 2050000 Dealer_Hedging 905000 1 2020 - 04 - 01 0050 0 Dealer_self 0 2 2020 - 04 - 01 0050 0 Foreign_Dealer_Self 0 3 2020 - 04 - 01 0050 458249 Foreign_Investor 4492000 4 2020 - 04 - 01 0050 54000 Investment_Trust 0 ... ... ... ... ... ... 8025 2020 - 04 - 01 9958 124000 Dealer_Hedging 199000 8026 2020 - 04 - 01 9958 0 Dealer_self 0 8027 2020 - 04 - 01 9958 0 Foreign_Dealer_Self 0 8028 2020 - 04 - 01 9958 346000 Foreign_Investor 1002000 8029 2020 - 04 - 01 9958 200000 Investment_Trust 0 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockInstitutionalInvestorsBuySell\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id buy name sell 1 : 2020-01-02 0050 633000 Dealer_Hedging 1192000 2 : 2020-01-02 0050 197000 Dealer_self 357000 3 : 2020-01-02 0050 0 Foreign_Dealer_Self 0 4 : 2020-01-02 0050 41000 Foreign_Investor 1878000 5 : 2020-01-02 0050 291000 Investment_Trust 0 6 : 2020-01-02 0051 10000 Dealer_Hedging 0 \u53f0\u7063\u5e02\u5834\u6574\u9ad4\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockTotalInstitutionalInvestors \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockTotalInstitutionalInvestors\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) buy date name sell 0 3997640 2019 - 01 - 02 Foreign_Dealer_Self 7825870 1 21588186132 2019 - 01 - 02 total 31594136973 2 7084620 2019 - 01 - 03 Foreign_Dealer_Self 5933140 3 32376561148 2019 - 01 - 03 total 38612010183 4 6378810 2019 - 01 - 04 Foreign_Dealer_Self 5684420 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockTotalInstitutionalInvestors\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) buy date name sell 1 : 3997640 2019-01-02 Foreign_Dealer_Self 7825870 2 : 21588186132 2019-01-02 total 31594136973 3 : 7084620 2019-01-03 Foreign_Dealer_Self 5933140 4 : 32376561148 2019-01-03 total 38612010183 5 : 6378810 2019-01-04 Foreign_Dealer_Self 5684420 6 : 38029457325 2019-01-04 total 43592013337 \u80a1\u6771\u7d50\u69cb\u8868 TaiwanStockShareholding \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockShareholding\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id ChineseInvestmentUpperLimitRatio ForeignInvestmentRemainingShares ForeignInvestmentShares ... InternationalCode NumberOfSharesIssued RecentlyDeclareDate note stock_name 0 2019 - 01 - 02 2330 100.0 5912146944 20018233344 ... TW0002330008 25930381312 2018 - 05 - 28 None \u53f0\u7a4d\u96fb 1 2019 - 01 - 03 2330 100.0 5931491328 19998887936 ... TW0002330008 25930381312 2018 - 05 - 28 None \u53f0\u7a4d\u96fb 2 2019 - 01 - 04 2330 100.0 5957547520 19972833280 ... TW0002330008 25930381312 2018 - 05 - 28 None \u53f0\u7a4d\u96fb 3 2019 - 01 - 07 2330 100.0 5953922560 19976458240 ... TW0002330008 25930381312 2018 - 05 - 28 None \u53f0\u7a4d\u96fb 4 2019 - 01 - 08 2330 100.0 5953176576 19977203712 ... TW0002330008 25930381312 2018 - 05 - 28 None \u53f0\u7a4d\u96fb R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockShareholding\" , data_id = \"2330\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id ChineseInvestmentUpperLimitRatio ForeignInvestmentRemainingShares 1 : 2019-01-02 2330 100.0 5912146944 2 : 2019-01-03 2330 100.0 5931491328 3 : 2019-01-04 2330 100.0 5957547520 4 : 2019-01-07 2330 100.0 5953922560 5 : 2019-01-08 2330 100.0 5953176576 6 : 2019-01-10 2330 100.0 5944186368 ForeignInvestmentShares ForeignInvestmentUpperLimitRatio InternationalCode NumberOfSharesIssued 1 : 20018233344 100.0 TW0002330008 25930381312 2 : 19998887936 100.0 TW0002330008 25930381312 3 : 19972833280 100.0 TW0002330008 25930381312 4 : 19976458240 100.0 TW0002330008 25930381312 5 : 19977203712 100.0 TW0002330008 25930381312 6 : 19986194432 100.0 TW0002330008 25930381312 RecentlyDeclareDate note stock_name 1 : 2018-05-28 None \u53f0\u7a4d\u96fb 2 : 2018-05-28 None \u53f0\u7a4d\u96fb 3 : 2018-05-28 None \u53f0\u7a4d\u96fb 4 : 2018-05-28 None \u53f0\u7a4d\u96fb 5 : 2018-05-28 None \u53f0\u7a4d\u96fb 6 : 2018-05-28 None \u53f0\u7a4d\u96fb \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528) \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockShareholding\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id stock_name ... NumberOfSharesIssued RecentlyDeclareDate note 0 2020 - 04 - 01 0050 \u5143\u5927\u53f0\u706350 ... 1055000000 2019 - 07 - 18 1 2020 - 04 - 01 0051 \u5143\u5927\u4e2d\u578b100 ... 9500000 2019 - 07 - 18 2 2020 - 04 - 01 0052 \u5bcc\u90a6\u79d1\u6280 ... 30000000 2019 - 07 - 18 3 2020 - 04 - 01 0053 \u5143\u5927\u96fb\u5b50 ... 6488000 2019 - 07 - 18 4 2020 - 04 - 01 0054 \u5143\u5927\u53f0\u554650 ... 10124000 2019 - 07 - 18 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockShareholding\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id stock_name InternationalCode 1 : 2020-01-02 0050 \u5143\u5927\u53f0\u7063 50 TW0000050004 2 : 2020-01-02 0051 \u5143\u5927\u4e2d\u578b 100 TW0000051002 3 : 2020-01-02 0052 \u5bcc\u90a6\u79d1\u6280 TW0000052000 4 : 2020-01-02 0053 \u5143\u5927\u96fb\u5b50 TW0000053008 5 : 2020-01-02 0054 \u5143\u5927\u53f0\u5546 50 TW0000054006 6 : 2020-01-02 0055 \u5143\u5927 MSCI\u91d1\u878d TW0000055003 ForeignInvestmentRemainingShares ForeignInvestmentShares 1 : 495506528 191493472 2 : 9471000 29000 3 : 32955000 45000 4 : 5465000 23000 5 : 9957000 167000 6 : 35465000 1189000 ForeignInvestmentRemainRatio ForeignInvestmentSharesRatio 1 : 0 0 2 : 0 0 3 : 0 0 4 : 0 0 5 : 0 0 6 : 0 0 ForeignInvestmentUpperLimitRatio ChineseInvestmentUpperLimitRatio 1 : 100 100 2 : 100 100 3 : 100 100 4 : 100 100 5 : 100 100 6 : 100 100 NumberOfSharesIssued RecentlyDeclareDate note 1 : 687000000 2019-07-18 2 : 9500000 2019-07-18 3 : 33000000 2019-07-18 4 : 5488000 2019-07-18 5 : 10124000 2019-07-18 6 : 36654000 2019-07-18 \u80a1\u6771\u6301\u80a1\u5206\u7d1a\u8868 TaiwanStockHoldingSharesPer \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockHoldingSharesPer\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id HoldingSharesLevel people percent unit 0 2019 - 01 - 19 2330 1 - 999 144921.0 0.12 31366096 1 2019 - 01 - 19 2330 1 , 000 - 5 , 000 153113.0 1.19 311094603 2 2019 - 01 - 19 2330 10 , 001 - 15 , 000 9248.0 0.43 112987890 3 2019 - 01 - 19 2330 100 , 001 - 200 , 000 1585.0 0.85 220910983 4 2019 - 01 - 19 2330 15 , 001 - 20 , 000 4411.0 0.29 77704397 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockHoldingSharesPer\" , data_id = \"2330\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id HoldingSharesLevel people percent unit 1 : 2019-01-19 2330 1-999 144921.0 0.12 31366096 2 : 2019-01-19 2330 1 , 000-5 , 000 153113.0 1.19 311094603 3 : 2019-01-19 2330 10 , 001-15 , 000 9248.0 0.43 112987890 4 : 2019-01-19 2330 100 , 001-200 , 000 1585.0 0.85 220910983 5 : 2019-01-19 2330 15 , 001-20 , 000 4411.0 0.29 77704397 6 : 2019-01-19 2330 20 , 001-30 , 000 4715.0 0.44 115199487 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528) \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockHoldingSharesPer\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) date stock_id HoldingSharesLevel people percent unit 0 2020 - 04 - 01 1101 1 - 999 78054 0.26 14398612 1 2020 - 04 - 01 1101 1 , 000 - 5 , 000 84289 3.21 175508653 2 2020 - 04 - 01 1101 10 , 001 - 15 , 000 7517 1.65 90220853 3 2020 - 04 - 01 1101 100 , 001 - 200 , 000 1090 2.69 147442198 4 2020 - 04 - 01 1101 15 , 001 - 20 , 000 3273 1.04 57295266 ... ... ... ... ... ... ... 27595 2020 - 04 - 01 9962 50 , 001 - 100 , 000 80 6.29 5677217 27596 2020 - 04 - 01 9962 600 , 001 - 800 , 000 3 2.30 2083808 27597 2020 - 04 - 01 9962 800 , 001 - 1 , 000 , 000 1 0.91 826633 27598 2020 - 04 - 01 9962 more than 1 , 000 , 001 17 51.01 46030201 27599 2020 - 04 - 01 9962 total 4138 100.00 90220260 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockHoldingSharesPer\" , start_date = \"2020-04-01\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id HoldingSharesLevel people percent unit 1 : 2020-04-01 1101 1-999 78054 0.26 14398612 2 : 2020-04-01 1101 1 , 000-5 , 000 84289 3.21 175508653 3 : 2020-04-01 1101 10 , 001-15 , 000 7517 1.65 90220853 4 : 2020-04-01 1101 100 , 001-200 , 000 1090 2.69 147442198 5 : 2020-04-01 1101 15 , 001-20 , 000 3273 1.04 57295266 6 : 2020-04-01 1101 20 , 001-30 , 000 3670 1.62 88740328 \u501f\u5238\u6210\u4ea4\u660e\u7d30 TaiwanStockSecuritiesLending \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockSecuritiesLending\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id transaction_type volume fee_rate close original_return_date original_lending_period 0 2019 - 01 - 02 2330 \u7af6\u50f9 122 0.1 219.5 2019 - 07 - 02 181 1 2019 - 01 - 03 2330 \u8b70\u501f 600 0.17 215.5 2019 - 07 - 03 181 2 2019 - 01 - 04 2330 \u7af6\u50f9 178 0.1 208.0 2019 - 07 - 04 181 3 2019 - 01 - 07 2330 \u7af6\u50f9 64 0.1 213.0 2019 - 07 - 05 179 4 2019 - 01 - 08 2330 \u8b70\u501f 450 0.59 211.0 2019 - 07 - 08 181 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockSecuritiesLending\" , data_id = \"2330\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id transaction_type volume fee_rate close original_return_date 1 : 2019-01-02 2330 \u7af6\u50f9 122 0.1 219.5 2019-07-02 2 : 2019-01-03 2330 \u8b70\u501f 600 0.17 215.5 2019-07-03 3 : 2019-01-04 2330 \u7af6\u50f9 178 0.1 208.0 2019-07-04 4 : 2019-01-07 2330 \u7af6\u50f9 64 0.1 213.0 2019-07-05 5 : 2019-01-08 2330 \u8b70\u501f 450 0.59 211.0 2019-07-08 6 : 2019-01-09 2330 \u8b70\u501f 3000 0.59 215.5 2019-07-09 original_lending_period 1 : 181 2 : 181 3 : 181 4 : 179 5 : 181 6 : 181 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528) \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockSecuritiesLending\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) date stock_id transaction_type volume fee_rate close original_return_date original_lending_period 0 2020 - 04 - 01 1101 \u7af6\u50f9 436 0.70 39.0 2020 - 09 - 30 182 1 2020 - 04 - 01 1101 \u8b70\u501f 397 0.25 39.0 2020 - 09 - 30 182 2 2020 - 04 - 01 1101 \u8b70\u501f 760 0.25 39.0 2020 - 09 - 30 182 3 2020 - 04 - 01 1102 \u8b70\u501f 150 0.25 38.6 2020 - 09 - 30 182 4 2020 - 04 - 01 1102 \u8b70\u501f 770 1.05 38.6 2020 - 09 - 30 182 .. ... ... ... ... ... ... ... ... 500 2020 - 04 - 01 9938 \u8b70\u501f 60 3.00 53.7 2020 - 09 - 30 182 501 2020 - 04 - 01 9938 \u8b70\u501f 60 3.00 53.7 2020 - 09 - 30 182 502 2020 - 04 - 01 9944 \u8b70\u501f 16 20.00 15.5 2020 - 09 - 30 182 503 2020 - 04 - 01 9958 \u7af6\u50f9 60 6.00 78.9 2020 - 09 - 30 182 504 2020 - 04 - 01 9958 \u7af6\u50f9 60 6.00 78.9 2020 - 09 - 30 182 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockSecuritiesLending\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id transaction_type volume fee_rate close original_return_date 1 : 2020-01-02 0050 \u7af6\u50f9 300 0.5 97.65 2020-07-01 2 : 2020-01-02 0050 \u7af6\u50f9 300 0.5 97.65 2020-07-01 3 : 2020-01-02 0052 \u7af6\u50f9 45 4 73.3 2020-07-02 4 : 2020-01-02 0052 \u7af6\u50f9 45 4 73.3 2020-07-02 5 : 2020-01-02 00633L \u7af6\u50f9 150 1.5 51.1 2020-07-02 6 : 2020-01-02 00633L \u7af6\u50f9 150 1.5 51.1 2020-07-02 original_lending_period 1 : 181 2 : 181 3 : 182 4 : 182 5 : 182 6 : 182","title":"\u7c4c\u78bc\u9762"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstockmarginpurchaseshortsale","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMarginPurchaseShortSale\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id MarginPurchaseBuy MarginPurchaseCashRepayment MarginPurchaseLimit ... ShortSaleCashRepayment ShortSaleLimit ShortSaleSell ShortSaleTodayBalance ShortSaleYesterdayBalance 0 2019 - 01 - 02 2330 1013 7 6482595 ... 0.0 6482595 66 2782 3179 1 2019 - 01 - 03 2330 830 0 6482595 ... 0.0 6482595 133 2475 2782 2 2019 - 01 - 04 2330 2153 2 6482595 ... 0.0 6482595 496 2164 2475 3 2019 - 01 - 07 2330 296 7 6482595 ... 0.0 6482595 198 2154 2164 4 2019 - 01 - 08 2330 264 4 6482595 ... 0.0 6482595 150 2219 2154 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMarginPurchaseShortSale\" , data_id = \"2330\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id MarginPurchaseBuy MarginPurchaseCashRepayment MarginPurchaseLimit 1 : 2019-01-02 2330 1013 7 6482595 2 : 2019-01-03 2330 830 0 6482595 3 : 2019-01-04 2330 2153 2 6482595 4 : 2019-01-07 2330 296 7 6482595 5 : 2019-01-08 2330 264 4 6482595 6 : 2019-01-09 2330 173 10 6482595 MarginPurchaseSell MarginPurchaseTodayBalance MarginPurchaseYesterdayBalance Note OffsetLoanAndShort 1 : 221 13389 12604 None 6 2 : 120 14099 13389 None 16 3 : 1163 15087 14099 None 25 4 : 1188 14188 15087 None 7 5 : 201 14247 14188 None 2 6 : 1147 13263 14247 None 3 ShortSaleBuy ShortSaleCashRepayment ShortSaleLimit ShortSaleSell ShortSaleTodayBalance 1 : 463 0.0 6482595 66 2782 2 : 440 0.0 6482595 133 2475 3 : 807 0.0 6482595 496 2164 4 : 208 0.0 6482595 198 2154 5 : 85 0.0 6482595 150 2219 6 : 136 0.0 6482595 342 2425 ShortSaleYesterdayBalance 1 : 3179 2 : 2782 3 : 2475 4 : 2164 5 : 2154 6 : 2219","title":"\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockMarginPurchaseShortSale"},{"location":"tutor/TaiwanMarket/Chip/#_1","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMarginPurchaseShortSale\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id MarginPurchaseBuy MarginPurchaseCashRepayment ... ShortSaleLimit ShortSaleSell ShortSaleTodayBalance ShortSaleYesterdayBalance 0 2020 - 04 - 01 0050 193 15 ... 263750 13 2283 2336 1 2020 - 04 - 01 0051 0 0 ... 2375 0 0 0 2 2020 - 04 - 01 0052 0 0 ... 7500 0 0 0 3 2020 - 04 - 01 0053 0 0 ... 1622 0 0 0 4 2020 - 04 - 01 0054 0 0 ... 2531 0 0 0 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMarginPurchaseShortSale\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id MarginPurchaseBuy MarginPurchaseCashRepayment 1 : 2020-01-02 0050 20 0 2 : 2020-01-02 0051 0 0 3 : 2020-01-02 0052 3 0 4 : 2020-01-02 0053 0 0 5 : 2020-01-02 0054 0 0 6 : 2020-01-02 0055 0 0 MarginPurchaseLimit MarginPurchaseSell MarginPurchaseTodayBalance 1 : 171750 6 374 2 : 2375 0 3 3 : 8250 1 23 4 : 1372 0 52 5 : 2531 0 0 6 : 9163 0 25 MarginPurchaseYesterdayBalance Note OffsetLoanAndShort ShortSaleBuy 1 : 360 0 1 2 : 3 0 0 3 : 21 0 0 4 : 52 0 0 5 : 0 X 0 0 6 : 25 0 0 ShortSaleCashRepayment ShortSaleLimit ShortSaleSell 1 : 0 171750 2 2 : 0 2375 0 3 : 0 8250 0 4 : 0 1372 0 5 : 0 2531 0 6 : 0 9163 0 ShortSaleTodayBalance ShortSaleYesterdayBalance 1 : 172 171 2 : 0 0 3 : 0 0 4 : 4 4 5 : 0 0 6 : 1 1","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstocktotalmarginpurchaseshortsale","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockTotalMarginPurchaseShortSale\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) TodayBalance YesBalance buy date name sell 0 7394954 7355321 173277 2019 - 01 - 02 MarginPurchase 129650 1 7359773 7394951 132298 2019 - 01 - 03 MarginPurchase 157962 2 7279580 7359772 156698 2019 - 01 - 04 MarginPurchase 230462 3 7297059 7279573 203646 2019 - 01 - 07 MarginPurchase 180036 4 7299390 7297056 133556 2019 - 01 - 08 MarginPurchase 127360 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockTotalMarginPurchaseShortSale\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) TodayBalance YesBalance buy date name sell 1 : 7394954 7355321 173277 2019-01-02 MarginPurchase 129650 2 : 7359773 7394951 132298 2019-01-03 MarginPurchase 157962 3 : 7279580 7359772 156698 2019-01-04 MarginPurchase 230462 4 : 7297059 7279573 203646 2019-01-07 MarginPurchase 180036 5 : 7299390 7297056 133556 2019-01-08 MarginPurchase 127360 6 : 7243011 7299388 205733 2019-01-09 MarginPurchase 256017","title":"\u53f0\u7063\u5e02\u5834\u6574\u9ad4\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockTotalMarginPurchaseShortSale"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstockinstitutionalinvestorsbuysell","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockInstitutionalInvestorsBuySell\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id buy name sell 0 2019 - 01 - 02 2330 183000.0 Dealer_Hedging 344000.0 1 2019 - 01 - 02 2330 742000.0 Dealer_self 1375000.0 2 2019 - 01 - 02 2330 0.0 Foreign_Dealer_Self 0.0 3 2019 - 01 - 02 2330 13633825.0 Foreign_Investor 22365017.0 4 2019 - 01 - 02 2330 175000.0 Investment_Trust 166000.0 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockInstitutionalInvestorsBuySell\" , data_id = \"2330\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id buy name sell 1 : 2019-01-02 2330 183000.0 Dealer_Hedging 344000.0 2 : 2019-01-02 2330 742000.0 Dealer_self 1375000.0 3 : 2019-01-02 2330 0.0 Foreign_Dealer_Self 0.0 4 : 2019-01-02 2330 13633825.0 Foreign_Investor 22365017.0 5 : 2019-01-02 2330 175000.0 Investment_Trust 166000.0 6 : 2019-01-03 2330 1114000.0 Dealer_Hedging 81000.0","title":"\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockInstitutionalInvestorsBuySell"},{"location":"tutor/TaiwanMarket/Chip/#_2","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockInstitutionalInvestorsBuySell\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) date stock_id buy name sell 0 2020 - 04 - 01 0050 2050000 Dealer_Hedging 905000 1 2020 - 04 - 01 0050 0 Dealer_self 0 2 2020 - 04 - 01 0050 0 Foreign_Dealer_Self 0 3 2020 - 04 - 01 0050 458249 Foreign_Investor 4492000 4 2020 - 04 - 01 0050 54000 Investment_Trust 0 ... ... ... ... ... ... 8025 2020 - 04 - 01 9958 124000 Dealer_Hedging 199000 8026 2020 - 04 - 01 9958 0 Dealer_self 0 8027 2020 - 04 - 01 9958 0 Foreign_Dealer_Self 0 8028 2020 - 04 - 01 9958 346000 Foreign_Investor 1002000 8029 2020 - 04 - 01 9958 200000 Investment_Trust 0 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockInstitutionalInvestorsBuySell\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id buy name sell 1 : 2020-01-02 0050 633000 Dealer_Hedging 1192000 2 : 2020-01-02 0050 197000 Dealer_self 357000 3 : 2020-01-02 0050 0 Foreign_Dealer_Self 0 4 : 2020-01-02 0050 41000 Foreign_Investor 1878000 5 : 2020-01-02 0050 291000 Investment_Trust 0 6 : 2020-01-02 0051 10000 Dealer_Hedging 0","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstocktotalinstitutionalinvestors","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockTotalInstitutionalInvestors\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) buy date name sell 0 3997640 2019 - 01 - 02 Foreign_Dealer_Self 7825870 1 21588186132 2019 - 01 - 02 total 31594136973 2 7084620 2019 - 01 - 03 Foreign_Dealer_Self 5933140 3 32376561148 2019 - 01 - 03 total 38612010183 4 6378810 2019 - 01 - 04 Foreign_Dealer_Self 5684420 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockTotalInstitutionalInvestors\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) buy date name sell 1 : 3997640 2019-01-02 Foreign_Dealer_Self 7825870 2 : 21588186132 2019-01-02 total 31594136973 3 : 7084620 2019-01-03 Foreign_Dealer_Self 5933140 4 : 32376561148 2019-01-03 total 38612010183 5 : 6378810 2019-01-04 Foreign_Dealer_Self 5684420 6 : 38029457325 2019-01-04 total 43592013337","title":"\u53f0\u7063\u5e02\u5834\u6574\u9ad4\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockTotalInstitutionalInvestors"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstockshareholding","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockShareholding\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id ChineseInvestmentUpperLimitRatio ForeignInvestmentRemainingShares ForeignInvestmentShares ... InternationalCode NumberOfSharesIssued RecentlyDeclareDate note stock_name 0 2019 - 01 - 02 2330 100.0 5912146944 20018233344 ... TW0002330008 25930381312 2018 - 05 - 28 None \u53f0\u7a4d\u96fb 1 2019 - 01 - 03 2330 100.0 5931491328 19998887936 ... TW0002330008 25930381312 2018 - 05 - 28 None \u53f0\u7a4d\u96fb 2 2019 - 01 - 04 2330 100.0 5957547520 19972833280 ... TW0002330008 25930381312 2018 - 05 - 28 None \u53f0\u7a4d\u96fb 3 2019 - 01 - 07 2330 100.0 5953922560 19976458240 ... TW0002330008 25930381312 2018 - 05 - 28 None \u53f0\u7a4d\u96fb 4 2019 - 01 - 08 2330 100.0 5953176576 19977203712 ... TW0002330008 25930381312 2018 - 05 - 28 None \u53f0\u7a4d\u96fb R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockShareholding\" , data_id = \"2330\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id ChineseInvestmentUpperLimitRatio ForeignInvestmentRemainingShares 1 : 2019-01-02 2330 100.0 5912146944 2 : 2019-01-03 2330 100.0 5931491328 3 : 2019-01-04 2330 100.0 5957547520 4 : 2019-01-07 2330 100.0 5953922560 5 : 2019-01-08 2330 100.0 5953176576 6 : 2019-01-10 2330 100.0 5944186368 ForeignInvestmentShares ForeignInvestmentUpperLimitRatio InternationalCode NumberOfSharesIssued 1 : 20018233344 100.0 TW0002330008 25930381312 2 : 19998887936 100.0 TW0002330008 25930381312 3 : 19972833280 100.0 TW0002330008 25930381312 4 : 19976458240 100.0 TW0002330008 25930381312 5 : 19977203712 100.0 TW0002330008 25930381312 6 : 19986194432 100.0 TW0002330008 25930381312 RecentlyDeclareDate note stock_name 1 : 2018-05-28 None \u53f0\u7a4d\u96fb 2 : 2018-05-28 None \u53f0\u7a4d\u96fb 3 : 2018-05-28 None \u53f0\u7a4d\u96fb 4 : 2018-05-28 None \u53f0\u7a4d\u96fb 5 : 2018-05-28 None \u53f0\u7a4d\u96fb 6 : 2018-05-28 None \u53f0\u7a4d\u96fb","title":"\u80a1\u6771\u7d50\u69cb\u8868 TaiwanStockShareholding"},{"location":"tutor/TaiwanMarket/Chip/#_3","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockShareholding\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id stock_name ... NumberOfSharesIssued RecentlyDeclareDate note 0 2020 - 04 - 01 0050 \u5143\u5927\u53f0\u706350 ... 1055000000 2019 - 07 - 18 1 2020 - 04 - 01 0051 \u5143\u5927\u4e2d\u578b100 ... 9500000 2019 - 07 - 18 2 2020 - 04 - 01 0052 \u5bcc\u90a6\u79d1\u6280 ... 30000000 2019 - 07 - 18 3 2020 - 04 - 01 0053 \u5143\u5927\u96fb\u5b50 ... 6488000 2019 - 07 - 18 4 2020 - 04 - 01 0054 \u5143\u5927\u53f0\u554650 ... 10124000 2019 - 07 - 18 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockShareholding\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id stock_name InternationalCode 1 : 2020-01-02 0050 \u5143\u5927\u53f0\u7063 50 TW0000050004 2 : 2020-01-02 0051 \u5143\u5927\u4e2d\u578b 100 TW0000051002 3 : 2020-01-02 0052 \u5bcc\u90a6\u79d1\u6280 TW0000052000 4 : 2020-01-02 0053 \u5143\u5927\u96fb\u5b50 TW0000053008 5 : 2020-01-02 0054 \u5143\u5927\u53f0\u5546 50 TW0000054006 6 : 2020-01-02 0055 \u5143\u5927 MSCI\u91d1\u878d TW0000055003 ForeignInvestmentRemainingShares ForeignInvestmentShares 1 : 495506528 191493472 2 : 9471000 29000 3 : 32955000 45000 4 : 5465000 23000 5 : 9957000 167000 6 : 35465000 1189000 ForeignInvestmentRemainRatio ForeignInvestmentSharesRatio 1 : 0 0 2 : 0 0 3 : 0 0 4 : 0 0 5 : 0 0 6 : 0 0 ForeignInvestmentUpperLimitRatio ChineseInvestmentUpperLimitRatio 1 : 100 100 2 : 100 100 3 : 100 100 4 : 100 100 5 : 100 100 6 : 100 100 NumberOfSharesIssued RecentlyDeclareDate note 1 : 687000000 2019-07-18 2 : 9500000 2019-07-18 3 : 33000000 2019-07-18 4 : 5488000 2019-07-18 5 : 10124000 2019-07-18 6 : 36654000 2019-07-18","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstockholdingsharesper","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockHoldingSharesPer\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id HoldingSharesLevel people percent unit 0 2019 - 01 - 19 2330 1 - 999 144921.0 0.12 31366096 1 2019 - 01 - 19 2330 1 , 000 - 5 , 000 153113.0 1.19 311094603 2 2019 - 01 - 19 2330 10 , 001 - 15 , 000 9248.0 0.43 112987890 3 2019 - 01 - 19 2330 100 , 001 - 200 , 000 1585.0 0.85 220910983 4 2019 - 01 - 19 2330 15 , 001 - 20 , 000 4411.0 0.29 77704397 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockHoldingSharesPer\" , data_id = \"2330\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id HoldingSharesLevel people percent unit 1 : 2019-01-19 2330 1-999 144921.0 0.12 31366096 2 : 2019-01-19 2330 1 , 000-5 , 000 153113.0 1.19 311094603 3 : 2019-01-19 2330 10 , 001-15 , 000 9248.0 0.43 112987890 4 : 2019-01-19 2330 100 , 001-200 , 000 1585.0 0.85 220910983 5 : 2019-01-19 2330 15 , 001-20 , 000 4411.0 0.29 77704397 6 : 2019-01-19 2330 20 , 001-30 , 000 4715.0 0.44 115199487","title":"\u80a1\u6771\u6301\u80a1\u5206\u7d1a\u8868 TaiwanStockHoldingSharesPer"},{"location":"tutor/TaiwanMarket/Chip/#_4","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockHoldingSharesPer\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) date stock_id HoldingSharesLevel people percent unit 0 2020 - 04 - 01 1101 1 - 999 78054 0.26 14398612 1 2020 - 04 - 01 1101 1 , 000 - 5 , 000 84289 3.21 175508653 2 2020 - 04 - 01 1101 10 , 001 - 15 , 000 7517 1.65 90220853 3 2020 - 04 - 01 1101 100 , 001 - 200 , 000 1090 2.69 147442198 4 2020 - 04 - 01 1101 15 , 001 - 20 , 000 3273 1.04 57295266 ... ... ... ... ... ... ... 27595 2020 - 04 - 01 9962 50 , 001 - 100 , 000 80 6.29 5677217 27596 2020 - 04 - 01 9962 600 , 001 - 800 , 000 3 2.30 2083808 27597 2020 - 04 - 01 9962 800 , 001 - 1 , 000 , 000 1 0.91 826633 27598 2020 - 04 - 01 9962 more than 1 , 000 , 001 17 51.01 46030201 27599 2020 - 04 - 01 9962 total 4138 100.00 90220260 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockHoldingSharesPer\" , start_date = \"2020-04-01\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id HoldingSharesLevel people percent unit 1 : 2020-04-01 1101 1-999 78054 0.26 14398612 2 : 2020-04-01 1101 1 , 000-5 , 000 84289 3.21 175508653 3 : 2020-04-01 1101 10 , 001-15 , 000 7517 1.65 90220853 4 : 2020-04-01 1101 100 , 001-200 , 000 1090 2.69 147442198 5 : 2020-04-01 1101 15 , 001-20 , 000 3273 1.04 57295266 6 : 2020-04-01 1101 20 , 001-30 , 000 3670 1.62 88740328","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Chip/#taiwanstocksecuritieslending","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockSecuritiesLending\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id transaction_type volume fee_rate close original_return_date original_lending_period 0 2019 - 01 - 02 2330 \u7af6\u50f9 122 0.1 219.5 2019 - 07 - 02 181 1 2019 - 01 - 03 2330 \u8b70\u501f 600 0.17 215.5 2019 - 07 - 03 181 2 2019 - 01 - 04 2330 \u7af6\u50f9 178 0.1 208.0 2019 - 07 - 04 181 3 2019 - 01 - 07 2330 \u7af6\u50f9 64 0.1 213.0 2019 - 07 - 05 179 4 2019 - 01 - 08 2330 \u8b70\u501f 450 0.59 211.0 2019 - 07 - 08 181 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockSecuritiesLending\" , data_id = \"2330\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id transaction_type volume fee_rate close original_return_date 1 : 2019-01-02 2330 \u7af6\u50f9 122 0.1 219.5 2019-07-02 2 : 2019-01-03 2330 \u8b70\u501f 600 0.17 215.5 2019-07-03 3 : 2019-01-04 2330 \u7af6\u50f9 178 0.1 208.0 2019-07-04 4 : 2019-01-07 2330 \u7af6\u50f9 64 0.1 213.0 2019-07-05 5 : 2019-01-08 2330 \u8b70\u501f 450 0.59 211.0 2019-07-08 6 : 2019-01-09 2330 \u8b70\u501f 3000 0.59 215.5 2019-07-09 original_lending_period 1 : 181 2 : 181 3 : 181 4 : 179 5 : 181 6 : 181","title":"\u501f\u5238\u6210\u4ea4\u660e\u7d30 TaiwanStockSecuritiesLending"},{"location":"tutor/TaiwanMarket/Chip/#_5","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockSecuritiesLending\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) date stock_id transaction_type volume fee_rate close original_return_date original_lending_period 0 2020 - 04 - 01 1101 \u7af6\u50f9 436 0.70 39.0 2020 - 09 - 30 182 1 2020 - 04 - 01 1101 \u8b70\u501f 397 0.25 39.0 2020 - 09 - 30 182 2 2020 - 04 - 01 1101 \u8b70\u501f 760 0.25 39.0 2020 - 09 - 30 182 3 2020 - 04 - 01 1102 \u8b70\u501f 150 0.25 38.6 2020 - 09 - 30 182 4 2020 - 04 - 01 1102 \u8b70\u501f 770 1.05 38.6 2020 - 09 - 30 182 .. ... ... ... ... ... ... ... ... 500 2020 - 04 - 01 9938 \u8b70\u501f 60 3.00 53.7 2020 - 09 - 30 182 501 2020 - 04 - 01 9938 \u8b70\u501f 60 3.00 53.7 2020 - 09 - 30 182 502 2020 - 04 - 01 9944 \u8b70\u501f 16 20.00 15.5 2020 - 09 - 30 182 503 2020 - 04 - 01 9958 \u7af6\u50f9 60 6.00 78.9 2020 - 09 - 30 182 504 2020 - 04 - 01 9958 \u7af6\u50f9 60 6.00 78.9 2020 - 09 - 30 182 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockSecuritiesLending\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id transaction_type volume fee_rate close original_return_date 1 : 2020-01-02 0050 \u7af6\u50f9 300 0.5 97.65 2020-07-01 2 : 2020-01-02 0050 \u7af6\u50f9 300 0.5 97.65 2020-07-01 3 : 2020-01-02 0052 \u7af6\u50f9 45 4 73.3 2020-07-02 4 : 2020-01-02 0052 \u7af6\u50f9 45 4 73.3 2020-07-02 5 : 2020-01-02 00633L \u7af6\u50f9 150 1.5 51.1 2020-07-02 6 : 2020-01-02 00633L \u7af6\u50f9 150 1.5 51.1 2020-07-02 original_lending_period 1 : 181 2 : 181 3 : 182 4 : 182 5 : 182 6 : 182","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/DataList/","text":"\u5728\u53f0\u7063\u91d1\u878d\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 28 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u6280\u8853\u9762 Technical \u00b6 \u53f0\u80a1\u7e3d\u89bd TaiwanStockInfo \u80a1\u50f9\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanStockPrice \u5373\u6642\u80a1\u50f9 TaiwanStockPriceTick \u5373\u6642\u6700\u4f73\u4e94\u6a94 TaiwanStockPriceBidAsk \u500b\u80a1 PER\u3001PBR \u8cc7\u6599\u8868 TaiwanStockPER \u6bcf 5 \u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 TaiwanStockStatisticsOfOrderBookAndTrade \u52a0\u6b0a\u6307\u6578 TaiwanVariousIndicators5Seconds \u7c4c\u78bc\u9762 Chip \u00b6 \u500b\u80a1\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockMarginPurchaseShortSale \u6574\u9ad4\u5e02\u5834\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockTotalMarginPurchaseShortSale \u500b\u80a1\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockInstitutionalInvestorsBuySell \u6574\u9ad4\u4e09\u5927\u5e02\u5834\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockTotalInstitutionalInvestors \u5916\u8cc7\u6301\u80a1\u8868 TaiwanStockShareholding \u80a1\u6b0a\u6301\u80a1\u5206\u7d1a\u8868 TaiwanStockHoldingSharesPer \u501f\u5238\u6210\u4ea4\u660e\u7d30 TaiwanStockSecuritiesLending \u57fa\u672c\u9762 Fundamental \u00b6 \u73fe\u91d1\u6d41\u91cf\u8868 TaiwanStockCashFlowsStatement \u7d9c\u5408\u640d\u76ca\u8868 TaiwanStockFinancialStatements \u8cc7\u7522\u8ca0\u50b5\u8868 TaiwanStockBalanceSheet \u80a1\u5229\u653f\u7b56\u8868 TaiwanStockDividend \u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868 TaiwanStockDividendResult \u6708\u71df\u6536\u8868 TaiwanStockMonthRevenue \u884d\u751f\u6027\u91d1\u878d\u5546\u54c1 Derivative \u00b6 \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9\u7e3d\u89bd TaiwanFutOptTickInfo \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9 TaiwanFutOptTick \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a\u7e3d\u89bd TaiwanOptionFutureInfo \u671f\u8ca8\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanFuturesDaily \u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanOptionDaily \u671f\u8ca8\u4ea4\u6613\u660e\u7d30\u8868 TaiwanFuturesTick \u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30\u8868 TaiwanOptionTIck \u5176\u4ed6 Others \u00b6 \u76f8\u95dc\u65b0\u805e TaiwanStockNews \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u7e3d\u89bd"},{"location":"tutor/TaiwanMarket/DataList/#technical","text":"\u53f0\u80a1\u7e3d\u89bd TaiwanStockInfo \u80a1\u50f9\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanStockPrice \u5373\u6642\u80a1\u50f9 TaiwanStockPriceTick \u5373\u6642\u6700\u4f73\u4e94\u6a94 TaiwanStockPriceBidAsk \u500b\u80a1 PER\u3001PBR \u8cc7\u6599\u8868 TaiwanStockPER \u6bcf 5 \u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 TaiwanStockStatisticsOfOrderBookAndTrade \u52a0\u6b0a\u6307\u6578 TaiwanVariousIndicators5Seconds","title":"\u6280\u8853\u9762 Technical"},{"location":"tutor/TaiwanMarket/DataList/#chip","text":"\u500b\u80a1\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockMarginPurchaseShortSale \u6574\u9ad4\u5e02\u5834\u878d\u8cc7\u878d\u52b5\u8868 TaiwanStockTotalMarginPurchaseShortSale \u500b\u80a1\u4e09\u5927\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockInstitutionalInvestorsBuySell \u6574\u9ad4\u4e09\u5927\u5e02\u5834\u6cd5\u4eba\u8cb7\u8ce3\u8868 TaiwanStockTotalInstitutionalInvestors \u5916\u8cc7\u6301\u80a1\u8868 TaiwanStockShareholding \u80a1\u6b0a\u6301\u80a1\u5206\u7d1a\u8868 TaiwanStockHoldingSharesPer \u501f\u5238\u6210\u4ea4\u660e\u7d30 TaiwanStockSecuritiesLending","title":"\u7c4c\u78bc\u9762 Chip"},{"location":"tutor/TaiwanMarket/DataList/#fundamental","text":"\u73fe\u91d1\u6d41\u91cf\u8868 TaiwanStockCashFlowsStatement \u7d9c\u5408\u640d\u76ca\u8868 TaiwanStockFinancialStatements \u8cc7\u7522\u8ca0\u50b5\u8868 TaiwanStockBalanceSheet \u80a1\u5229\u653f\u7b56\u8868 TaiwanStockDividend \u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868 TaiwanStockDividendResult \u6708\u71df\u6536\u8868 TaiwanStockMonthRevenue","title":"\u57fa\u672c\u9762 Fundamental"},{"location":"tutor/TaiwanMarket/DataList/#derivative","text":"\u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9\u7e3d\u89bd TaiwanFutOptTickInfo \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9 TaiwanFutOptTick \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a\u7e3d\u89bd TaiwanOptionFutureInfo \u671f\u8ca8\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanFuturesDaily \u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanOptionDaily \u671f\u8ca8\u4ea4\u6613\u660e\u7d30\u8868 TaiwanFuturesTick \u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30\u8868 TaiwanOptionTIck","title":"\u884d\u751f\u6027\u91d1\u878d\u5546\u54c1 Derivative"},{"location":"tutor/TaiwanMarket/DataList/#others","text":"\u76f8\u95dc\u65b0\u805e TaiwanStockNews \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u5176\u4ed6 Others"},{"location":"tutor/TaiwanMarket/Derivative/","text":"\u5728\u53f0\u80a1\u884d\u751f\u6027\u5546\u54c1\u8cc7\u6599\uff0c\u6211\u5011\u64c1\u6709 7 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9\u7e3d\u89bd TaiwanFutOptTickInfo \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9 TaiwanFutOptTick \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a\u7e3d\u89bd TaiwanOptionFutureInfo \u671f\u8ca8\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanFuturesDaily \u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanOptionDaily \u671f\u8ca8\u4ea4\u6613\u660e\u7d30\u8868 TaiwanFuturesTick \u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30\u8868 TaiwanOptionTIck \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9\u7e3d\u89bd TaiwanFutOptTickInfo \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFutOptTickInfo\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) code callput date name listing_date update_date expire_price 0 TGO05200N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020 - 03 - 17 2020 - 05 - 27 52000.0 1 TGO05400N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020 - 03 - 03 2020 - 05 - 27 54000.0 2 TGO05600N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020 - 02 - 26 2020 - 05 - 27 56000.0 3 TGO06300N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020 - 02 - 26 2020 - 05 - 27 63000.0 4 CAO00600O1 \u8ce3\u6b0a 2021 / 03 \u5357\u4e9e\u80a1\u7968\u9078\u64c7\u6b0a 2020 - 04 - 16 2020 - 05 - 27 600.0 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFutOptTickInfo\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) code callput date name listing_date update_date expire_price 1 : TGO05200N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020-03-17 2020-05-27 52000 2 : TGO05400N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020-03-03 2020-05-27 54000 3 : TGO05600N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020-02-26 2020-05-27 56000 4 : TGO06300N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020-02-26 2020-05-27 63000 5 : CAO00600O1 \u8ce3\u6b0a 2021 / 03 \u5357\u4e9e\u80a1\u7968\u9078\u64c7\u6b0a 2020-04-16 2020-05-27 600 6 : CAO00700O1 \u8ce3\u6b0a 2021 / 03 \u5357\u4e9e\u80a1\u7968\u9078\u64c7\u6b0a 2020-04-16 2020-05-27 700 \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9 TaiwanFutOptTick \u00b6 \u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u53ea\u63d0\u4f9b date \u7576\u5929 data Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFutOptTick\" , \"data_id\" : \"TXFA1\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date Time Close Volume futopt_id TickType 0 2020 / 05 / 16 04 : 58 : 01.867000 [ 10737.0 ] [ 1 ] TXFA1 1 1 2020 / 05 / 16 00 : 57 : 21.057000 [ 10714.0 ] [ 1 ] TXFA1 2 2 2020 / 05 / 16 00 : 44 : 44.173000 [ 10724.0 ] [ 1 ] TXFA1 2 3 2020 / 05 / 16 00 : 02 : 05.424000 [ 10727.0 ] [ 1 ] TXFA1 1 4 2020 / 05 / 16 00 : 04 : 48.422000 [ 10729.0 ] [ 1 ] TXFA1 2 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFutOptTick\" , data_id = \"TXFA1\" ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) date Time Close Volume futopt_id TickType 1 : 2020 / 05 / 16 04 : 58 : 01.867000 < list > < list > TXFA1 1 2 : 2020 / 05 / 16 00 : 57 : 21.057000 < list > < list > TXFA1 2 3 : 2020 / 05 / 16 00 : 44 : 44.173000 < list > < list > TXFA1 2 4 : 2020 / 05 / 16 00 : 02 : 05.424000 < list > < list > TXFA1 1 5 : 2020 / 05 / 16 00 : 04 : 48.422000 < list > < list > TXFA1 2 6 : 2020 / 05 / 16 00 : 00 : 38.929000 < list > < list > TXFA1 2 \u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a\u7e3d\u89bd TaiwanOptionFutureInfo \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionFutureInfo\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) code type 0 AAA TaiwanOptionDaily 1 AAB TaiwanOptionDaily 2 AAO TaiwanOptionDaily 3 ABA TaiwanOptionDaily 4 ABO TaiwanOptionDaily R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionFutureInfo\" ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) code type 1 : AAA TaiwanOptionDaily 2 : AAB TaiwanOptionDaily 3 : AAO TaiwanOptionDaily 4 : ABA TaiwanOptionDaily 5 : ABO TaiwanOptionDaily 6 : ACA TaiwanOptionDaily \u671f\u8ca8\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanFuturesDaily \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesDaily\" , \"data_id\" : \"TX\" , \"start_date\" : \"2020-04-01\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date future_id contract_date open max min close spread spread_per volume settlement_price open_interest trading_session 0 2020 - 04 - 01 TX 202004 9630.0 9665.0 9551.0 9575.0 - 20.0 - 0.21 73771 0.0 0 after_market 1 2020 - 04 - 01 TX 202004 9588.0 9650.0 9551.0 9552.0 - 43.0 - 0.45 116273 9555.0 83725 position 2 2020 - 04 - 01 TX 202004 / 202005 0.0 0.0 0.0 0.0 0.0 0.0 0 0.0 0 after_market 3 2020 - 04 - 01 TX 202004 / 202005 - 68.0 - 68.0 - 70.0 - 69.0 0.0 0.0 381 0.0 0 position 4 2020 - 04 - 01 TX 202004 / 202006 - 137.0 - 137.0 - 137.0 - 137.0 0.0 0.0 10 0.0 0 after_market R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesDaily\" , data_id = \"TX\" , start_date = \"2020-04-01\" ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) date future_id contract_date open max min close spread spread_per volume 1 : 2020-04-01 TX 202004 9630.0 9665.0 9551.0 9575.0 -20.0 -0.21 73771 2 : 2020-04-01 TX 202004 9588.0 9650.0 9551.0 9552.0 -43.0 -0.45 116273 3 : 2020-04-01 TX 202004 / 202005 0.0 0.0 0.0 0.0 0.0 0.0 0 4 : 2020-04-01 TX 202004 / 202005 -68.0 -68.0 -70.0 -69.0 0.0 0.0 381 5 : 2020-04-01 TX 202004 / 202006 -137.0 -137.0 -137.0 -137.0 0.0 0.0 10 6 : 2020-04-01 TX 202004 / 202006 -139.0 -139.0 -139.0 -139.0 0.0 0.0 5 settlement_price open_interest trading_session 1 : 0.0 0 after_market 2 : 9555.0 83725 position 3 : 0.0 0 after_market 4 : 0.0 0 position 5 : 0.0 0 after_market 6 : 0.0 0 position \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528) \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesDaily\" , \"start_date\" : \"2020-04-01\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date futures_id contract_date open max min close spread spread_per volume settlement_price open_interest trading_session 0 2020 - 04 - 01 BRF 202005 690.0 704.0 681.0 681.0 - 9.0 - 1.30 45 0.0 0 after_market 1 2020 - 04 - 01 BRF 202006 818.0 833.0 789.5 791.0 - 13.0 - 1.62 77 0.0 0 after_market 2 2020 - 04 - 01 BRF 202006 795.0 799.0 774.0 774.0 - 30.0 - 3.73 63 774.0 435 position 3 2020 - 04 - 01 BRF 202006 / 202007 100.0 100.0 100.0 100.0 0.0 0.00 1 0.0 0 after_market 4 2020 - 04 - 01 BRF 202007 910.5 910.5 910.5 910.5 43.0 4.96 2 0.0 0 after_market R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesDaily\" , start_date = \"2020-04-01\" ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) date futures_id contract_date open max min close spread spread_per 1 : 2020-04-01 BRF 202005 690 704 681 681 -9 -1.3 2 : 2020-04-01 BRF 202006 818 833 789.5 791 -13 -1.62 3 : 2020-04-01 BRF 202006 795 799 774 774 -30 -3.73 4 : 2020-04-01 BRF 202006 / 202007 100 100 100 100 0 0 5 : 2020-04-01 BRF 202007 910.5 910.5 910.5 910.5 43 4.96 6 : 2020-04-01 BRF 202007 881 881 874.5 874.5 7 0.81 volume settlement_price open_interest trading_session 1 : 45 0 0 after_market 2 : 77 0 0 after_market 3 : 63 774 435 position 4 : 1 0 0 after_market 5 : 2 0 0 after_market 6 : 3 874.5 3 position \u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanOptionDaily \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionDaily\" , \"data_id\" : \"TXO\" , \"start_date\" : \"2020-04-01\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date option_id contract_date strike_price call_put open max min close volume settlement_price open_interest trading_session 0 2020 - 04 - 01 TXO 202004 7300.0 call 0.0 0.0 0.0 0.0 0 0.0 0 after_market 1 2020 - 04 - 01 TXO 202004 7300.0 call 0.0 0.0 0.0 0.0 0 2270.0 26 position 2 2020 - 04 - 01 TXO 202004 7400.0 call 0.0 0.0 0.0 0.0 0 0.0 0 after_market 3 2020 - 04 - 01 TXO 202004 7400.0 call 0.0 0.0 0.0 0.0 0 2170.0 0 position 4 2020 - 04 - 01 TXO 202004 7500.0 call 0.0 0.0 0.0 0.0 0 0.0 0 after_market R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionDaily\" , data_id = \"TXO\" , start_date = \"2020-04-01\" ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) date option_id contract_date strike_price call_put open max min close volume 1 : 2020-04-01 TXO 202004 7300.0 call 0.0 0.0 0.0 0.0 0 2 : 2020-04-01 TXO 202004 7300.0 call 0.0 0.0 0.0 0.0 0 3 : 2020-04-01 TXO 202004 7400.0 call 0.0 0.0 0.0 0.0 0 4 : 2020-04-01 TXO 202004 7400.0 call 0.0 0.0 0.0 0.0 0 5 : 2020-04-01 TXO 202004 7500.0 call 0.0 0.0 0.0 0.0 0 6 : 2020-04-01 TXO 202004 7500.0 call 0.0 0.0 0.0 0.0 0 settlement_price open_interest trading_session 1 : 0.0 0 after_market 2 : 2270.0 26 position 3 : 0.0 0 after_market 4 : 2170.0 0 position 5 : 0.0 0 after_market 6 : 2080.0 4 position \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528) \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionDaily\" , \"start_date\" : \"2020-04-01\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date option_id contract_date strike_price call_put open max min close volume settlement_price open_interest trading_session 0 2020 - 04 - 01 CAO 202004 55.0 put 2.22 2.22 2.22 2.22 5 2.48 15 position 1 2020 - 04 - 01 CCO 202004 12.0 call 1.74 1.74 1.74 1.74 5 1.80 5 position 2 2020 - 04 - 01 CCO 202004 12.0 put 0.04 0.04 0.04 0.04 3 0.01 3 position 3 2020 - 04 - 01 CCO 202004 13.0 put 0.24 0.24 0.24 0.24 1 0.03 10 position 4 2020 - 04 - 01 CCO 202004 14.0 put 0.65 0.65 0.65 0.65 2 0.37 8 position R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionDaily\" , start_date = \"2020-04-01\" ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) date option_id contract_date strike_price call_put open max min close 1 : 2020-04-01 CAO 202004 55 put 2.22 2.22 2.22 2.22 2 : 2020-04-01 CCO 202004 12 call 1.74 1.74 1.74 1.74 3 : 2020-04-01 CCO 202004 12 put 0.04 0.04 0.04 0.04 4 : 2020-04-01 CCO 202004 13 put 0.24 0.24 0.24 0.24 5 : 2020-04-01 CCO 202004 14 put 0.65 0.65 0.65 0.65 6 : 2020-04-01 CCO 202004 14.5 put 1.01 1.01 1.01 1.01 volume settlement_price open_interest trading_session 1 : 5 2.48 15 position 2 : 5 1.8 5 position 3 : 3 0.01 3 position 4 : 1 0.03 10 position 5 : 2 0.37 8 position 6 : 5 0.75 14 position \u671f\u8ca8\u4ea4\u6613\u660e\u7d30\u8868 TaiwanFuturesTick \u00b6 \u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u53ea\u63d0\u4f9b date \u7576\u5929 data Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesTick\" , \"data_id\" : \"MTX\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) contract_date date futures_id price volume 0 202004 2020 - 04 - 01 00 : 00 : 01 MTX 9641.0 2 1 202004 2020 - 04 - 01 00 : 00 : 01 MTX 9641.0 2 2 202004 2020 - 04 - 01 00 : 00 : 01 MTX 9641.0 6 3 202004 2020 - 04 - 01 00 : 00 : 02 MTX 9640.0 2 4 202004 2020 - 04 - 01 00 : 00 : 02 MTX 9640.0 2 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesTick\" , data_id = \"MTX\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) contract_date date futures_id price volume 1 : 202001 2020-01-02 08 : 45 : 00 MTX 12045.0 852 2 : 202001 2020-01-02 08 : 45 : 00 MTX 12045.0 2 3 : 202001 2020-01-02 08 : 45 : 00 MTX 12045.0 2 4 : 202001 2020-01-02 08 : 45 : 00 MTX 12045.0 2 5 : 202001 2020-01-02 08 : 45 : 00 MTX 12045.0 2 6 : 202001 2020-01-02 08 : 45 : 00 MTX 12045.0 2 \u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30\u8868 TaiwanOptionTick \u00b6 \u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u53ea\u63d0\u4f9b date \u7576\u5929 data Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionTick\" , \"data_id\" : \"OCO\" , \"start_date\" : \"2019-09-05\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionTick\" , data_id = \"OCO\" , start_date = \"2019-09-05\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df )","title":"\u884d\u751f\u6027\u91d1\u878d\u5546\u54c1"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanfutopttickinfo","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFutOptTickInfo\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) code callput date name listing_date update_date expire_price 0 TGO05200N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020 - 03 - 17 2020 - 05 - 27 52000.0 1 TGO05400N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020 - 03 - 03 2020 - 05 - 27 54000.0 2 TGO05600N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020 - 02 - 26 2020 - 05 - 27 56000.0 3 TGO06300N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020 - 02 - 26 2020 - 05 - 27 63000.0 4 CAO00600O1 \u8ce3\u6b0a 2021 / 03 \u5357\u4e9e\u80a1\u7968\u9078\u64c7\u6b0a 2020 - 04 - 16 2020 - 05 - 27 600.0 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFutOptTickInfo\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) code callput date name listing_date update_date expire_price 1 : TGO05200N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020-03-17 2020-05-27 52000 2 : TGO05400N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020-03-03 2020-05-27 54000 3 : TGO05600N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020-02-26 2020-05-27 56000 4 : TGO06300N1 \u8ce3\u6b0a 2021 / 02 \u9ec3\u91d1\u9078\u64c7\u6b0a 2020-02-26 2020-05-27 63000 5 : CAO00600O1 \u8ce3\u6b0a 2021 / 03 \u5357\u4e9e\u80a1\u7968\u9078\u64c7\u6b0a 2020-04-16 2020-05-27 600 6 : CAO00700O1 \u8ce3\u6b0a 2021 / 03 \u5357\u4e9e\u80a1\u7968\u9078\u64c7\u6b0a 2020-04-16 2020-05-27 700","title":"\u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9\u7e3d\u89bd TaiwanFutOptTickInfo"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanfutopttick","text":"\u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u53ea\u63d0\u4f9b date \u7576\u5929 data Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFutOptTick\" , \"data_id\" : \"TXFA1\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date Time Close Volume futopt_id TickType 0 2020 / 05 / 16 04 : 58 : 01.867000 [ 10737.0 ] [ 1 ] TXFA1 1 1 2020 / 05 / 16 00 : 57 : 21.057000 [ 10714.0 ] [ 1 ] TXFA1 2 2 2020 / 05 / 16 00 : 44 : 44.173000 [ 10724.0 ] [ 1 ] TXFA1 2 3 2020 / 05 / 16 00 : 02 : 05.424000 [ 10727.0 ] [ 1 ] TXFA1 1 4 2020 / 05 / 16 00 : 04 : 48.422000 [ 10729.0 ] [ 1 ] TXFA1 2 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFutOptTick\" , data_id = \"TXFA1\" ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) date Time Close Volume futopt_id TickType 1 : 2020 / 05 / 16 04 : 58 : 01.867000 < list > < list > TXFA1 1 2 : 2020 / 05 / 16 00 : 57 : 21.057000 < list > < list > TXFA1 2 3 : 2020 / 05 / 16 00 : 44 : 44.173000 < list > < list > TXFA1 2 4 : 2020 / 05 / 16 00 : 02 : 05.424000 < list > < list > TXFA1 1 5 : 2020 / 05 / 16 00 : 04 : 48.422000 < list > < list > TXFA1 2 6 : 2020 / 05 / 16 00 : 00 : 38.929000 < list > < list > TXFA1 2","title":"\u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u5373\u6642\u5831\u50f9 TaiwanFutOptTick"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanoptionfutureinfo","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionFutureInfo\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) code type 0 AAA TaiwanOptionDaily 1 AAB TaiwanOptionDaily 2 AAO TaiwanOptionDaily 3 ABA TaiwanOptionDaily 4 ABO TaiwanOptionDaily R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionFutureInfo\" ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) code type 1 : AAA TaiwanOptionDaily 2 : AAB TaiwanOptionDaily 3 : AAO TaiwanOptionDaily 4 : ABA TaiwanOptionDaily 5 : ABO TaiwanOptionDaily 6 : ACA TaiwanOptionDaily","title":"\u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a\u7e3d\u89bd TaiwanOptionFutureInfo"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanfuturesdaily","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesDaily\" , \"data_id\" : \"TX\" , \"start_date\" : \"2020-04-01\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date future_id contract_date open max min close spread spread_per volume settlement_price open_interest trading_session 0 2020 - 04 - 01 TX 202004 9630.0 9665.0 9551.0 9575.0 - 20.0 - 0.21 73771 0.0 0 after_market 1 2020 - 04 - 01 TX 202004 9588.0 9650.0 9551.0 9552.0 - 43.0 - 0.45 116273 9555.0 83725 position 2 2020 - 04 - 01 TX 202004 / 202005 0.0 0.0 0.0 0.0 0.0 0.0 0 0.0 0 after_market 3 2020 - 04 - 01 TX 202004 / 202005 - 68.0 - 68.0 - 70.0 - 69.0 0.0 0.0 381 0.0 0 position 4 2020 - 04 - 01 TX 202004 / 202006 - 137.0 - 137.0 - 137.0 - 137.0 0.0 0.0 10 0.0 0 after_market R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesDaily\" , data_id = \"TX\" , start_date = \"2020-04-01\" ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) date future_id contract_date open max min close spread spread_per volume 1 : 2020-04-01 TX 202004 9630.0 9665.0 9551.0 9575.0 -20.0 -0.21 73771 2 : 2020-04-01 TX 202004 9588.0 9650.0 9551.0 9552.0 -43.0 -0.45 116273 3 : 2020-04-01 TX 202004 / 202005 0.0 0.0 0.0 0.0 0.0 0.0 0 4 : 2020-04-01 TX 202004 / 202005 -68.0 -68.0 -70.0 -69.0 0.0 0.0 381 5 : 2020-04-01 TX 202004 / 202006 -137.0 -137.0 -137.0 -137.0 0.0 0.0 10 6 : 2020-04-01 TX 202004 / 202006 -139.0 -139.0 -139.0 -139.0 0.0 0.0 5 settlement_price open_interest trading_session 1 : 0.0 0 after_market 2 : 9555.0 83725 position 3 : 0.0 0 after_market 4 : 0.0 0 position 5 : 0.0 0 after_market 6 : 0.0 0 position","title":"\u671f\u8ca8\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanFuturesDaily"},{"location":"tutor/TaiwanMarket/Derivative/#_1","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesDaily\" , \"start_date\" : \"2020-04-01\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date futures_id contract_date open max min close spread spread_per volume settlement_price open_interest trading_session 0 2020 - 04 - 01 BRF 202005 690.0 704.0 681.0 681.0 - 9.0 - 1.30 45 0.0 0 after_market 1 2020 - 04 - 01 BRF 202006 818.0 833.0 789.5 791.0 - 13.0 - 1.62 77 0.0 0 after_market 2 2020 - 04 - 01 BRF 202006 795.0 799.0 774.0 774.0 - 30.0 - 3.73 63 774.0 435 position 3 2020 - 04 - 01 BRF 202006 / 202007 100.0 100.0 100.0 100.0 0.0 0.00 1 0.0 0 after_market 4 2020 - 04 - 01 BRF 202007 910.5 910.5 910.5 910.5 43.0 4.96 2 0.0 0 after_market R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesDaily\" , start_date = \"2020-04-01\" ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) date futures_id contract_date open max min close spread spread_per 1 : 2020-04-01 BRF 202005 690 704 681 681 -9 -1.3 2 : 2020-04-01 BRF 202006 818 833 789.5 791 -13 -1.62 3 : 2020-04-01 BRF 202006 795 799 774 774 -30 -3.73 4 : 2020-04-01 BRF 202006 / 202007 100 100 100 100 0 0 5 : 2020-04-01 BRF 202007 910.5 910.5 910.5 910.5 43 4.96 6 : 2020-04-01 BRF 202007 881 881 874.5 874.5 7 0.81 volume settlement_price open_interest trading_session 1 : 45 0 0 after_market 2 : 77 0 0 after_market 3 : 63 774 435 position 4 : 1 0 0 after_market 5 : 2 0 0 after_market 6 : 3 874.5 3 position","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanoptiondaily","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionDaily\" , \"data_id\" : \"TXO\" , \"start_date\" : \"2020-04-01\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date option_id contract_date strike_price call_put open max min close volume settlement_price open_interest trading_session 0 2020 - 04 - 01 TXO 202004 7300.0 call 0.0 0.0 0.0 0.0 0 0.0 0 after_market 1 2020 - 04 - 01 TXO 202004 7300.0 call 0.0 0.0 0.0 0.0 0 2270.0 26 position 2 2020 - 04 - 01 TXO 202004 7400.0 call 0.0 0.0 0.0 0.0 0 0.0 0 after_market 3 2020 - 04 - 01 TXO 202004 7400.0 call 0.0 0.0 0.0 0.0 0 2170.0 0 position 4 2020 - 04 - 01 TXO 202004 7500.0 call 0.0 0.0 0.0 0.0 0 0.0 0 after_market R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionDaily\" , data_id = \"TXO\" , start_date = \"2020-04-01\" ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) date option_id contract_date strike_price call_put open max min close volume 1 : 2020-04-01 TXO 202004 7300.0 call 0.0 0.0 0.0 0.0 0 2 : 2020-04-01 TXO 202004 7300.0 call 0.0 0.0 0.0 0.0 0 3 : 2020-04-01 TXO 202004 7400.0 call 0.0 0.0 0.0 0.0 0 4 : 2020-04-01 TXO 202004 7400.0 call 0.0 0.0 0.0 0.0 0 5 : 2020-04-01 TXO 202004 7500.0 call 0.0 0.0 0.0 0.0 0 6 : 2020-04-01 TXO 202004 7500.0 call 0.0 0.0 0.0 0.0 0 settlement_price open_interest trading_session 1 : 0.0 0 after_market 2 : 2270.0 26 position 3 : 0.0 0 after_market 4 : 2170.0 0 position 5 : 0.0 0 after_market 6 : 2080.0 4 position","title":"\u9078\u64c7\u6b0a\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanOptionDaily"},{"location":"tutor/TaiwanMarket/Derivative/#_2","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionDaily\" , \"start_date\" : \"2020-04-01\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date option_id contract_date strike_price call_put open max min close volume settlement_price open_interest trading_session 0 2020 - 04 - 01 CAO 202004 55.0 put 2.22 2.22 2.22 2.22 5 2.48 15 position 1 2020 - 04 - 01 CCO 202004 12.0 call 1.74 1.74 1.74 1.74 5 1.80 5 position 2 2020 - 04 - 01 CCO 202004 12.0 put 0.04 0.04 0.04 0.04 3 0.01 3 position 3 2020 - 04 - 01 CCO 202004 13.0 put 0.24 0.24 0.24 0.24 1 0.03 10 position 4 2020 - 04 - 01 CCO 202004 14.0 put 0.65 0.65 0.65 0.65 2 0.37 8 position R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionDaily\" , start_date = \"2020-04-01\" ) ) data = response %>% content df = do.call ( 'rbind' , data $ data ) %>% data.table head ( df ) date option_id contract_date strike_price call_put open max min close 1 : 2020-04-01 CAO 202004 55 put 2.22 2.22 2.22 2.22 2 : 2020-04-01 CCO 202004 12 call 1.74 1.74 1.74 1.74 3 : 2020-04-01 CCO 202004 12 put 0.04 0.04 0.04 0.04 4 : 2020-04-01 CCO 202004 13 put 0.24 0.24 0.24 0.24 5 : 2020-04-01 CCO 202004 14 put 0.65 0.65 0.65 0.65 6 : 2020-04-01 CCO 202004 14.5 put 1.01 1.01 1.01 1.01 volume settlement_price open_interest trading_session 1 : 5 2.48 15 position 2 : 5 1.8 5 position 3 : 3 0.01 3 position 4 : 1 0.03 10 position 5 : 2 0.37 8 position 6 : 5 0.75 14 position","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanfuturestick","text":"\u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u53ea\u63d0\u4f9b date \u7576\u5929 data Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanFuturesTick\" , \"data_id\" : \"MTX\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) contract_date date futures_id price volume 0 202004 2020 - 04 - 01 00 : 00 : 01 MTX 9641.0 2 1 202004 2020 - 04 - 01 00 : 00 : 01 MTX 9641.0 2 2 202004 2020 - 04 - 01 00 : 00 : 01 MTX 9641.0 6 3 202004 2020 - 04 - 01 00 : 00 : 02 MTX 9640.0 2 4 202004 2020 - 04 - 01 00 : 00 : 02 MTX 9640.0 2 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanFuturesTick\" , data_id = \"MTX\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) contract_date date futures_id price volume 1 : 202001 2020-01-02 08 : 45 : 00 MTX 12045.0 852 2 : 202001 2020-01-02 08 : 45 : 00 MTX 12045.0 2 3 : 202001 2020-01-02 08 : 45 : 00 MTX 12045.0 2 4 : 202001 2020-01-02 08 : 45 : 00 MTX 12045.0 2 5 : 202001 2020-01-02 08 : 45 : 00 MTX 12045.0 2 6 : 202001 2020-01-02 08 : 45 : 00 MTX 12045.0 2","title":"\u671f\u8ca8\u4ea4\u6613\u660e\u7d30\u8868 TaiwanFuturesTick"},{"location":"tutor/TaiwanMarket/Derivative/#taiwanoptiontick","text":"\u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u53ea\u63d0\u4f9b date \u7576\u5929 data Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanOptionTick\" , \"data_id\" : \"OCO\" , \"start_date\" : \"2019-09-05\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanOptionTick\" , data_id = \"OCO\" , start_date = \"2019-09-05\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df )","title":"\u9078\u64c7\u6b0a\u4ea4\u6613\u660e\u7d30\u8868 TaiwanOptionTick"},{"location":"tutor/TaiwanMarket/Fundamental/","text":"\u5728\u53f0\u80a1\u57fa\u672c\u9762\uff0c\u6211\u5011\u64c1\u6709 6 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u7d9c\u5408\u640d\u76ca\u8868 TaiwanStockFinancialStatements \u8cc7\u7522\u8ca0\u50b5\u8868 TaiwanStockBalanceSheet \u73fe\u91d1\u6d41\u91cf\u8868 TaiwanCashFlowsStatement \u80a1\u5229\u653f\u7b56\u8868 TaiwanStockDividend \u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868 TaiwanStockDividendResult \u6708\u71df\u6536\u8868 TaiwanStockMonthRevenue \u7d9c\u5408\u640d\u76ca\u8868 TaiwanStockFinancialStatements \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockFinancialStatements\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id type value origin_name 0 2019 - 03 - 31 2330 CostOfGoodsSold 1.283520e+11 \u71df\u696d\u6210\u672c 1 2019 - 03 - 31 2330 EPS 2.370000e+00 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918 \uff08 \u5143 \uff09 2 2019 - 03 - 31 2330 EquityAttributableToOwnersOfParent 6.139390e+10 \u6de8\u5229 \uff08 \u6de8\u640d \uff09 \u6b78\u5c6c\u65bc\u6bcd\u516c\u53f8\u696d\u4e3b 3 2019 - 03 - 31 2330 GrossProfit 9.035210e+10 \u71df\u696d\u6bdb\u5229 \uff08 \u6bdb\u640d \uff09 4 2019 - 03 - 31 2330 IncomeAfterTaxes 6.138730e+10 \u672c\u671f\u6de8\u5229 \uff08 \u6de8\u640d \uff09 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockFinancialStatements\" , data_id = \"2330\" , start_date = \"2019-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id type value origin_name 1 : 2019-03-31 2330 ASSO 433491000.0 \u63a1\u7528\u6b0a\u76ca\u6cd5\u8a8d\u5217\u4e4b\u95dc\u806f\u4f01\u696d\u53ca\u5408\u8cc7\u640d\u76ca\u4e4b\u4efd\u984d\u6de8\u984d 2 : 2019-03-31 2330 CostOfGoodsSold 128352000000.0 \u71df\u696d\u6210\u672c\u5408\u8a08 3 : 2019-03-31 2330 EPS 2.37 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918 4 : 2019-03-31 2330 EXDF 3218080000.0 \u570b\u5916\u71df\u904b\u6a5f\u69cb\u8ca1\u52d9\u5831\u8868\u63db\u7b97\u4e4b\u514c\u63db\u5dee\u984d 5 : 2019-03-31 2330 FinancialCost 899065000.0 \u8ca1\u52d9\u6210\u672c\u6de8\u984d 6 : 2019-03-31 2330 GrossProfit 90352100000.0 \u71df\u696d\u6bdb\u5229 ( \u6bdb\u640d ) \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528) \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockFinancialStatements\" , \"start_date\" : \"2019-03-31\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) date stock_id type value origin_name 0 2019 - 03 - 31 000116 EPS 2.400000e-01 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918 \uff08 \u5143 \uff09 1 2019 - 03 - 31 000116 EquityAttributableToOwnersOfParent 2.741590e+08 \u6de8\u5229 \uff08 \u640d \uff09 \u6b78\u5c6c\u65bc\u6bcd\u516c\u53f8\u696d\u4e3b 2 2019 - 03 - 31 000116 Expense 8.954980e+08 \u652f\u51fa\u53ca\u8cbb\u7528 3 2019 - 03 - 31 000116 Income 1.077910e+09 \u6536\u76ca 4 2019 - 03 - 31 000116 IncomeAfterTaxes 2.743220e+08 \u672c\u671f\u6de8\u5229 \uff08 \u6de8\u640d \uff09 ... ... ... ... ... ... 27267 2019 - 03 - 31 9960 TotalConsolidatedProfitForThePeriod 1.534400e+07 \u672c\u671f\u7d9c\u5408\u640d\u76ca\u7e3d\u984d 27268 2019 - 03 - 31 9960 TotalNonoperatingIncomeAndExpense 5.408000e+06 \u71df\u696d\u5916\u6536\u5165\u53ca\u652f\u51fa 27269 2019 - 03 - 31 9962 CostOfGoodsSold 5.369030e+08 \u71df\u696d\u6210\u672c 27270 2019 - 03 - 31 9962 EPS - 1.400000e-01 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918 \uff08 \u5143 \uff09 27271 2019 - 03 - 31 9962 GrossProfit 2.721000e+06 \u71df\u696d\u6bdb\u5229 \uff08 \u6bdb\u640d \uff09 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockFinancialStatements\" , start_date = \"2019-03-31\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id type value origin_name 1 : 2019-03-31 2330 ASSO 433491000.0 \u63a1\u7528\u6b0a\u76ca\u6cd5\u8a8d\u5217\u4e4b\u95dc\u806f\u4f01\u696d\u53ca\u5408\u8cc7\u640d\u76ca\u4e4b\u4efd\u984d\u6de8\u984d 2 : 2019-03-31 2330 CostOfGoodsSold 128352000000.0 \u71df\u696d\u6210\u672c\u5408\u8a08 3 : 2019-03-31 2330 EPS 2.37 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918 4 : 2019-03-31 2330 EXDF 3218080000.0 \u570b\u5916\u71df\u904b\u6a5f\u69cb\u8ca1\u52d9\u5831\u8868\u63db\u7b97\u4e4b\u514c\u63db\u5dee\u984d 5 : 2019-03-31 2330 FinancialCost 899065000.0 \u8ca1\u52d9\u6210\u672c\u6de8\u984d 6 : 2019-03-31 2330 GrossProfit 90352100000.0 \u71df\u696d\u6bdb\u5229 ( \u6bdb\u640d ) \u8cc7\u7522\u8ca0\u50b5\u8868 TaiwanStockBalanceSheet \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockBalanceSheet\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id type value origin_name 0 2019 - 03 - 31 2330 AccountsPayable 27100909000.0 \u61c9\u4ed8\u5e33\u6b3e 1 2019 - 03 - 31 2330 AccountsPayable_per 1.0 \u61c9\u4ed8\u5e33\u6b3e 2 2019 - 03 - 31 2330 AccountsPayableToRelatedParties 560941000.0 \u61c9\u4ed8\u5e33\u6b3e \uff0d \u95dc\u4fc2\u4eba 3 2019 - 03 - 31 2330 AccountsPayableToRelatedParties_per 0.0 \u61c9\u4ed8\u5e33\u6b3e \uff0d \u95dc\u4fc2\u4eba 4 2019 - 03 - 31 2330 AccountsReceivableDuefromRelatedPartiesNet 309821000.0 \u61c9\u6536\u5e33\u6b3e \uff0d \u95dc\u4fc2\u4eba\u6de8\u984d R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockBalanceSheet\" , data_id = \"2330\" , start_date = \"2019-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id type value origin_name 1 : 2019-03-31 2330 AccountsPayable 27100909000.0 \u61c9\u4ed8\u5e33\u6b3e 2 : 2019-03-31 2330 AccountsPayable_per 1.0 \u61c9\u4ed8\u5e33\u6b3e 3 : 2019-03-31 2330 AccountsPayableToRelatedParties 560941000.0 \u61c9\u4ed8\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba 4 : 2019-03-31 2330 AccountsPayableToRelatedParties_per 0.0 \u61c9\u4ed8\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba 5 : 2019-03-31 2330 AccountsReceivableDuefromRelatedPartiesNet 309821000.0 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d 6 : 2019-03-31 2330 AccountsReceivableDuefromRelatedPartiesNet_per 0.0 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528) \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockBalanceSheet\" , \"start_date\" : \"2019-03-31\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id type value origin_name 0 2019 - 03 - 31 2330 AccountsPayable 27100909000.0 \u61c9\u4ed8\u5e33\u6b3e 1 2019 - 03 - 31 2330 AccountsPayable_per 1.0 \u61c9\u4ed8\u5e33\u6b3e 2 2019 - 03 - 31 2330 AccountsPayableToRelatedParties 560941000.0 \u61c9\u4ed8\u5e33\u6b3e \uff0d \u95dc\u4fc2\u4eba 3 2019 - 03 - 31 2330 AccountsPayableToRelatedParties_per 0.0 \u61c9\u4ed8\u5e33\u6b3e \uff0d \u95dc\u4fc2\u4eba 4 2019 - 03 - 31 2330 AccountsReceivableDuefromRelatedPartiesNet 309821000.0 \u61c9\u6536\u5e33\u6b3e \uff0d \u95dc\u4fc2\u4eba\u6de8\u984d R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockBalanceSheet\" , start_date = \"2019-03-31\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id type value origin_name 1 : 2019-03-31 2330 AccountsPayable 27100909000.0 \u61c9\u4ed8\u5e33\u6b3e 2 : 2019-03-31 2330 AccountsPayable_per 1.0 \u61c9\u4ed8\u5e33\u6b3e 3 : 2019-03-31 2330 AccountsPayableToRelatedParties 560941000.0 \u61c9\u4ed8\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba 4 : 2019-03-31 2330 AccountsPayableToRelatedParties_per 0.0 \u61c9\u4ed8\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba 5 : 2019-03-31 2330 AccountsReceivableDuefromRelatedPartiesNet 309821000.0 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d 6 : 2019-03-31 2330 AccountsReceivableDuefromRelatedPartiesNet_per 0.0 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d \u73fe\u91d1\u6d41\u91cf\u8868 TaiwanStockCashFlowsStatement \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockCashFlowsStatement\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id type value origin_name 0 2019 - 03 - 31 2330 AccountsPayable 6105110000.0 \u61c9\u4ed8\u5e33\u6b3e\u589e\u52a0 ( \u6e1b\u5c11 ) 1 2019 - 03 - 31 2330 AmortizationExpense 1355340000.0 \u6524\u92b7\u8cbb\u7528 2 2019 - 03 - 31 2330 AmountDueToRelatedParties 815558000.0 \u61c9\u4ed8\u5e33\u6b3e - \u95dc\u4fc2\u4eba\u589e\u52a0 ( \u6e1b\u5c11 ) 3 2019 - 03 - 31 2330 CashBalancesBeginningOfPeriod 577815000000.0 \u671f\u521d\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d 4 2019 - 03 - 31 2330 CashBalancesEndOfPeriod 645671000000.0 \u671f\u672b\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockCashFlowsStatement\" , data_id = \"2330\" , start_date = \"2019-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id type value origin_name 1 : 2019-03-31 2330 AccountsPayable 6105110000.0 \u61c9\u4ed8\u5e33\u6b3e\u589e\u52a0 ( \u6e1b\u5c11 ) 2 : 2019-03-31 2330 AmortizationExpense 1355340000.0 \u6524\u92b7\u8cbb\u7528 3 : 2019-03-31 2330 AmountDueToRelatedParties 815558000.0 \u61c9\u4ed8\u5e33\u6b3e - \u95dc\u4fc2\u4eba\u589e\u52a0 ( \u6e1b\u5c11 ) 4 : 2019-03-31 2330 CashBalancesBeginningOfPeriod 577815000000.0 \u671f\u521d\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d 5 : 2019-03-31 2330 CashBalancesEndOfPeriod 645671000000.0 \u671f\u672b\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d 6 : 2019-03-31 2330 CashBalancesIncrease 67855900000.0 \u672c\u671f\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u589e\u52a0\uff08\u6e1b\u5c11\uff09\u6578 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528) \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockCashFlowsStatement\" , \"start_date\" : \"2019-03-31\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id type value origin_name 0 2019 - 03 - 31 2330 AccountsPayable 6105110000.0 \u61c9\u4ed8\u5e33\u6b3e\u589e\u52a0 ( \u6e1b\u5c11 ) 1 2019 - 03 - 31 2330 AmortizationExpense 1355340000.0 \u6524\u92b7\u8cbb\u7528 2 2019 - 03 - 31 2330 AmountDueToRelatedParties 815558000.0 \u61c9\u4ed8\u5e33\u6b3e - \u95dc\u4fc2\u4eba\u589e\u52a0 ( \u6e1b\u5c11 ) 3 2019 - 03 - 31 2330 CashBalancesBeginningOfPeriod 577815000000.0 \u671f\u521d\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d 4 2019 - 03 - 31 2330 CashBalancesEndOfPeriod 645671000000.0 \u671f\u672b\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockCashFlowsStatement\" , start_date = \"2019-03-31\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id type value origin_name 1 : 2019-03-31 2330 AccountsPayable 6105110000.0 \u61c9\u4ed8\u5e33\u6b3e\u589e\u52a0 ( \u6e1b\u5c11 ) 2 : 2019-03-31 2330 AmortizationExpense 1355340000.0 \u6524\u92b7\u8cbb\u7528 3 : 2019-03-31 2330 AmountDueToRelatedParties 815558000.0 \u61c9\u4ed8\u5e33\u6b3e - \u95dc\u4fc2\u4eba\u589e\u52a0 ( \u6e1b\u5c11 ) 4 : 2019-03-31 2330 CashBalancesBeginningOfPeriod 577815000000.0 \u671f\u521d\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d 5 : 2019-03-31 2330 CashBalancesEndOfPeriod 645671000000.0 \u671f\u672b\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d 6 : 2019-03-31 2330 CashBalancesIncrease 67855900000.0 \u672c\u671f\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u589e\u52a0\uff08\u6e1b\u5c11\uff09\u6578 \u80a1\u5229\u653f\u7b56\u8868 TaiwanStockStockDividend \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockStockDividend\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id year StockEarningsDistribution ... RemunerationOfDirectorsAndSupervisors ParticipateDistributionOfTotalShares AnnouncementDate AnnouncementTime 0 2019 - 06 - 30 2330 107 \u5e74 None ... None 25930380458 2019 - 06 - 06 15 : 47 : 30.000000000 1 2019 - 09 - 25 2330 108 \u5e74\u7b2c1\u5b63 None ... None 25930380458 2019 - 07 - 09 18 : 33 : 02.000000000 2 2019 - 12 - 25 2330 108 \u5e74\u7b2c2\u5b63 None ... None 25930380458 2019 - 08 - 14 15 : 27 : 02.000000000 3 2020 - 03 - 25 2330 108 \u5e74\u7b2c3\u5b63 None ... None 25930380458 2019 - 11 - 14 17 : 01 : 07.000000000 4 2020 - 06 - 24 2330 108 \u5e74\u7b2c4\u5b63 None ... None 25930380458 2020 - 02 - 14 15 : 10 : 50.000000000 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockStockDividend\" , data_id = \"2330\" , start_date = \"2019-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id year StockEarningsDistribution StockStatutorySurplus 1 : 2019-06-30 2330 107 \u5e74 None None 2 : 2019-09-25 2330 108 \u5e74\u7b2c 1 \u5b63 None None 3 : 2019-12-25 2330 108 \u5e74\u7b2c 2 \u5b63 None None 4 : 2020-03-25 2330 108 \u5e74\u7b2c 3 \u5b63 None None 5 : 2020-06-24 2330 108 \u5e74\u7b2c 4 \u5b63 None None 6 : 2020-09-23 2330 109 \u5e74\u7b2c 1 \u5b63 None None StockExDividendTradingDate TotalEmployeeStockDividend TotalEmployeeStockDividendAmount 1 : None None None 2 : None None None 3 : None None None 4 : None None None 5 : None None None 6 : None None None RatioOfEmployeeStockDividendOfTotal RatioOfEmployeeStockDividend CashEarningsDistribution 1 : None None 8.0 2 : None None 2.0 3 : None None 2.5 4 : None None 2.5 5 : None None 2.5 6 : None None 2.5 CashStatutorySurplus CashExDividendTradingDate CashDividendPaymentDate TotalEmployeeCashDividend 1 : None 2019-06-24 2019-07-18 None 2 : None 2019-09-19 2019-10-17 None 3 : None 2019-12-19 2020-01-16 None 4 : None 2020-03-19 2020-04-16 None 5 : None 2020-06-18 2020-07-16 None 6 : None 2020-09-17 2020-10-15 None TotalNumberOfCashCapitalIncrease CashIncreaseSubscriptionRate CashIncreaseSubscriptionpRrice 1 : None None None 2 : None None None 3 : None None None 4 : None None None 5 : None None None 6 : None None None RemunerationOfDirectorsAndSupervisors ParticipateDistributionOfTotalShares AnnouncementDate 1 : None 25930380458 2019-06-06 2 : None 25930380458 2019-07-09 3 : None 25930380458 2019-08-14 4 : None 25930380458 2019-11-14 5 : None 25930380458 2020-02-14 6 : None 25930380458 2020-05-14 AnnouncementTime 1 : 15 : 47 : 30.000000000 2 : 18 : 33 : 02.000000000 3 : 15 : 27 : 02.000000000 4 : 17 : 01 : 07.000000000 5 : 15 : 10 : 50.000000000 6 : 10 : 51 : 55.000000000 \u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868 TaiwanStockDividendResult \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDividendResult\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id before_price after_price stock_and_cache_dividend stock_or_cache_dividend max_price min_price open_price reference_price 0 2019 - 06 - 24 2330 248.5 240.5 8.0 \u606f 264.5 216.5 240.5 240.5 1 2019 - 09 - 19 2330 267.0 265.0 2.0 \u606f 291.5 238.5 265.0 265.0 2 2019 - 12 - 19 2330 344.5 342.0 2.5 \u606f 376.0 308.0 342.0 342.0 3 2020 - 03 - 19 2330 260.0 257.5 2.5 \u606f 283.0 232.0 257.5 257.5 4 2020 - 06 - 18 2330 315.0 312.5 2.5 \u606f 343.5 281.5 312.5 312.5 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockDividendResult\" , data_id = \"2330\" , start_date = \"2019-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id before_price after_price stock_and_cache_dividend 1 : 2019-06-24 2330 248.5 240.5 8 2 : 2019-09-19 2330 267 265 2 3 : 2019-12-19 2330 344.5 342 2.5 4 : 2020-03-19 2330 260 257.5 2.5 5 : 2020-06-18 2330 315 312.5 2.5 6 : 2020-09-17 2330 458 455.5 2.5 stock_or_cache_dividend max_price min_price open_price reference_price 1 : \u606f 264.5 216.5 240.5 240.5 2 : \u606f 291.5 238.5 265 265 3 : \u606f 376 308 342 342 4 : \u606f 283 232 257.5 257.5 5 : \u606f 343.5 281.5 312.5 312.5 6 : \u606f 501 410 455.5 455.5 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528) \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDividendResult\" , \"start_date\" : \"2019-06-24\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id before_price after_price stock_and_cache_dividend stock_or_cache_dividend max_price min_price open_price reference_price 0 2019 - 06 - 24 00697 B 42.48 42.21 0.27 \u9664\u606f 9999.95 0.01 42.21 42.21 1 2019 - 06 - 24 00751 B 46.05 45.46 0.59 \u9664\u606f 9999.95 0.01 45.46 45.46 2 2019 - 06 - 24 1707 220.00 213.50 6.50 \u606f 234.50 192.50 213.50 213.50 3 2019 - 06 - 24 1711 17.00 16.50 0.50 \u606f 18.15 14.85 16.50 16.50 4 2019 - 06 - 24 1906 13.55 13.05 0.50 \u606f 14.35 11.75 13.05 13.05 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockDividendResult\" , start_date = \"2019-06-24\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id before_price after_price stock_and_cache_dividend 1 : 2019-06-24 00697 B 42.48 42.21 0.27 2 : 2019-06-24 00751 B 46.05 45.46 0.59 3 : 2019-06-24 1707 220 213.5 6.5 4 : 2019-06-24 1711 17 16.5 0.5 5 : 2019-06-24 1906 13.55 13.05 0.5 6 : 2019-06-24 2107 17.95 17.27 0.68 stock_or_cache_dividend max_price min_price open_price reference_price 1 : \u9664\u606f 9999.95 0.01 42.21 42.21 2 : \u9664\u606f 9999.95 0.01 45.46 45.46 3 : \u606f 234.5 192.5 213.5 213.5 4 : \u606f 18.15 14.85 16.5 16.5 5 : \u606f 14.35 11.75 13.05 13.05 6 : \u606f 18.95 15.55 17.25 17.27 \u6708\u71df\u6536\u8868 TaiwanStockMonthRevenue \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMonthRevenue\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id country revenue revenue_month revenue_year 0 2019 - 01 - 01 2330 Taiwan 89830598000 12 2018 1 2019 - 02 - 01 2330 Taiwan 78093827000 1 2019 2 2019 - 03 - 01 2330 Taiwan 60889055000 2 2019 3 2019 - 04 - 01 2330 Taiwan 79721587000 3 2019 4 2019 - 05 - 01 2330 Taiwan 74693615000 4 2019 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMonthRevenue\" , data_id = \"2330\" , start_date = \"2019-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id country revenue revenue_month revenue_year 1 : 2019-02-01 2330 Taiwan 78093827000 1 2019 2 : 2019-03-01 2330 Taiwan 60889055000 2 2019 3 : 2019-04-01 2330 Taiwan 79721587000 3 2019 4 : 2019-05-01 2330 Taiwan 74693615000 4 2019 5 : 2019-06-01 2330 Taiwan 80436931000 5 2019 6 : 2019-07-01 2330 Taiwan 85867929000 6 2019 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528) \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMonthRevenue\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id country revenue revenue_month revenue_year 0 2019 - 01 - 01 1101 Taiwan 11404254000 12 2018 1 2019 - 01 - 01 1102 Taiwan 6548928000 12 2018 2 2019 - 01 - 01 1103 Taiwan 234983000 12 2018 3 2019 - 01 - 01 1104 Taiwan 465496000 12 2018 4 2019 - 01 - 01 1108 Taiwan 300034000 12 2018 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMonthRevenue\" , start_date = \"2019-01-01\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id country revenue revenue_month revenue_year 1 : 2019-01-01 1101 Taiwan 11404254000 12 2018 2 : 2019-01-01 1102 Taiwan 6548928000 12 2018 3 : 2019-01-01 1103 Taiwan 234983000 12 2018 4 : 2019-01-01 1104 Taiwan 465496000 12 2018 5 : 2019-01-01 1108 Taiwan 300034000 12 2018 6 : 2019-01-01 1109 Taiwan 707952000 12 2018","title":"\u57fa\u672c\u9762"},{"location":"tutor/TaiwanMarket/Fundamental/#taiwanstockfinancialstatements","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockFinancialStatements\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id type value origin_name 0 2019 - 03 - 31 2330 CostOfGoodsSold 1.283520e+11 \u71df\u696d\u6210\u672c 1 2019 - 03 - 31 2330 EPS 2.370000e+00 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918 \uff08 \u5143 \uff09 2 2019 - 03 - 31 2330 EquityAttributableToOwnersOfParent 6.139390e+10 \u6de8\u5229 \uff08 \u6de8\u640d \uff09 \u6b78\u5c6c\u65bc\u6bcd\u516c\u53f8\u696d\u4e3b 3 2019 - 03 - 31 2330 GrossProfit 9.035210e+10 \u71df\u696d\u6bdb\u5229 \uff08 \u6bdb\u640d \uff09 4 2019 - 03 - 31 2330 IncomeAfterTaxes 6.138730e+10 \u672c\u671f\u6de8\u5229 \uff08 \u6de8\u640d \uff09 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockFinancialStatements\" , data_id = \"2330\" , start_date = \"2019-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id type value origin_name 1 : 2019-03-31 2330 ASSO 433491000.0 \u63a1\u7528\u6b0a\u76ca\u6cd5\u8a8d\u5217\u4e4b\u95dc\u806f\u4f01\u696d\u53ca\u5408\u8cc7\u640d\u76ca\u4e4b\u4efd\u984d\u6de8\u984d 2 : 2019-03-31 2330 CostOfGoodsSold 128352000000.0 \u71df\u696d\u6210\u672c\u5408\u8a08 3 : 2019-03-31 2330 EPS 2.37 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918 4 : 2019-03-31 2330 EXDF 3218080000.0 \u570b\u5916\u71df\u904b\u6a5f\u69cb\u8ca1\u52d9\u5831\u8868\u63db\u7b97\u4e4b\u514c\u63db\u5dee\u984d 5 : 2019-03-31 2330 FinancialCost 899065000.0 \u8ca1\u52d9\u6210\u672c\u6de8\u984d 6 : 2019-03-31 2330 GrossProfit 90352100000.0 \u71df\u696d\u6bdb\u5229 ( \u6bdb\u640d )","title":"\u7d9c\u5408\u640d\u76ca\u8868 TaiwanStockFinancialStatements"},{"location":"tutor/TaiwanMarket/Fundamental/#_1","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockFinancialStatements\" , \"start_date\" : \"2019-03-31\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data ) date stock_id type value origin_name 0 2019 - 03 - 31 000116 EPS 2.400000e-01 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918 \uff08 \u5143 \uff09 1 2019 - 03 - 31 000116 EquityAttributableToOwnersOfParent 2.741590e+08 \u6de8\u5229 \uff08 \u640d \uff09 \u6b78\u5c6c\u65bc\u6bcd\u516c\u53f8\u696d\u4e3b 2 2019 - 03 - 31 000116 Expense 8.954980e+08 \u652f\u51fa\u53ca\u8cbb\u7528 3 2019 - 03 - 31 000116 Income 1.077910e+09 \u6536\u76ca 4 2019 - 03 - 31 000116 IncomeAfterTaxes 2.743220e+08 \u672c\u671f\u6de8\u5229 \uff08 \u6de8\u640d \uff09 ... ... ... ... ... ... 27267 2019 - 03 - 31 9960 TotalConsolidatedProfitForThePeriod 1.534400e+07 \u672c\u671f\u7d9c\u5408\u640d\u76ca\u7e3d\u984d 27268 2019 - 03 - 31 9960 TotalNonoperatingIncomeAndExpense 5.408000e+06 \u71df\u696d\u5916\u6536\u5165\u53ca\u652f\u51fa 27269 2019 - 03 - 31 9962 CostOfGoodsSold 5.369030e+08 \u71df\u696d\u6210\u672c 27270 2019 - 03 - 31 9962 EPS - 1.400000e-01 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918 \uff08 \u5143 \uff09 27271 2019 - 03 - 31 9962 GrossProfit 2.721000e+06 \u71df\u696d\u6bdb\u5229 \uff08 \u6bdb\u640d \uff09 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockFinancialStatements\" , start_date = \"2019-03-31\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id type value origin_name 1 : 2019-03-31 2330 ASSO 433491000.0 \u63a1\u7528\u6b0a\u76ca\u6cd5\u8a8d\u5217\u4e4b\u95dc\u806f\u4f01\u696d\u53ca\u5408\u8cc7\u640d\u76ca\u4e4b\u4efd\u984d\u6de8\u984d 2 : 2019-03-31 2330 CostOfGoodsSold 128352000000.0 \u71df\u696d\u6210\u672c\u5408\u8a08 3 : 2019-03-31 2330 EPS 2.37 \u57fa\u672c\u6bcf\u80a1\u76c8\u9918 4 : 2019-03-31 2330 EXDF 3218080000.0 \u570b\u5916\u71df\u904b\u6a5f\u69cb\u8ca1\u52d9\u5831\u8868\u63db\u7b97\u4e4b\u514c\u63db\u5dee\u984d 5 : 2019-03-31 2330 FinancialCost 899065000.0 \u8ca1\u52d9\u6210\u672c\u6de8\u984d 6 : 2019-03-31 2330 GrossProfit 90352100000.0 \u71df\u696d\u6bdb\u5229 ( \u6bdb\u640d )","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Fundamental/#taiwanstockbalancesheet","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockBalanceSheet\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id type value origin_name 0 2019 - 03 - 31 2330 AccountsPayable 27100909000.0 \u61c9\u4ed8\u5e33\u6b3e 1 2019 - 03 - 31 2330 AccountsPayable_per 1.0 \u61c9\u4ed8\u5e33\u6b3e 2 2019 - 03 - 31 2330 AccountsPayableToRelatedParties 560941000.0 \u61c9\u4ed8\u5e33\u6b3e \uff0d \u95dc\u4fc2\u4eba 3 2019 - 03 - 31 2330 AccountsPayableToRelatedParties_per 0.0 \u61c9\u4ed8\u5e33\u6b3e \uff0d \u95dc\u4fc2\u4eba 4 2019 - 03 - 31 2330 AccountsReceivableDuefromRelatedPartiesNet 309821000.0 \u61c9\u6536\u5e33\u6b3e \uff0d \u95dc\u4fc2\u4eba\u6de8\u984d R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockBalanceSheet\" , data_id = \"2330\" , start_date = \"2019-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id type value origin_name 1 : 2019-03-31 2330 AccountsPayable 27100909000.0 \u61c9\u4ed8\u5e33\u6b3e 2 : 2019-03-31 2330 AccountsPayable_per 1.0 \u61c9\u4ed8\u5e33\u6b3e 3 : 2019-03-31 2330 AccountsPayableToRelatedParties 560941000.0 \u61c9\u4ed8\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba 4 : 2019-03-31 2330 AccountsPayableToRelatedParties_per 0.0 \u61c9\u4ed8\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba 5 : 2019-03-31 2330 AccountsReceivableDuefromRelatedPartiesNet 309821000.0 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d 6 : 2019-03-31 2330 AccountsReceivableDuefromRelatedPartiesNet_per 0.0 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d","title":"\u8cc7\u7522\u8ca0\u50b5\u8868 TaiwanStockBalanceSheet"},{"location":"tutor/TaiwanMarket/Fundamental/#_2","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockBalanceSheet\" , \"start_date\" : \"2019-03-31\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id type value origin_name 0 2019 - 03 - 31 2330 AccountsPayable 27100909000.0 \u61c9\u4ed8\u5e33\u6b3e 1 2019 - 03 - 31 2330 AccountsPayable_per 1.0 \u61c9\u4ed8\u5e33\u6b3e 2 2019 - 03 - 31 2330 AccountsPayableToRelatedParties 560941000.0 \u61c9\u4ed8\u5e33\u6b3e \uff0d \u95dc\u4fc2\u4eba 3 2019 - 03 - 31 2330 AccountsPayableToRelatedParties_per 0.0 \u61c9\u4ed8\u5e33\u6b3e \uff0d \u95dc\u4fc2\u4eba 4 2019 - 03 - 31 2330 AccountsReceivableDuefromRelatedPartiesNet 309821000.0 \u61c9\u6536\u5e33\u6b3e \uff0d \u95dc\u4fc2\u4eba\u6de8\u984d R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockBalanceSheet\" , start_date = \"2019-03-31\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id type value origin_name 1 : 2019-03-31 2330 AccountsPayable 27100909000.0 \u61c9\u4ed8\u5e33\u6b3e 2 : 2019-03-31 2330 AccountsPayable_per 1.0 \u61c9\u4ed8\u5e33\u6b3e 3 : 2019-03-31 2330 AccountsPayableToRelatedParties 560941000.0 \u61c9\u4ed8\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba 4 : 2019-03-31 2330 AccountsPayableToRelatedParties_per 0.0 \u61c9\u4ed8\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba 5 : 2019-03-31 2330 AccountsReceivableDuefromRelatedPartiesNet 309821000.0 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d 6 : 2019-03-31 2330 AccountsReceivableDuefromRelatedPartiesNet_per 0.0 \u61c9\u6536\u5e33\u6b3e\uff0d\u95dc\u4fc2\u4eba\u6de8\u984d","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Fundamental/#taiwanstockcashflowsstatement","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockCashFlowsStatement\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id type value origin_name 0 2019 - 03 - 31 2330 AccountsPayable 6105110000.0 \u61c9\u4ed8\u5e33\u6b3e\u589e\u52a0 ( \u6e1b\u5c11 ) 1 2019 - 03 - 31 2330 AmortizationExpense 1355340000.0 \u6524\u92b7\u8cbb\u7528 2 2019 - 03 - 31 2330 AmountDueToRelatedParties 815558000.0 \u61c9\u4ed8\u5e33\u6b3e - \u95dc\u4fc2\u4eba\u589e\u52a0 ( \u6e1b\u5c11 ) 3 2019 - 03 - 31 2330 CashBalancesBeginningOfPeriod 577815000000.0 \u671f\u521d\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d 4 2019 - 03 - 31 2330 CashBalancesEndOfPeriod 645671000000.0 \u671f\u672b\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockCashFlowsStatement\" , data_id = \"2330\" , start_date = \"2019-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id type value origin_name 1 : 2019-03-31 2330 AccountsPayable 6105110000.0 \u61c9\u4ed8\u5e33\u6b3e\u589e\u52a0 ( \u6e1b\u5c11 ) 2 : 2019-03-31 2330 AmortizationExpense 1355340000.0 \u6524\u92b7\u8cbb\u7528 3 : 2019-03-31 2330 AmountDueToRelatedParties 815558000.0 \u61c9\u4ed8\u5e33\u6b3e - \u95dc\u4fc2\u4eba\u589e\u52a0 ( \u6e1b\u5c11 ) 4 : 2019-03-31 2330 CashBalancesBeginningOfPeriod 577815000000.0 \u671f\u521d\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d 5 : 2019-03-31 2330 CashBalancesEndOfPeriod 645671000000.0 \u671f\u672b\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d 6 : 2019-03-31 2330 CashBalancesIncrease 67855900000.0 \u672c\u671f\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u589e\u52a0\uff08\u6e1b\u5c11\uff09\u6578","title":"\u73fe\u91d1\u6d41\u91cf\u8868 TaiwanStockCashFlowsStatement"},{"location":"tutor/TaiwanMarket/Fundamental/#_3","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockCashFlowsStatement\" , \"start_date\" : \"2019-03-31\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id type value origin_name 0 2019 - 03 - 31 2330 AccountsPayable 6105110000.0 \u61c9\u4ed8\u5e33\u6b3e\u589e\u52a0 ( \u6e1b\u5c11 ) 1 2019 - 03 - 31 2330 AmortizationExpense 1355340000.0 \u6524\u92b7\u8cbb\u7528 2 2019 - 03 - 31 2330 AmountDueToRelatedParties 815558000.0 \u61c9\u4ed8\u5e33\u6b3e - \u95dc\u4fc2\u4eba\u589e\u52a0 ( \u6e1b\u5c11 ) 3 2019 - 03 - 31 2330 CashBalancesBeginningOfPeriod 577815000000.0 \u671f\u521d\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d 4 2019 - 03 - 31 2330 CashBalancesEndOfPeriod 645671000000.0 \u671f\u672b\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockCashFlowsStatement\" , start_date = \"2019-03-31\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id type value origin_name 1 : 2019-03-31 2330 AccountsPayable 6105110000.0 \u61c9\u4ed8\u5e33\u6b3e\u589e\u52a0 ( \u6e1b\u5c11 ) 2 : 2019-03-31 2330 AmortizationExpense 1355340000.0 \u6524\u92b7\u8cbb\u7528 3 : 2019-03-31 2330 AmountDueToRelatedParties 815558000.0 \u61c9\u4ed8\u5e33\u6b3e - \u95dc\u4fc2\u4eba\u589e\u52a0 ( \u6e1b\u5c11 ) 4 : 2019-03-31 2330 CashBalancesBeginningOfPeriod 577815000000.0 \u671f\u521d\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d 5 : 2019-03-31 2330 CashBalancesEndOfPeriod 645671000000.0 \u671f\u672b\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u9918\u984d 6 : 2019-03-31 2330 CashBalancesIncrease 67855900000.0 \u672c\u671f\u73fe\u91d1\u53ca\u7d04\u7576\u73fe\u91d1\u589e\u52a0\uff08\u6e1b\u5c11\uff09\u6578","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Fundamental/#taiwanstockstockdividend","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockStockDividend\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id year StockEarningsDistribution ... RemunerationOfDirectorsAndSupervisors ParticipateDistributionOfTotalShares AnnouncementDate AnnouncementTime 0 2019 - 06 - 30 2330 107 \u5e74 None ... None 25930380458 2019 - 06 - 06 15 : 47 : 30.000000000 1 2019 - 09 - 25 2330 108 \u5e74\u7b2c1\u5b63 None ... None 25930380458 2019 - 07 - 09 18 : 33 : 02.000000000 2 2019 - 12 - 25 2330 108 \u5e74\u7b2c2\u5b63 None ... None 25930380458 2019 - 08 - 14 15 : 27 : 02.000000000 3 2020 - 03 - 25 2330 108 \u5e74\u7b2c3\u5b63 None ... None 25930380458 2019 - 11 - 14 17 : 01 : 07.000000000 4 2020 - 06 - 24 2330 108 \u5e74\u7b2c4\u5b63 None ... None 25930380458 2020 - 02 - 14 15 : 10 : 50.000000000 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockStockDividend\" , data_id = \"2330\" , start_date = \"2019-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id year StockEarningsDistribution StockStatutorySurplus 1 : 2019-06-30 2330 107 \u5e74 None None 2 : 2019-09-25 2330 108 \u5e74\u7b2c 1 \u5b63 None None 3 : 2019-12-25 2330 108 \u5e74\u7b2c 2 \u5b63 None None 4 : 2020-03-25 2330 108 \u5e74\u7b2c 3 \u5b63 None None 5 : 2020-06-24 2330 108 \u5e74\u7b2c 4 \u5b63 None None 6 : 2020-09-23 2330 109 \u5e74\u7b2c 1 \u5b63 None None StockExDividendTradingDate TotalEmployeeStockDividend TotalEmployeeStockDividendAmount 1 : None None None 2 : None None None 3 : None None None 4 : None None None 5 : None None None 6 : None None None RatioOfEmployeeStockDividendOfTotal RatioOfEmployeeStockDividend CashEarningsDistribution 1 : None None 8.0 2 : None None 2.0 3 : None None 2.5 4 : None None 2.5 5 : None None 2.5 6 : None None 2.5 CashStatutorySurplus CashExDividendTradingDate CashDividendPaymentDate TotalEmployeeCashDividend 1 : None 2019-06-24 2019-07-18 None 2 : None 2019-09-19 2019-10-17 None 3 : None 2019-12-19 2020-01-16 None 4 : None 2020-03-19 2020-04-16 None 5 : None 2020-06-18 2020-07-16 None 6 : None 2020-09-17 2020-10-15 None TotalNumberOfCashCapitalIncrease CashIncreaseSubscriptionRate CashIncreaseSubscriptionpRrice 1 : None None None 2 : None None None 3 : None None None 4 : None None None 5 : None None None 6 : None None None RemunerationOfDirectorsAndSupervisors ParticipateDistributionOfTotalShares AnnouncementDate 1 : None 25930380458 2019-06-06 2 : None 25930380458 2019-07-09 3 : None 25930380458 2019-08-14 4 : None 25930380458 2019-11-14 5 : None 25930380458 2020-02-14 6 : None 25930380458 2020-05-14 AnnouncementTime 1 : 15 : 47 : 30.000000000 2 : 18 : 33 : 02.000000000 3 : 15 : 27 : 02.000000000 4 : 17 : 01 : 07.000000000 5 : 15 : 10 : 50.000000000 6 : 10 : 51 : 55.000000000","title":"\u80a1\u5229\u653f\u7b56\u8868 TaiwanStockStockDividend"},{"location":"tutor/TaiwanMarket/Fundamental/#taiwanstockdividendresult","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDividendResult\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id before_price after_price stock_and_cache_dividend stock_or_cache_dividend max_price min_price open_price reference_price 0 2019 - 06 - 24 2330 248.5 240.5 8.0 \u606f 264.5 216.5 240.5 240.5 1 2019 - 09 - 19 2330 267.0 265.0 2.0 \u606f 291.5 238.5 265.0 265.0 2 2019 - 12 - 19 2330 344.5 342.0 2.5 \u606f 376.0 308.0 342.0 342.0 3 2020 - 03 - 19 2330 260.0 257.5 2.5 \u606f 283.0 232.0 257.5 257.5 4 2020 - 06 - 18 2330 315.0 312.5 2.5 \u606f 343.5 281.5 312.5 312.5 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockDividendResult\" , data_id = \"2330\" , start_date = \"2019-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id before_price after_price stock_and_cache_dividend 1 : 2019-06-24 2330 248.5 240.5 8 2 : 2019-09-19 2330 267 265 2 3 : 2019-12-19 2330 344.5 342 2.5 4 : 2020-03-19 2330 260 257.5 2.5 5 : 2020-06-18 2330 315 312.5 2.5 6 : 2020-09-17 2330 458 455.5 2.5 stock_or_cache_dividend max_price min_price open_price reference_price 1 : \u606f 264.5 216.5 240.5 240.5 2 : \u606f 291.5 238.5 265 265 3 : \u606f 376 308 342 342 4 : \u606f 283 232 257.5 257.5 5 : \u606f 343.5 281.5 312.5 312.5 6 : \u606f 501 410 455.5 455.5","title":"\u9664\u6b0a\u9664\u606f\u7d50\u679c\u8868 TaiwanStockDividendResult"},{"location":"tutor/TaiwanMarket/Fundamental/#_4","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockDividendResult\" , \"start_date\" : \"2019-06-24\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id before_price after_price stock_and_cache_dividend stock_or_cache_dividend max_price min_price open_price reference_price 0 2019 - 06 - 24 00697 B 42.48 42.21 0.27 \u9664\u606f 9999.95 0.01 42.21 42.21 1 2019 - 06 - 24 00751 B 46.05 45.46 0.59 \u9664\u606f 9999.95 0.01 45.46 45.46 2 2019 - 06 - 24 1707 220.00 213.50 6.50 \u606f 234.50 192.50 213.50 213.50 3 2019 - 06 - 24 1711 17.00 16.50 0.50 \u606f 18.15 14.85 16.50 16.50 4 2019 - 06 - 24 1906 13.55 13.05 0.50 \u606f 14.35 11.75 13.05 13.05 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockDividendResult\" , start_date = \"2019-06-24\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id before_price after_price stock_and_cache_dividend 1 : 2019-06-24 00697 B 42.48 42.21 0.27 2 : 2019-06-24 00751 B 46.05 45.46 0.59 3 : 2019-06-24 1707 220 213.5 6.5 4 : 2019-06-24 1711 17 16.5 0.5 5 : 2019-06-24 1906 13.55 13.05 0.5 6 : 2019-06-24 2107 17.95 17.27 0.68 stock_or_cache_dividend max_price min_price open_price reference_price 1 : \u9664\u606f 9999.95 0.01 42.21 42.21 2 : \u9664\u606f 9999.95 0.01 45.46 45.46 3 : \u606f 234.5 192.5 213.5 213.5 4 : \u606f 18.15 14.85 16.5 16.5 5 : \u606f 14.35 11.75 13.05 13.05 6 : \u606f 18.95 15.55 17.25 17.27","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Fundamental/#taiwanstockmonthrevenue","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMonthRevenue\" , \"data_id\" : \"2330\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id country revenue revenue_month revenue_year 0 2019 - 01 - 01 2330 Taiwan 89830598000 12 2018 1 2019 - 02 - 01 2330 Taiwan 78093827000 1 2019 2 2019 - 03 - 01 2330 Taiwan 60889055000 2 2019 3 2019 - 04 - 01 2330 Taiwan 79721587000 3 2019 4 2019 - 05 - 01 2330 Taiwan 74693615000 4 2019 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMonthRevenue\" , data_id = \"2330\" , start_date = \"2019-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id country revenue revenue_month revenue_year 1 : 2019-02-01 2330 Taiwan 78093827000 1 2019 2 : 2019-03-01 2330 Taiwan 60889055000 2 2019 3 : 2019-04-01 2330 Taiwan 79721587000 3 2019 4 : 2019-05-01 2330 Taiwan 74693615000 4 2019 5 : 2019-06-01 2330 Taiwan 80436931000 5 2019 6 : 2019-07-01 2330 Taiwan 85867929000 6 2019","title":"\u6708\u71df\u6536\u8868 TaiwanStockMonthRevenue"},{"location":"tutor/TaiwanMarket/Fundamental/#_5","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockMonthRevenue\" , \"start_date\" : \"2019-01-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id country revenue revenue_month revenue_year 0 2019 - 01 - 01 1101 Taiwan 11404254000 12 2018 1 2019 - 01 - 01 1102 Taiwan 6548928000 12 2018 2 2019 - 01 - 01 1103 Taiwan 234983000 12 2018 3 2019 - 01 - 01 1104 Taiwan 465496000 12 2018 4 2019 - 01 - 01 1108 Taiwan 300034000 12 2018 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockMonthRevenue\" , start_date = \"2019-01-01\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id country revenue revenue_month revenue_year 1 : 2019-01-01 1101 Taiwan 11404254000 12 2018 2 : 2019-01-01 1102 Taiwan 6548928000 12 2018 3 : 2019-01-01 1103 Taiwan 234983000 12 2018 4 : 2019-01-01 1104 Taiwan 465496000 12 2018 5 : 2019-01-01 1108 Taiwan 300034000 12 2018 6 : 2019-01-01 1109 Taiwan 707952000 12 2018","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Others/","text":"\u5728\u53f0\u7063\u80a1\u7968\u65b0\u805e\u9762\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u76f8\u95dc\u65b0\u805e\u8868 TaiwanStockNews \u76f8\u95dc\u65b0\u805e\u8868 TaiwanStockNews \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockNews\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"end_date\" : \"2020-04-03\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id description link source title 0 2020 - 04 - 01 00 : 00 : 00 2330 & lt ; a href = \"https://tw.news.yahoo.com/ %E 9%9B%B... https://tw.news.yahoo.com/ %E 9%9B%BB %E 5%AD %90% E... Yahoo\u5947\u6469\u65b0\u805e \u96fb\u5b50\u6642\u5831\uff1a\u53f0\u7a4d\u96fb3\u5948\u7c73\u7167\u8d70\uff0c\u4e09\u661f\u885d\u64ca\u5927\uff0c\u860b\u679c\u4e0b\u4fee5\u5948\u7c73\u8a02\u55ae\uff0cNVIDIA\u88dc\u4f4d - Yahoo... 1 2020 - 04 - 01 00 : 57 : 33 2330 & lt ; a href = \"https://udn.com/news/story/6850/44... https://udn.com/news/story/6850/4458587 udn \u806f\u5408\u65b0\u805e\u7db2 \u4e16\u82af\u4e2d\u570b\u4f3a\u670d\u5668\u9700\u6c42\u589e - udn \u806f\u5408\u65b0\u805e\u7db2 2 2020 - 04 - 01 00 : 58 : 42 2330 & lt ; a href = \"https://finance.technews.tw/2020/0... https://finance.technews.tw/2020/04/01/tsmc-wa... \u79d1\u6280\u65b0\u5831 TechNews \u53f0\u7a4d\u96fb\u767c\u5c55\u5de5\u696d\u5ee2\u6c34\u518d\u751f\u6280\u8853\uff0c\u5357\u79d1\u5de5\u7a0b\u660e\u5e74\u555f\u52d5 - \u79d1\u6280\u65b0\u5831 TechNews 3 2020 - 04 - 01 00 : 59 : 38 2330 & lt ; a href = \"https://tw.news.yahoo.com/ %E 5 %8F %B... https://tw.news.yahoo.com/ %E 5 %8F %B0 %E 7%A9%8D %E ... Yahoo\u5947\u6469\u80a1\u5e02 \u53f0\u7a4d\u96fbADR31\u65e5\u4e0b\u8dcc0.03\u7f8e\u5143\u8dcc\u5e450.06%\u6298\u53f0\u80a1289.17\u5143 - Yahoo\u5947\u6469\u80a1\u5e02 4 2020 - 04 - 01 02 : 40 : 00 2330 & lt ; a href = \"https://fnc.ebc.net.tw/FncNews/Con... https://fnc.ebc.net.tw/FncNews/Content/117374 \u6771\u68ee\u8ca1\u7d93\u65b0\u805e \u5916\u8cc7:\u534a\u5c0e\u9ad4\u5eab\u5b58\u9762\u81e8\u4fee\u6b63\u53f0\u7a4d\u96fb\u71df\u6536\u6210\u9577\u3001\u76ee\u6a19\u50f9\u906d\u96d9\u964d\uff5c\u6771\u68ee\u8ca1\u7d93\u65b0\u805e - \u6771\u68ee\u8ca1\u7d93\u65b0\u805e R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockNews\" , data_id = \"2330\" , start_date = \"2020-04-01\" , end_date = '2020-04-03' ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) date stock_id 1 : 2020-04-01 00 : 00 : 00 2330 2 : 2020-04-01 00 : 57 : 33 2330 3 : 2020-04-01 00 : 58 : 42 2330 4 : 2020-04-01 00 : 59 : 38 2330 5 : 2020-04-01 02 : 40 : 00 2330 6 : 2020-04-01 03 : 07 : 57 2330 description 1 : & lt ; a href = \"https://tw.news.yahoo.com/%E9%9B%BB%E5%AD%90%E6%99%82%E5%A0%B1-%E5%8F%B0%E7%A9%8D%E9%9B%BB3%E5%A5%88%E7%B1%B3%E7%85%A7%E8%B5%B0-%E4%B8%89%E6%98%9F%E8%A1%9D%E6%93%8A%E5%A4%A7-%E8%98%8B%E6%9E%9C%E4%B8%8B%E4%BF%AE5%E5%A5%88%E7%B1%B3%E8%A8%82%E5%96%AE-nvidia%E8%A3%9C%E4%BD%8D-000054154.html\" target = \"_blank\" & gt ; \u96fb\u5b50\u6642\u5831\uff1a\u53f0\u7a4d\u96fb 3 \u5948\u7c73\u7167\u8d70\uff0c\u4e09\u661f\u885d\u64ca\u5927\uff0c\u860b\u679c\u4e0b\u4fee 5 \u5948\u7c73\u8a02\u55ae\uff0c NVIDIA\u88dc\u4f4d & lt ; / a & gt ; & amp ; nbsp ; & amp ; nbsp ; & lt ; font color = \"#6f6f6f\" & gt ; Yahoo\u5947\u6469\u65b0\u805e & lt ; / font & gt ; 2 : & lt ; a href = \"https://udn.com/news/story/6850/4458587\" target = \"_blank\" & gt ; \u4e16\u82af\u4e2d\u570b\u4f3a\u670d\u5668\u9700\u6c42\u589e & lt ; / a & gt ; & amp ; nbsp ; & amp ; nbsp ; & lt ; font color = \"#6f6f6f\" & gt ; udn \u806f\u5408\u65b0\u805e\u7db2 & lt ; / font & gt ; 3 : & lt ; a href = \"https://finance.technews.tw/2020/04/01/tsmc-water-recycle/\" target = \"_blank\" & gt ; \u53f0\u7a4d\u96fb\u767c\u5c55\u5de5\u696d\u5ee2\u6c34\u518d\u751f\u6280\u8853\uff0c\u5357\u79d1\u5de5\u7a0b\u660e\u5e74\u555f\u52d5 & lt ; / a & gt ; & amp ; nbsp ; & amp ; nbsp ; & lt ; font color = \"#6f6f6f\" & gt ; \u79d1\u6280\u65b0\u5831 TechNews & lt ; / font & gt ; 4 : & lt ; a href = \"https://tw.news.yahoo.com/%E5%8F%B0%E7%A9%8D%E9%9B%BBadr31%E6%97%A5%E4%B8%8B%E8%B7%8C0-03%E7%BE%8E%E5%85%83%E8%B7%8C%E5%B9%850-06-%E6%8A%98%E5%8F%B0%E8%82%A1289-17%E5%85%83-004919773.html\" target = \"_blank\" & gt ; \u53f0\u7a4d\u96fb ADR31\u65e5\u4e0b\u8dcc0.03\u7f8e\u5143\u8dcc\u5e450.06 %\u6298\u53f0\u80a1289.17\u5143&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;font color=\"#6f6f6f\"&gt;Yahoo\u5947\u6469\u80a1\u5e02&lt;/font&gt; 5: &lt;a href=\"https://fnc.ebc.net.tw/FncNews/Content/117374\" target=\"_blank\"&gt;\u5916\u8cc7:\u534a\u5c0e\u9ad4\u5eab\u5b58\u9762\u81e8\u4fee\u6b63\u53f0\u7a4d\u96fb\u71df\u6536\u6210\u9577\u3001\u76ee\u6a19\u50f9\u906d\u96d9\u964d\uff5c\u6771\u68ee\u8ca1\u7d93\u65b0\u805e&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;font color=\"#6f6f6f\"&gt;\u6771\u68ee\u8ca1\u7d93\u65b0\u805e&lt;/font&gt; 6: &lt;a href=\"https://udn.com/news/story/7253/4460355\" target=\"_blank\"&gt;\u534a\u5c0e\u9ad4\u6050\u9762\u81e8\u5eab\u5b58\u4fee\u6b63 \u5916\u8cc7\u8abf\u964d\u53f0\u7a4d\u96fb\u76ee\u6a19\u50f9&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;font color=\"#6f6f6f\"&gt;udn \u806f\u5408\u65b0\u805e\u7db2&lt;/font&gt; link 1: https://tw.news.yahoo.com/% E9 %9B% BB %E5% AD %90% E6 %99% 82 %E5% A0 %B1-% E5 %8F% B0 %E7% A9 %8D% E9 %9B% BB3 %E5% A5 %88% E7 %B1% B3 %E7% 85 %A7% E8 %B5% B0 -%E4% B8 %89% E6 %98% 9 F %E8% A1 %9D% E6 %93% 8 A %E5% A4 %A7-% E8 %98% 8 B %E6% 9 E %9C% E4 %B8% 8 B %E4% BF %AE5% E5 %A5% 88 %E7% B1 %B3% E8 %A8% 82 %E5% 96 %AE-nvidia% E8 %A3% 9 C %E4% BD %8D-000054154.html 2: https://udn.com/news/story/6850/4458587 3: https://finance.technews.tw/2020/04/01/tsmc-water-recycle/ 4: https://tw.news.yahoo.com/% E5 %8F% B0 %E7% A9 %8D% E9 %9B% BBadr31 %E6% 97 %A5% E4 %B8% 8 B %E8% B7 %8C0-03% E7 %BE% 8 E %E5% 85 %83% E8 %B7% 8 C %E5% B9 %850-06-% E6 %8A% 98 %E5% 8 F %B0% E8 %82% A1289 -17 %E5% 85 %83-004919773.html 5: https://fnc.ebc.net.tw/FncNews/Content/117374 6: https://udn.com/news/story/7253/4460355 source 1: Yahoo\u5947\u6469\u65b0\u805e 2: udn \u806f\u5408\u65b0\u805e\u7db2 3: \u79d1\u6280\u65b0\u5831 TechNews 4: Yahoo\u5947\u6469\u80a1\u5e02 5: \u6771\u68ee\u8ca1\u7d93\u65b0\u805e 6: udn \u806f\u5408\u65b0\u805e\u7db2 title 1: \u96fb\u5b50\u6642\u5831\uff1a\u53f0\u7a4d\u96fb3\u5948\u7c73\u7167\u8d70\uff0c\u4e09\u661f\u885d\u64ca\u5927\uff0c\u860b\u679c\u4e0b\u4fee5\u5948\u7c73\u8a02\u55ae\uff0cNVIDIA\u88dc\u4f4d - Yahoo\u5947\u6469\u65b0\u805e 2: \u4e16\u82af\u4e2d\u570b\u4f3a\u670d\u5668\u9700\u6c42\u589e - udn \u806f\u5408\u65b0\u805e\u7db2 3: \u53f0\u7a4d\u96fb\u767c\u5c55\u5de5\u696d\u5ee2\u6c34\u518d\u751f\u6280\u8853\uff0c\u5357\u79d1\u5de5\u7a0b\u660e\u5e74\u555f\u52d5 - \u79d1\u6280\u65b0\u5831 TechNews 4: \u53f0\u7a4d\u96fbADR31\u65e5\u4e0b\u8dcc0.03\u7f8e\u5143\u8dcc\u5e450.06% \u6298\u53f0\u80a1 289.17 \u5143 - Yahoo\u5947\u6469\u80a1\u5e02 5 : \u5916\u8cc7 : \u534a\u5c0e\u9ad4\u5eab\u5b58\u9762\u81e8\u4fee\u6b63\u53f0\u7a4d\u96fb\u71df\u6536\u6210\u9577\u3001\u76ee\u6a19\u50f9\u906d\u96d9\u964d\uff5c\u6771\u68ee\u8ca1\u7d93\u65b0\u805e - \u6771\u68ee\u8ca1\u7d93\u65b0\u805e 6 : \u534a\u5c0e\u9ad4\u6050\u9762\u81e8\u5eab\u5b58\u4fee\u6b63 \u5916\u8cc7\u8abf\u964d\u53f0\u7a4d\u96fb\u76ee\u6a19\u50f9 - udn \u806f\u5408\u65b0\u805e\u7db2","title":"\u5176\u4ed6"},{"location":"tutor/TaiwanMarket/Others/#taiwanstocknews","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockNews\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , \"end_date\" : \"2020-04-03\" } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id description link source title 0 2020 - 04 - 01 00 : 00 : 00 2330 & lt ; a href = \"https://tw.news.yahoo.com/ %E 9%9B%B... https://tw.news.yahoo.com/ %E 9%9B%BB %E 5%AD %90% E... Yahoo\u5947\u6469\u65b0\u805e \u96fb\u5b50\u6642\u5831\uff1a\u53f0\u7a4d\u96fb3\u5948\u7c73\u7167\u8d70\uff0c\u4e09\u661f\u885d\u64ca\u5927\uff0c\u860b\u679c\u4e0b\u4fee5\u5948\u7c73\u8a02\u55ae\uff0cNVIDIA\u88dc\u4f4d - Yahoo... 1 2020 - 04 - 01 00 : 57 : 33 2330 & lt ; a href = \"https://udn.com/news/story/6850/44... https://udn.com/news/story/6850/4458587 udn \u806f\u5408\u65b0\u805e\u7db2 \u4e16\u82af\u4e2d\u570b\u4f3a\u670d\u5668\u9700\u6c42\u589e - udn \u806f\u5408\u65b0\u805e\u7db2 2 2020 - 04 - 01 00 : 58 : 42 2330 & lt ; a href = \"https://finance.technews.tw/2020/0... https://finance.technews.tw/2020/04/01/tsmc-wa... \u79d1\u6280\u65b0\u5831 TechNews \u53f0\u7a4d\u96fb\u767c\u5c55\u5de5\u696d\u5ee2\u6c34\u518d\u751f\u6280\u8853\uff0c\u5357\u79d1\u5de5\u7a0b\u660e\u5e74\u555f\u52d5 - \u79d1\u6280\u65b0\u5831 TechNews 3 2020 - 04 - 01 00 : 59 : 38 2330 & lt ; a href = \"https://tw.news.yahoo.com/ %E 5 %8F %B... https://tw.news.yahoo.com/ %E 5 %8F %B0 %E 7%A9%8D %E ... Yahoo\u5947\u6469\u80a1\u5e02 \u53f0\u7a4d\u96fbADR31\u65e5\u4e0b\u8dcc0.03\u7f8e\u5143\u8dcc\u5e450.06%\u6298\u53f0\u80a1289.17\u5143 - Yahoo\u5947\u6469\u80a1\u5e02 4 2020 - 04 - 01 02 : 40 : 00 2330 & lt ; a href = \"https://fnc.ebc.net.tw/FncNews/Con... https://fnc.ebc.net.tw/FncNews/Content/117374 \u6771\u68ee\u8ca1\u7d93\u65b0\u805e \u5916\u8cc7:\u534a\u5c0e\u9ad4\u5eab\u5b58\u9762\u81e8\u4fee\u6b63\u53f0\u7a4d\u96fb\u71df\u6536\u6210\u9577\u3001\u76ee\u6a19\u50f9\u906d\u96d9\u964d\uff5c\u6771\u68ee\u8ca1\u7d93\u65b0\u805e - \u6771\u68ee\u8ca1\u7d93\u65b0\u805e R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockNews\" , data_id = \"2330\" , start_date = \"2020-04-01\" , end_date = '2020-04-03' ) ) data = response %>% content df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) date stock_id 1 : 2020-04-01 00 : 00 : 00 2330 2 : 2020-04-01 00 : 57 : 33 2330 3 : 2020-04-01 00 : 58 : 42 2330 4 : 2020-04-01 00 : 59 : 38 2330 5 : 2020-04-01 02 : 40 : 00 2330 6 : 2020-04-01 03 : 07 : 57 2330 description 1 : & lt ; a href = \"https://tw.news.yahoo.com/%E9%9B%BB%E5%AD%90%E6%99%82%E5%A0%B1-%E5%8F%B0%E7%A9%8D%E9%9B%BB3%E5%A5%88%E7%B1%B3%E7%85%A7%E8%B5%B0-%E4%B8%89%E6%98%9F%E8%A1%9D%E6%93%8A%E5%A4%A7-%E8%98%8B%E6%9E%9C%E4%B8%8B%E4%BF%AE5%E5%A5%88%E7%B1%B3%E8%A8%82%E5%96%AE-nvidia%E8%A3%9C%E4%BD%8D-000054154.html\" target = \"_blank\" & gt ; \u96fb\u5b50\u6642\u5831\uff1a\u53f0\u7a4d\u96fb 3 \u5948\u7c73\u7167\u8d70\uff0c\u4e09\u661f\u885d\u64ca\u5927\uff0c\u860b\u679c\u4e0b\u4fee 5 \u5948\u7c73\u8a02\u55ae\uff0c NVIDIA\u88dc\u4f4d & lt ; / a & gt ; & amp ; nbsp ; & amp ; nbsp ; & lt ; font color = \"#6f6f6f\" & gt ; Yahoo\u5947\u6469\u65b0\u805e & lt ; / font & gt ; 2 : & lt ; a href = \"https://udn.com/news/story/6850/4458587\" target = \"_blank\" & gt ; \u4e16\u82af\u4e2d\u570b\u4f3a\u670d\u5668\u9700\u6c42\u589e & lt ; / a & gt ; & amp ; nbsp ; & amp ; nbsp ; & lt ; font color = \"#6f6f6f\" & gt ; udn \u806f\u5408\u65b0\u805e\u7db2 & lt ; / font & gt ; 3 : & lt ; a href = \"https://finance.technews.tw/2020/04/01/tsmc-water-recycle/\" target = \"_blank\" & gt ; \u53f0\u7a4d\u96fb\u767c\u5c55\u5de5\u696d\u5ee2\u6c34\u518d\u751f\u6280\u8853\uff0c\u5357\u79d1\u5de5\u7a0b\u660e\u5e74\u555f\u52d5 & lt ; / a & gt ; & amp ; nbsp ; & amp ; nbsp ; & lt ; font color = \"#6f6f6f\" & gt ; \u79d1\u6280\u65b0\u5831 TechNews & lt ; / font & gt ; 4 : & lt ; a href = \"https://tw.news.yahoo.com/%E5%8F%B0%E7%A9%8D%E9%9B%BBadr31%E6%97%A5%E4%B8%8B%E8%B7%8C0-03%E7%BE%8E%E5%85%83%E8%B7%8C%E5%B9%850-06-%E6%8A%98%E5%8F%B0%E8%82%A1289-17%E5%85%83-004919773.html\" target = \"_blank\" & gt ; \u53f0\u7a4d\u96fb ADR31\u65e5\u4e0b\u8dcc0.03\u7f8e\u5143\u8dcc\u5e450.06 %\u6298\u53f0\u80a1289.17\u5143&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;font color=\"#6f6f6f\"&gt;Yahoo\u5947\u6469\u80a1\u5e02&lt;/font&gt; 5: &lt;a href=\"https://fnc.ebc.net.tw/FncNews/Content/117374\" target=\"_blank\"&gt;\u5916\u8cc7:\u534a\u5c0e\u9ad4\u5eab\u5b58\u9762\u81e8\u4fee\u6b63\u53f0\u7a4d\u96fb\u71df\u6536\u6210\u9577\u3001\u76ee\u6a19\u50f9\u906d\u96d9\u964d\uff5c\u6771\u68ee\u8ca1\u7d93\u65b0\u805e&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;font color=\"#6f6f6f\"&gt;\u6771\u68ee\u8ca1\u7d93\u65b0\u805e&lt;/font&gt; 6: &lt;a href=\"https://udn.com/news/story/7253/4460355\" target=\"_blank\"&gt;\u534a\u5c0e\u9ad4\u6050\u9762\u81e8\u5eab\u5b58\u4fee\u6b63 \u5916\u8cc7\u8abf\u964d\u53f0\u7a4d\u96fb\u76ee\u6a19\u50f9&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;font color=\"#6f6f6f\"&gt;udn \u806f\u5408\u65b0\u805e\u7db2&lt;/font&gt; link 1: https://tw.news.yahoo.com/% E9 %9B% BB %E5% AD %90% E6 %99% 82 %E5% A0 %B1-% E5 %8F% B0 %E7% A9 %8D% E9 %9B% BB3 %E5% A5 %88% E7 %B1% B3 %E7% 85 %A7% E8 %B5% B0 -%E4% B8 %89% E6 %98% 9 F %E8% A1 %9D% E6 %93% 8 A %E5% A4 %A7-% E8 %98% 8 B %E6% 9 E %9C% E4 %B8% 8 B %E4% BF %AE5% E5 %A5% 88 %E7% B1 %B3% E8 %A8% 82 %E5% 96 %AE-nvidia% E8 %A3% 9 C %E4% BD %8D-000054154.html 2: https://udn.com/news/story/6850/4458587 3: https://finance.technews.tw/2020/04/01/tsmc-water-recycle/ 4: https://tw.news.yahoo.com/% E5 %8F% B0 %E7% A9 %8D% E9 %9B% BBadr31 %E6% 97 %A5% E4 %B8% 8 B %E8% B7 %8C0-03% E7 %BE% 8 E %E5% 85 %83% E8 %B7% 8 C %E5% B9 %850-06-% E6 %8A% 98 %E5% 8 F %B0% E8 %82% A1289 -17 %E5% 85 %83-004919773.html 5: https://fnc.ebc.net.tw/FncNews/Content/117374 6: https://udn.com/news/story/7253/4460355 source 1: Yahoo\u5947\u6469\u65b0\u805e 2: udn \u806f\u5408\u65b0\u805e\u7db2 3: \u79d1\u6280\u65b0\u5831 TechNews 4: Yahoo\u5947\u6469\u80a1\u5e02 5: \u6771\u68ee\u8ca1\u7d93\u65b0\u805e 6: udn \u806f\u5408\u65b0\u805e\u7db2 title 1: \u96fb\u5b50\u6642\u5831\uff1a\u53f0\u7a4d\u96fb3\u5948\u7c73\u7167\u8d70\uff0c\u4e09\u661f\u885d\u64ca\u5927\uff0c\u860b\u679c\u4e0b\u4fee5\u5948\u7c73\u8a02\u55ae\uff0cNVIDIA\u88dc\u4f4d - Yahoo\u5947\u6469\u65b0\u805e 2: \u4e16\u82af\u4e2d\u570b\u4f3a\u670d\u5668\u9700\u6c42\u589e - udn \u806f\u5408\u65b0\u805e\u7db2 3: \u53f0\u7a4d\u96fb\u767c\u5c55\u5de5\u696d\u5ee2\u6c34\u518d\u751f\u6280\u8853\uff0c\u5357\u79d1\u5de5\u7a0b\u660e\u5e74\u555f\u52d5 - \u79d1\u6280\u65b0\u5831 TechNews 4: \u53f0\u7a4d\u96fbADR31\u65e5\u4e0b\u8dcc0.03\u7f8e\u5143\u8dcc\u5e450.06% \u6298\u53f0\u80a1 289.17 \u5143 - Yahoo\u5947\u6469\u80a1\u5e02 5 : \u5916\u8cc7 : \u534a\u5c0e\u9ad4\u5eab\u5b58\u9762\u81e8\u4fee\u6b63\u53f0\u7a4d\u96fb\u71df\u6536\u6210\u9577\u3001\u76ee\u6a19\u50f9\u906d\u96d9\u964d\uff5c\u6771\u68ee\u8ca1\u7d93\u65b0\u805e - \u6771\u68ee\u8ca1\u7d93\u65b0\u805e 6 : \u534a\u5c0e\u9ad4\u6050\u9762\u81e8\u5eab\u5b58\u4fee\u6b63 \u5916\u8cc7\u8abf\u964d\u53f0\u7a4d\u96fb\u76ee\u6a19\u50f9 - udn \u806f\u5408\u65b0\u805e\u7db2","title":"\u76f8\u95dc\u65b0\u805e\u8868 TaiwanStockNews"},{"location":"tutor/TaiwanMarket/Technical/","text":"\u5728\u53f0\u80a1\u6280\u8853\u9762\uff0c\u6211\u5011\u64c1\u6709 6 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u53f0\u7063\u80a1\u50f9\u8cc7\u6599\u8868 TaiwanStockPrice \u53f0\u7063\u80a1\u50f9\u53ca\u6642\u8cc7\u6599\u8868 TaiwanStockPriceMinute \u53f0\u7063\u5373\u6642\u6700\u4f73\u4e94\u6a94 TaiwanStockPriceMinuteBidAsk \u53f0\u7063\u500b\u80a1PER\u3001PBR\u8cc7\u6599\u8868 TaiwanStockPER \u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 TaiwanStockStatisticsOfOrderBookAndTrade \u53f0\u80a1\u52a0\u6b0a\u6307\u6578 TaiwanVariousIndicators5Seconds \u6839\u64da\u4e0a\u8ff0\u8cc7\u6599\u8868\u9010\u4e00\u8aaa\u660e\u600e\u9ebc\u4f7f\u7528\uff0c\u53e6\u5916\u5177\u9ad4\u8cc7\u6599\u8868 schemas \u8acb\u53c3\u8003 finmindapi \u53f0\u80a1\u7e3d\u89bd TaiwanStockInfo \u00b6 \u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u53f0\u7063\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockInfo\" , } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) industry_category stock_id stock_name type 0 ETF 0050 \u5143\u5927\u53f0\u706350 twse 1 ETF 0051 \u5143\u5927\u4e2d\u578b100 twse 2 ETF 0052 \u5bcc\u90a6\u79d1\u6280 twse 3 ETF 0053 \u5143\u5927\u96fb\u5b50 twse 4 ETF 0054 \u5143\u5927\u53f0\u554650 twse R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockInfo\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) industry_category stock_id stock_name type 1 : ETF 0050 \u5143\u5927\u53f0\u7063 50 twse 2 : ETF 0051 \u5143\u5927\u4e2d\u578b 100 twse 3 : ETF 0052 \u5bcc\u90a6\u79d1\u6280 twse 4 : ETF 0053 \u5143\u5927\u96fb\u5b50 twse 5 : ETF 0054 \u5143\u5927\u53f0\u5546 50 twse 6 : ETF 0055 \u5143\u5927 MSCI\u91d1\u878d twse \u80a1\u50f9\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanStockPrice \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPrice\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-02\" , \"end_date\" : \"2020-04-12\" , } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 0 2020 - 04 - 06 2330 59712754 16324198154 273.0 275.5 270.0 275.5 4.0 19971 1 2020 - 04 - 07 2330 48887346 13817936851 283.5 284.0 280.5 283.0 8.5 24281 2 2020 - 04 - 08 2330 38698826 11016972354 285.0 285.5 283.0 285.0 2.0 19126 3 2020 - 04 - 09 2330 29276430 8346209654 287.5 288.0 282.5 283.0 - 2.0 15271 4 2020 - 04 - 10 2330 28206858 7894277586 280.0 282.0 279.0 279.5 - 3.5 15833 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPrice\" , data_id = \"2330\" , start_date = \"2020-04-02\" , end_date = \"2020-04-08\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 1 : 2020-04-06 2330 59712754 16324198154 273.0 275.5 270.0 275.5 4.0 19971 2 : 2020-04-07 2330 48887346 13817936851 283.5 284.0 280.5 283.0 7.5 24281 3 : 2020-04-08 2330 38698826 11016972354 285.0 285.5 283.0 285.0 2.0 19126 \u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528) \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPrice\" , \"start_date\" : \"2020-04-06\" , } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 0 2020 - 04 - 06 0050 12207626 935731083 76.95 77.10 75.75 77.05 1.15 5824 1 2020 - 04 - 06 0051 33000 953030 29.05 29.05 28.74 29.05 0.38 21 2 2020 - 04 - 06 0052 178700 10660088 59.40 60.05 58.75 60.00 1.25 56 3 2020 - 04 - 06 0053 17000 589750 34.66 35.00 34.48 34.84 0.18 17 4 2020 - 04 - 06 0054 10000 200040 19.87 20.03 19.87 20.03 0.00 4 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPrice\" , start_date = \"2020-04-06\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id Trading_Volume Trading_money open max min close spread 1 : 2020-04-06 0050 12207626 935731083 76.95 77.1 75.75 77.05 1.15 2 : 2020-04-06 0051 33000 953030 29.05 29.05 28.74 29.05 0.38 3 : 2020-04-06 0052 178700 10660088 59.4 60.05 58.75 60 1.25 4 : 2020-04-06 0053 17000 589750 34.66 35 34.48 34.84 0.18 5 : 2020-04-06 0054 10000 200040 19.87 20.03 19.87 20.03 0 6 : 2020-04-06 0055 30070 463722 15.48 15.5 15.3 15.42 -0.03 Trading_turnover 1 : 5824 2 : 21 3 : 56 4 : 17 5 : 4 6 : 25 \u5373\u6642\u80a1\u50f9 TaiwanStockPriceMinute \u00b6 \u8f38\u5165 dataset\u3001stock_id \u53c3\u6578\uff0c\u6703\u56de\u50b3\u7576\u5929\u6700\u8fd1 100 \u7b46\u5373\u6642\u8cc7\u6599\u3002 \u8f38\u5165 dataset\u3001stock_id\u3001date\uff0c\u6703\u56de\u50b3 date \u7576\u5929 data\u3002 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPriceTick\" , \"data_id\" : \"2330\" } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) date stock_id deal_price volume 0 2020 - 01 - 02 09 : 00 : 00 2330 332.5 520 1 2020 - 01 - 02 09 : 00 : 05 2330 333.0 45 2 2020 - 01 - 02 09 : 00 : 10 2330 333.0 22 3 2020 - 01 - 02 09 : 00 : 15 2330 333.0 15 4 2020 - 01 - 02 09 : 00 : 20 2330 333.5 3 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPriceMinute\" , data_id = \"2330\" ) ) data = content ( response ) df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) date stock_id deal_price volume Time 1 : 2020-01-02 2330 332.5 520 09 : 00 : 00.000000000 2 : 2020-01-02 2330 333.0 45 09 : 00 : 05.000000000 3 : 2020-01-02 2330 333.0 22 09 : 00 : 10.000000000 4 : 2020-01-02 2330 333.0 15 09 : 00 : 15.000000000 5 : 2020-01-02 2330 333.5 3 09 : 00 : 20.000000000 6 : 2020-01-02 2330 333.0 20 09 : 00 : 25.000000000 \u5373\u6642\u6700\u4f73\u4e94\u6a94 TaiwanStockPriceMinuteBidAsk \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPriceMinuteBidAsk\" , \"data_id\" : \"2330\" , } resp = requests . get ( url , params = parameter ) data = resp . json ()[ \"data\" ] if data [ 'date' ] == []: data . pop ( 'date' , None ) data = pd . DataFrame ( data ) print ( data . head ()) stock_id AskPrice AskVolume BidPrice BidVolume Time 0 2330 [ 292.5 , 293.0 , 293.5 , 294.0 , 294.5 ] [ 174 , 452 , 245 , 602 , 291 ] [ 292.0 , 291.5 , 291.0 , 290.5 , 290.0 ] [ 67 , 236 , 1109 , 1505 , 7097 ] 13 : 24 : 54.559711 1 2330 [ 292.5 , 293.0 , 293.5 , 294.0 , 294.5 ] [ 174 , 452 , 245 , 602 , 291 ] [ 292.0 , 291.5 , 291.0 , 290.5 , 290.0 ] [ 67 , 236 , 1112 , 1505 , 7097 ] 13 : 24 : 54.568170 2 2330 [ 292.5 , 293.0 , 293.5 , 294.0 , 294.5 ] [ 174 , 452 , 245 , 602 , 291 ] [ 292.0 , 291.5 , 291.0 , 290.5 , 290.0 ] [ 67 , 236 , 1114 , 1505 , 7097 ] 13 : 24 : 54.592893 3 2330 [ 292.5 , 293.0 , 293.5 , 294.0 , 294.5 ] [ 174 , 452 , 245 , 602 , 291 ] [ 292.0 , 291.5 , 291.0 , 290.5 , 290.0 ] [ 67 , 236 , 1114 , 1506 , 7097 ] 13 : 24 : 54.598656 4 2330 [ 292.5 , 293.0 , 293.5 , 294.0 , 294.5 ] [ 174 , 452 , 245 , 602 , 291 ] [ 292.0 , 291.5 , 291.0 , 290.5 , 290.0 ] [ 67 , 236 , 1116 , 1506 , 7097 ] 13 : 24 : 54.907709 \u500b\u80a1PER\u3001PBR\u8cc7\u6599\u8868 TaiwanStockPER \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPER\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id dividend_yield PER PBR 0 2020 - 04 - 01 2330 3.5 20.38 4.34 1 2020 - 04 - 06 2330 3.45 20.68 4.41 2 2020 - 04 - 07 2330 3.36 21.25 4.53 3 2020 - 04 - 08 2330 3.33 21.4 4.56 4 2020 - 04 - 09 2330 3.36 21.25 4.53 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPER\" , data_id = \"2330\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id dividend_yield PER PBR 1 : 2020-01-02 2330 2.36 26.69 5.54 2 : 2020-01-03 2330 2.36 26.73 5.55 3 : 2020-01-06 2330 2.41 26.14 5.42 4 : 2020-01-07 2330 2.43 25.94 5.38 5 : 2020-01-08 2330 2.43 25.94 5.38 6 : 2020-01-09 2330 2.37 26.57 5.51 \u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 TaiwanStockStatisticsOfOrderBookAndTrade \u00b6 (\u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u53ea\u63d0\u4f9b date \u7576\u5929 data) Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockStatisticsOfOrderBookAndTrade\" , \"start_date\" : \"2021-01-07\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockStatisticsOfOrderBookAndTrade\" , start_date = \"2021-01-07\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) \u52a0\u6b0a\u6307\u6578 TaiwanVariousIndicators5Seconds \u00b6 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanVariousIndicators5Seconds\" , \"start_date\" : \"2020-07-01\" , \"end_date\" : \"2020-07-27\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date TAIEX 0 2020 - 07 - 01 09 : 00 : 00 11621.2 1 2020 - 07 - 01 09 : 00 : 05 11622.6 2 2020 - 07 - 01 09 : 00 : 10 11632.4 3 2020 - 07 - 01 09 : 00 : 15 11643.5 4 2020 - 07 - 01 09 : 00 : 20 11644.2 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanVariousIndicators5Seconds\" , start_date = \"2020-07-01\" , end_date = \"2020-07-27\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df )","title":"\u6280\u8853\u9762"},{"location":"tutor/TaiwanMarket/Technical/#taiwanstockinfo","text":"\u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u53f0\u7063\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockInfo\" , } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) industry_category stock_id stock_name type 0 ETF 0050 \u5143\u5927\u53f0\u706350 twse 1 ETF 0051 \u5143\u5927\u4e2d\u578b100 twse 2 ETF 0052 \u5bcc\u90a6\u79d1\u6280 twse 3 ETF 0053 \u5143\u5927\u96fb\u5b50 twse 4 ETF 0054 \u5143\u5927\u53f0\u554650 twse R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockInfo\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) industry_category stock_id stock_name type 1 : ETF 0050 \u5143\u5927\u53f0\u7063 50 twse 2 : ETF 0051 \u5143\u5927\u4e2d\u578b 100 twse 3 : ETF 0052 \u5bcc\u90a6\u79d1\u6280 twse 4 : ETF 0053 \u5143\u5927\u96fb\u5b50 twse 5 : ETF 0054 \u5143\u5927\u53f0\u5546 50 twse 6 : ETF 0055 \u5143\u5927 MSCI\u91d1\u878d twse","title":"\u53f0\u80a1\u7e3d\u89bd TaiwanStockInfo"},{"location":"tutor/TaiwanMarket/Technical/#taiwanstockprice","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPrice\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-02\" , \"end_date\" : \"2020-04-12\" , } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 0 2020 - 04 - 06 2330 59712754 16324198154 273.0 275.5 270.0 275.5 4.0 19971 1 2020 - 04 - 07 2330 48887346 13817936851 283.5 284.0 280.5 283.0 8.5 24281 2 2020 - 04 - 08 2330 38698826 11016972354 285.0 285.5 283.0 285.0 2.0 19126 3 2020 - 04 - 09 2330 29276430 8346209654 287.5 288.0 282.5 283.0 - 2.0 15271 4 2020 - 04 - 10 2330 28206858 7894277586 280.0 282.0 279.0 279.5 - 3.5 15833 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPrice\" , data_id = \"2330\" , start_date = \"2020-04-02\" , end_date = \"2020-04-08\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 1 : 2020-04-06 2330 59712754 16324198154 273.0 275.5 270.0 275.5 4.0 19971 2 : 2020-04-07 2330 48887346 13817936851 283.5 284.0 280.5 283.0 7.5 24281 3 : 2020-04-08 2330 38698826 11016972354 285.0 285.5 283.0 285.0 2.0 19126","title":"\u80a1\u50f9\u65e5\u6210\u4ea4\u8cc7\u8a0a TaiwanStockPrice"},{"location":"tutor/TaiwanMarket/Technical/#_1","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPrice\" , \"start_date\" : \"2020-04-06\" , } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover 0 2020 - 04 - 06 0050 12207626 935731083 76.95 77.10 75.75 77.05 1.15 5824 1 2020 - 04 - 06 0051 33000 953030 29.05 29.05 28.74 29.05 0.38 21 2 2020 - 04 - 06 0052 178700 10660088 59.40 60.05 58.75 60.00 1.25 56 3 2020 - 04 - 06 0053 17000 589750 34.66 35.00 34.48 34.84 0.18 17 4 2020 - 04 - 06 0054 10000 200040 19.87 20.03 19.87 20.03 0.00 4 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPrice\" , start_date = \"2020-04-06\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id Trading_Volume Trading_money open max min close spread 1 : 2020-04-06 0050 12207626 935731083 76.95 77.1 75.75 77.05 1.15 2 : 2020-04-06 0051 33000 953030 29.05 29.05 28.74 29.05 0.38 3 : 2020-04-06 0052 178700 10660088 59.4 60.05 58.75 60 1.25 4 : 2020-04-06 0053 17000 589750 34.66 35 34.48 34.84 0.18 5 : 2020-04-06 0054 10000 200040 19.87 20.03 19.87 20.03 0 6 : 2020-04-06 0055 30070 463722 15.48 15.5 15.3 15.42 -0.03 Trading_turnover 1 : 5824 2 : 21 3 : 56 4 : 17 5 : 4 6 : 25","title":"\u4e00\u6b21\u62ff\u7279\u5b9a\u65e5\u671f\uff0c\u6240\u6709\u8cc7\u6599(\u672a\u4f86\u5c07\u53ea\u9650\u8d0a\u52a9\u6703\u54e1\u4f7f\u7528)"},{"location":"tutor/TaiwanMarket/Technical/#taiwanstockpriceminute","text":"\u8f38\u5165 dataset\u3001stock_id \u53c3\u6578\uff0c\u6703\u56de\u50b3\u7576\u5929\u6700\u8fd1 100 \u7b46\u5373\u6642\u8cc7\u6599\u3002 \u8f38\u5165 dataset\u3001stock_id\u3001date\uff0c\u6703\u56de\u50b3 date \u7576\u5929 data\u3002 Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPriceTick\" , \"data_id\" : \"2330\" } resp = requests . get ( url , params = parameter ) data = resp . json () data = pd . DataFrame ( data [ \"data\" ]) print ( data . head ()) date stock_id deal_price volume 0 2020 - 01 - 02 09 : 00 : 00 2330 332.5 520 1 2020 - 01 - 02 09 : 00 : 05 2330 333.0 45 2 2020 - 01 - 02 09 : 00 : 10 2330 333.0 22 3 2020 - 01 - 02 09 : 00 : 15 2330 333.0 15 4 2020 - 01 - 02 09 : 00 : 20 2330 333.5 3 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPriceMinute\" , data_id = \"2330\" ) ) data = content ( response ) df = do.call ( 'cbind' , data $ data ) %>% data.table head ( df ) date stock_id deal_price volume Time 1 : 2020-01-02 2330 332.5 520 09 : 00 : 00.000000000 2 : 2020-01-02 2330 333.0 45 09 : 00 : 05.000000000 3 : 2020-01-02 2330 333.0 22 09 : 00 : 10.000000000 4 : 2020-01-02 2330 333.0 15 09 : 00 : 15.000000000 5 : 2020-01-02 2330 333.5 3 09 : 00 : 20.000000000 6 : 2020-01-02 2330 333.0 20 09 : 00 : 25.000000000","title":"\u5373\u6642\u80a1\u50f9 TaiwanStockPriceMinute"},{"location":"tutor/TaiwanMarket/Technical/#taiwanstockpriceminutebidask","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPriceMinuteBidAsk\" , \"data_id\" : \"2330\" , } resp = requests . get ( url , params = parameter ) data = resp . json ()[ \"data\" ] if data [ 'date' ] == []: data . pop ( 'date' , None ) data = pd . DataFrame ( data ) print ( data . head ()) stock_id AskPrice AskVolume BidPrice BidVolume Time 0 2330 [ 292.5 , 293.0 , 293.5 , 294.0 , 294.5 ] [ 174 , 452 , 245 , 602 , 291 ] [ 292.0 , 291.5 , 291.0 , 290.5 , 290.0 ] [ 67 , 236 , 1109 , 1505 , 7097 ] 13 : 24 : 54.559711 1 2330 [ 292.5 , 293.0 , 293.5 , 294.0 , 294.5 ] [ 174 , 452 , 245 , 602 , 291 ] [ 292.0 , 291.5 , 291.0 , 290.5 , 290.0 ] [ 67 , 236 , 1112 , 1505 , 7097 ] 13 : 24 : 54.568170 2 2330 [ 292.5 , 293.0 , 293.5 , 294.0 , 294.5 ] [ 174 , 452 , 245 , 602 , 291 ] [ 292.0 , 291.5 , 291.0 , 290.5 , 290.0 ] [ 67 , 236 , 1114 , 1505 , 7097 ] 13 : 24 : 54.592893 3 2330 [ 292.5 , 293.0 , 293.5 , 294.0 , 294.5 ] [ 174 , 452 , 245 , 602 , 291 ] [ 292.0 , 291.5 , 291.0 , 290.5 , 290.0 ] [ 67 , 236 , 1114 , 1506 , 7097 ] 13 : 24 : 54.598656 4 2330 [ 292.5 , 293.0 , 293.5 , 294.0 , 294.5 ] [ 174 , 452 , 245 , 602 , 291 ] [ 292.0 , 291.5 , 291.0 , 290.5 , 290.0 ] [ 67 , 236 , 1116 , 1506 , 7097 ] 13 : 24 : 54.907709","title":"\u5373\u6642\u6700\u4f73\u4e94\u6a94 TaiwanStockPriceMinuteBidAsk"},{"location":"tutor/TaiwanMarket/Technical/#perpbr-taiwanstockper","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockPER\" , \"data_id\" : \"2330\" , \"start_date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id dividend_yield PER PBR 0 2020 - 04 - 01 2330 3.5 20.38 4.34 1 2020 - 04 - 06 2330 3.45 20.68 4.41 2 2020 - 04 - 07 2330 3.36 21.25 4.53 3 2020 - 04 - 08 2330 3.33 21.4 4.56 4 2020 - 04 - 09 2330 3.36 21.25 4.53 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockPER\" , data_id = \"2330\" , start_date = \"2020-01-02\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df ) date stock_id dividend_yield PER PBR 1 : 2020-01-02 2330 2.36 26.69 5.54 2 : 2020-01-03 2330 2.36 26.73 5.55 3 : 2020-01-06 2330 2.41 26.14 5.42 4 : 2020-01-07 2330 2.43 25.94 5.38 5 : 2020-01-08 2330 2.43 25.94 5.38 6 : 2020-01-09 2330 2.37 26.57 5.51","title":"\u500b\u80a1PER\u3001PBR\u8cc7\u6599\u8868 TaiwanStockPER"},{"location":"tutor/TaiwanMarket/Technical/#5-taiwanstockstatisticsoforderbookandtrade","text":"(\u7531\u65bc\u8cc7\u6599\u91cf\u904e\u5927\uff0c\u53ea\u63d0\u4f9b date \u7576\u5929 data) Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanStockStatisticsOfOrderBookAndTrade\" , \"start_date\" : \"2021-01-07\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanStockStatisticsOfOrderBookAndTrade\" , start_date = \"2021-01-07\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df )","title":"\u6bcf5\u79d2\u59d4\u8a17\u6210\u4ea4\u7d71\u8a08 TaiwanStockStatisticsOfOrderBookAndTrade"},{"location":"tutor/TaiwanMarket/Technical/#taiwanvariousindicators5seconds","text":"Example Python import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v4/data\" parameter = { \"dataset\" : \"TaiwanVariousIndicators5Seconds\" , \"start_date\" : \"2020-07-01\" , \"end_date\" : \"2020-07-27\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date TAIEX 0 2020 - 07 - 01 09 : 00 : 00 11621.2 1 2020 - 07 - 01 09 : 00 : 05 11622.6 2 2020 - 07 - 01 09 : 00 : 10 11632.4 3 2020 - 07 - 01 09 : 00 : 15 11643.5 4 2020 - 07 - 01 09 : 00 : 20 11644.2 R library ( httr ) library ( data.table ) library ( dplyr ) url = 'https://api.finmindtrade.com/api/v4/data' response = httr :: GET ( url = url , query = list ( dataset = \"TaiwanVariousIndicators5Seconds\" , start_date = \"2020-07-01\" , end_date = \"2020-07-27\" ) ) data = content ( response ) df = data $ data %>% do.call ( 'rbind' , . ) %>% data.table head ( df )","title":"\u52a0\u6b0a\u6307\u6578 TaiwanVariousIndicators5Seconds"},{"location":"tutor/UnitedKingdomMarket/DataList/","text":"\u5728\u82f1\u570b\u91d1\u878d\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u82f1\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 UKStockInfo \u80a1\u50f9 TaiwanStock \u00b6 \u82f1\u570b\u80a1\u50f9\u8cc7\u6599\u8868 UKStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u7e3d\u89bd"},{"location":"tutor/UnitedKingdomMarket/DataList/#taiwanstock","text":"\u82f1\u570b\u80a1\u50f9\u8cc7\u6599\u8868 UKStockPrice \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u80a1\u50f9 TaiwanStock"},{"location":"tutor/UnitedKingdomMarket/Technical/","text":"\u5728\u82f1\u570b\u80a1\u7968\u8cc7\u6599\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u82f1\u570b\u80a1\u50f9\u8cc7\u6599\u8868 UKStockPrice \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u7684\u5217\u8868\u5982\u4e0b: \u82f1\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 UKStockInfo \u6839\u64da\u4e0a\u8ff0\u8cc7\u6599\u8868\u9010\u4e00\u8aaa\u660e\u600e\u9ebc\u4f7f\u7528\uff0c\u53e6\u5916\u5177\u9ad4\u8cc7\u6599\u8868 schemas \u8acb\u53c3\u8003 finmindapi \u82f1\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 UKStockInfo \u00b6 \u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u82f1\u570b\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=UKStockInfo' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id Country stock_name 0 2019 - 01 - 31 17 MA . L AMD EURO . BK . 22 1 2019 - 01 - 31 44 CI . L AMD EURO . BK . 21 2 2019 - 01 - 31 47 HF . L AMD EURO . BK . 21 3 2019 - 01 - 31 58 MF . L AMD EURO . BK . 21 4 2019 - 01 - 31 59 FK . L AMD EURO . BK . 20 \u82f1\u570b\u80a1\u50f9\u8cc7\u6599\u8868 UKStockPrice \u00b6 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=UKStockPrice&stock_id=BP.L&date=2019-01-01' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Adj_Close Close High ... Volume date stock_id 0 497.866 507.3 509.6 ... 33397201 2019 - 01 - 02 BP . L 1 499.240 508.7 514.4 ... 38347439 2019 - 01 - 03 BP . L 2 511.115 520.8 524.5 ... 34897489 2019 - 01 - 04 BP . L 3 511.115 520.8 524.4 ... 32659884 2019 - 01 - 07 BP . L 4 510.134 519.8 528.2 ... 28449464 2019 - 01 - 08 BP . L","title":"\u6280\u8853\u9762"},{"location":"tutor/UnitedKingdomMarket/Technical/#ukstockinfo","text":"\u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u82f1\u570b\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=UKStockInfo' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id Country stock_name 0 2019 - 01 - 31 17 MA . L AMD EURO . BK . 22 1 2019 - 01 - 31 44 CI . L AMD EURO . BK . 21 2 2019 - 01 - 31 47 HF . L AMD EURO . BK . 21 3 2019 - 01 - 31 58 MF . L AMD EURO . BK . 21 4 2019 - 01 - 31 59 FK . L AMD EURO . BK . 20","title":"\u82f1\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 UKStockInfo"},{"location":"tutor/UnitedKingdomMarket/Technical/#ukstockprice","text":"import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=UKStockPrice&stock_id=BP.L&date=2019-01-01' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) Adj_Close Close High ... Volume date stock_id 0 497.866 507.3 509.6 ... 33397201 2019 - 01 - 02 BP . L 1 499.240 508.7 514.4 ... 38347439 2019 - 01 - 03 BP . L 2 511.115 520.8 524.5 ... 34897489 2019 - 01 - 04 BP . L 3 511.115 520.8 524.4 ... 32659884 2019 - 01 - 07 BP . L 4 510.134 519.8 528.2 ... 28449464 2019 - 01 - 08 BP . L","title":"\u82f1\u570b\u80a1\u50f9\u8cc7\u6599\u8868 UKStockPrice"},{"location":"tutor/UnitedStatesMarket/DataList/","text":"\u5728\u7f8e\u570b\u91d1\u878d\u5e02\u5834\uff0c\u6211\u5011\u64c1\u6709 1 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u7f8e\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 USStockInfo \u80a1\u50f9 TaiwanStock \u00b6 \u7f8e\u570b\u80a1\u50f9 minute \u8cc7\u6599\u8868 USStockPriceMinute \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u7e3d\u89bd"},{"location":"tutor/UnitedStatesMarket/DataList/#taiwanstock","text":"\u7f8e\u570b\u80a1\u50f9 minute \u8cc7\u6599\u8868 USStockPriceMinute \u5177\u9ad4 schemas \u8acb\u53c3\u8003 finmindapi","title":"\u80a1\u50f9 TaiwanStock"},{"location":"tutor/UnitedStatesMarket/Technical/","text":"\u5728\u7f8e\u570b\u80a1\u7968\u8cc7\u6599\uff0c\u6211\u5011\u64c1\u6709 2 \u7a2e\u8cc7\u6599\u96c6\uff0c\u5982\u4e0b: \u7f8e\u570b\u80a1\u50f9 minute \u8cc7\u6599\u8868 USStockPriceMinute \u7f8e\u570b\u80a1\u50f9 daily \u8cc7\u6599\u8868 USStockPrice \u53e6\u5916\u91dd\u5c0d\u8cc7\u6599\u96c6\u6574\u7406\u51fa\u7684\u5217\u8868\u5982\u4e0b: \u7f8e\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 USStockInfo \u6839\u64da\u4e0a\u8ff0\u8cc7\u6599\u8868\u9010\u4e00\u8aaa\u660e\u600e\u9ebc\u4f7f\u7528\uff0c\u53e6\u5916\u5177\u9ad4\u8cc7\u6599\u8868 schemas \u8acb\u53c3\u8003 finmindapi \u7f8e\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 USStockInfo \u00b6 \u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u7f8e\u570b\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=USStockInfo' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date ... stock_name 0 2019 - 01 - 11 ... Dow Jones Industrial Average 1 2019 - 01 - 10 ... sp500 2 2019 - 01 - 11 ... NASDAQ Composite 3 2019 - 01 - 01 ... PHLX Semiconductor 4 None ... CBOE Volatility Index \u7f8e\u570b\u80a1\u50f9 minute \u8cc7\u6599\u8868 USStockPriceMinute \u00b6 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=USStockPriceMinute&stock_id=^DJI&date=2020-02-13' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id close ... low open volume 0 2020 - 02 - 13 20 : 02 : 00 ^ DJI 29491.0 ... 29491.0 29510.4 708882 1 2020 - 02 - 13 20 : 03 : 00 ^ DJI 29490.5 ... 29477.4 29483.9 766202 2 2020 - 02 - 13 20 : 04 : 00 ^ DJI 29468.7 ... 29467.3 29490.0 577330 3 2020 - 02 - 13 20 : 05 : 00 ^ DJI 29474.1 ... 29465.8 29468.0 439754 4 2020 - 02 - 13 20 : 06 : 00 ^ DJI 29473.3 ... 29473.3 29474.7 412897 \u7f8e\u570b\u80a1\u50f9 daily \u8cc7\u6599\u8868 USStockPrice \u00b6 import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v3/data\" parameter = { \"dataset\" : \"USStockPrice\" , \"stock_id\" : \"AAPL\" , \"date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ())","title":"\u6280\u8853\u9762"},{"location":"tutor/UnitedStatesMarket/Technical/#usstockinfo","text":"\u9019\u5f35\u8cc7\u6599\u8868\u4e3b\u8981\u662f\u5217\u51fa\u7f8e\u570b\u6240\u6709\u4e0a\u5e02\u4e0a\u6ac3\u7684\u80a1\u7968\u540d\u7a31\uff0c\u4ee3\u78bc\u548c\u7522\u696d\u985e\u5225 import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=USStockInfo' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date ... stock_name 0 2019 - 01 - 11 ... Dow Jones Industrial Average 1 2019 - 01 - 10 ... sp500 2 2019 - 01 - 11 ... NASDAQ Composite 3 2019 - 01 - 01 ... PHLX Semiconductor 4 None ... CBOE Volatility Index","title":"\u7f8e\u570b\u80a1\u7968\u6e05\u55ae\u5217\u8868 USStockInfo"},{"location":"tutor/UnitedStatesMarket/Technical/#minute-usstockpriceminute","text":"import requests import pandas as pd url = 'https://api.finmindtrade.com/api/v3/data?dataset=USStockPriceMinute&stock_id=^DJI&date=2020-02-13' data = requests . get ( url ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ()) date stock_id close ... low open volume 0 2020 - 02 - 13 20 : 02 : 00 ^ DJI 29491.0 ... 29491.0 29510.4 708882 1 2020 - 02 - 13 20 : 03 : 00 ^ DJI 29490.5 ... 29477.4 29483.9 766202 2 2020 - 02 - 13 20 : 04 : 00 ^ DJI 29468.7 ... 29467.3 29490.0 577330 3 2020 - 02 - 13 20 : 05 : 00 ^ DJI 29474.1 ... 29465.8 29468.0 439754 4 2020 - 02 - 13 20 : 06 : 00 ^ DJI 29473.3 ... 29473.3 29474.7 412897","title":"\u7f8e\u570b\u80a1\u50f9 minute \u8cc7\u6599\u8868 USStockPriceMinute"},{"location":"tutor/UnitedStatesMarket/Technical/#daily-usstockprice","text":"import requests import pandas as pd url = \"https://api.finmindtrade.com/api/v3/data\" parameter = { \"dataset\" : \"USStockPrice\" , \"stock_id\" : \"AAPL\" , \"date\" : \"2020-04-01\" , } data = requests . get ( url , params = parameter ) data = data . json () data = pd . DataFrame ( data [ 'data' ]) print ( data . head ())","title":"\u7f8e\u570b\u80a1\u50f9 daily \u8cc7\u6599\u8868 USStockPrice"},{"location":"tutor/analysis/Backtesting/","text":"\u7dda\u4e0a\u9023\u7d50 \u00b6 pip install FinMind \u521d\u59cb\u5316\uff0c\u8a2d\u5b9a\u56de\u6e2c\u80a1\u7968\u4ee3\u78bc\u3001\u6642\u9593\u5340\u9593 import pandas as pd import numpy as np from ta.momentum import StochasticOscillator from FinMind.BackTestSystem.BaseClass import Strategy from FinMind.BackTestSystem import BackTest obj = BackTest ( stock_id = \"0056\" , start_date = \"2018-01-01\" , end_date = \"2019-01-01\" , trader_fund = 500000.0 , fee = 0.001425 , ) obj . stock_price \u5c07\u6703\u7528\u4ee5\u4e0b data \u8a08\u7b97\u56de\u6e2c date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover CashEarningsDistribution StockEarningsDistribution 0 2018 - 01 - 02 0056 1868451 46856990 25.00 25.14 25.00 25.13 0.13 733.0 0.0 0.0 1 2018 - 01 - 03 0056 3846820 97179269 25.15 25.31 25.15 25.31 0.18 1202.0 0.0 0.0 2 2018 - 01 - 04 0056 2736229 69496928 25.31 25.45 25.31 25.41 0.10 957.0 0.0 0.0 3 2018 - 01 - 05 0056 2383585 60620826 25.41 25.48 25.39 25.44 0.03 782.0 0.0 0.0 4 2018 - 01 - 08 0056 3048596 77817525 25.45 25.57 25.45 25.57 0.13 1236.0 0.0 0.0 .. ... ... ... ... ... ... ... ... ... ... ... ... 242 2018 - 12 - 24 0056 1501284 36271556 24.20 24.21 24.09 24.18 0.01 773.0 0.0 0.0 243 2018 - 12 - 25 0056 13908880 332473777 24.01 24.06 23.84 23.97 - 0.21 6359.0 0.0 0.0 244 2018 - 12 - 26 0056 12600245 300239138 24.09 24.09 23.67 23.72 - 0.25 6413.0 0.0 0.0 245 2018 - 12 - 27 0056 2986526 71566004 24.00 24.02 23.90 23.91 0.19 1651.0 0.0 0.0 246 2018 - 12 - 28 0056 2657586 63571334 23.93 23.96 23.89 23.94 0.03 1075.0 0.0 0.0 \u8a2d\u8a08\u7b56\u7565 class Kd ( Strategy ): \"\"\" url: \"https://www.mirrormedia.mg/story/20180719fin012/\" summary: \u65e5KD 80 20 \u65e5K\u7dda <= 20 \u9032\u5834 \u65e5K\u7dda >= 80 \u51fa\u5834 \"\"\" kdays = 9 kd_upper = 80 kd_lower = 20 def create_trade_sign ( self , stock_price : pd . DataFrame ) -> pd . DataFrame : stock_price = stock_price . sort_values ( \"date\" ) kd = StochasticOscillator ( high = stock_price [ \"max\" ], low = stock_price [ \"min\" ], close = stock_price [ \"close\" ], n = self . kdays , ) rsv_ = kd . stoch () . fillna ( 50 ) _k = np . zeros ( stock_price . shape [ 0 ]) _d = np . zeros ( stock_price . shape [ 0 ]) for i , r in enumerate ( rsv_ ): if i == 0 : _k [ i ] = 50 _d [ i ] = 50 else : _k [ i ] = _k [ i - 1 ] * 2 / 3 + r / 3 _d [ i ] = _d [ i - 1 ] * 2 / 3 + _k [ i ] / 3 stock_price [ \"K\" ] = _k stock_price [ \"D\" ] = _d stock_price . index = range ( len ( stock_price )) stock_price [ \"signal\" ] = 0 stock_price . loc [ stock_price [ \"K\" ] <= self . kd_lower , \"signal\" ] = 1 stock_price . loc [ stock_price [ \"K\" ] >= self . kd_upper , \"signal\" ] = - 1 return stock_price \u56de\u6e2c\u6a21\u64ec\u4ea4\u6613 obj . add_strategy ( Kd ) obj . simulate () obj . final_stats output MeanProfit 2366.450976 MaxLoss - 1425.510000 FinalProfit 6196.970000 MeanProfitPer 0.470000 FinalProfitPer 1.240000 MaxLossPer - 0.290000 AnnualReturnPer 1.250000 AnnualSharpRatio 0.860000 dtype : float64 \u4ea4\u6613\u660e\u7d30 obj . trade_detail output stock_id date EverytimeProfit RealizedProfit UnrealizedProfit board_lot hold_cost hold_volume signal tax fee trade_price trader_fund 0 0056 2018 - 01 - 03 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.15 500000.00000 1 0056 2018 - 01 - 04 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.31 500000.00000 2 0056 2018 - 01 - 05 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.41 500000.00000 3 0056 2018 - 01 - 08 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.45 500000.00000 4 0056 2018 - 01 - 09 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.55 500000.00000 .. ... ... ... ... ... ... ... ... ... ... ... ... ... 241 0056 2018 - 12 - 24 7274.35 5677.56 1596.79 1000 23.742118 4000 0 0.001 0.001425 24.20 410709.09425 242 0056 2018 - 12 - 25 6516.19 5677.56 838.63 1000 23.742118 4000 0 0.001 0.001425 24.01 410709.09425 243 0056 2018 - 12 - 26 6835.42 5677.56 1157.86 1000 23.742118 4000 0 0.001 0.001425 24.09 410709.09425 244 0056 2018 - 12 - 27 6476.29 5677.56 798.73 1000 23.742118 4000 0 0.001 0.001425 24.00 410709.09425 245 0056 2018 - 12 - 28 6196.97 5677.56 519.41 1000 23.742118 4000 0 0.001 0.001425 23.93 410709.09425 \u8996\u89ba\u5316 obj . plot ()","title":"\u56de\u6e2c"},{"location":"tutor/analysis/Backtesting/#_1","text":"pip install FinMind \u521d\u59cb\u5316\uff0c\u8a2d\u5b9a\u56de\u6e2c\u80a1\u7968\u4ee3\u78bc\u3001\u6642\u9593\u5340\u9593 import pandas as pd import numpy as np from ta.momentum import StochasticOscillator from FinMind.BackTestSystem.BaseClass import Strategy from FinMind.BackTestSystem import BackTest obj = BackTest ( stock_id = \"0056\" , start_date = \"2018-01-01\" , end_date = \"2019-01-01\" , trader_fund = 500000.0 , fee = 0.001425 , ) obj . stock_price \u5c07\u6703\u7528\u4ee5\u4e0b data \u8a08\u7b97\u56de\u6e2c date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover CashEarningsDistribution StockEarningsDistribution 0 2018 - 01 - 02 0056 1868451 46856990 25.00 25.14 25.00 25.13 0.13 733.0 0.0 0.0 1 2018 - 01 - 03 0056 3846820 97179269 25.15 25.31 25.15 25.31 0.18 1202.0 0.0 0.0 2 2018 - 01 - 04 0056 2736229 69496928 25.31 25.45 25.31 25.41 0.10 957.0 0.0 0.0 3 2018 - 01 - 05 0056 2383585 60620826 25.41 25.48 25.39 25.44 0.03 782.0 0.0 0.0 4 2018 - 01 - 08 0056 3048596 77817525 25.45 25.57 25.45 25.57 0.13 1236.0 0.0 0.0 .. ... ... ... ... ... ... ... ... ... ... ... ... 242 2018 - 12 - 24 0056 1501284 36271556 24.20 24.21 24.09 24.18 0.01 773.0 0.0 0.0 243 2018 - 12 - 25 0056 13908880 332473777 24.01 24.06 23.84 23.97 - 0.21 6359.0 0.0 0.0 244 2018 - 12 - 26 0056 12600245 300239138 24.09 24.09 23.67 23.72 - 0.25 6413.0 0.0 0.0 245 2018 - 12 - 27 0056 2986526 71566004 24.00 24.02 23.90 23.91 0.19 1651.0 0.0 0.0 246 2018 - 12 - 28 0056 2657586 63571334 23.93 23.96 23.89 23.94 0.03 1075.0 0.0 0.0 \u8a2d\u8a08\u7b56\u7565 class Kd ( Strategy ): \"\"\" url: \"https://www.mirrormedia.mg/story/20180719fin012/\" summary: \u65e5KD 80 20 \u65e5K\u7dda <= 20 \u9032\u5834 \u65e5K\u7dda >= 80 \u51fa\u5834 \"\"\" kdays = 9 kd_upper = 80 kd_lower = 20 def create_trade_sign ( self , stock_price : pd . DataFrame ) -> pd . DataFrame : stock_price = stock_price . sort_values ( \"date\" ) kd = StochasticOscillator ( high = stock_price [ \"max\" ], low = stock_price [ \"min\" ], close = stock_price [ \"close\" ], n = self . kdays , ) rsv_ = kd . stoch () . fillna ( 50 ) _k = np . zeros ( stock_price . shape [ 0 ]) _d = np . zeros ( stock_price . shape [ 0 ]) for i , r in enumerate ( rsv_ ): if i == 0 : _k [ i ] = 50 _d [ i ] = 50 else : _k [ i ] = _k [ i - 1 ] * 2 / 3 + r / 3 _d [ i ] = _d [ i - 1 ] * 2 / 3 + _k [ i ] / 3 stock_price [ \"K\" ] = _k stock_price [ \"D\" ] = _d stock_price . index = range ( len ( stock_price )) stock_price [ \"signal\" ] = 0 stock_price . loc [ stock_price [ \"K\" ] <= self . kd_lower , \"signal\" ] = 1 stock_price . loc [ stock_price [ \"K\" ] >= self . kd_upper , \"signal\" ] = - 1 return stock_price \u56de\u6e2c\u6a21\u64ec\u4ea4\u6613 obj . add_strategy ( Kd ) obj . simulate () obj . final_stats output MeanProfit 2366.450976 MaxLoss - 1425.510000 FinalProfit 6196.970000 MeanProfitPer 0.470000 FinalProfitPer 1.240000 MaxLossPer - 0.290000 AnnualReturnPer 1.250000 AnnualSharpRatio 0.860000 dtype : float64 \u4ea4\u6613\u660e\u7d30 obj . trade_detail output stock_id date EverytimeProfit RealizedProfit UnrealizedProfit board_lot hold_cost hold_volume signal tax fee trade_price trader_fund 0 0056 2018 - 01 - 03 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.15 500000.00000 1 0056 2018 - 01 - 04 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.31 500000.00000 2 0056 2018 - 01 - 05 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.41 500000.00000 3 0056 2018 - 01 - 08 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.45 500000.00000 4 0056 2018 - 01 - 09 0.00 0.00 0.00 1000 0.000000 0 0 0.001 0.001425 25.55 500000.00000 .. ... ... ... ... ... ... ... ... ... ... ... ... ... 241 0056 2018 - 12 - 24 7274.35 5677.56 1596.79 1000 23.742118 4000 0 0.001 0.001425 24.20 410709.09425 242 0056 2018 - 12 - 25 6516.19 5677.56 838.63 1000 23.742118 4000 0 0.001 0.001425 24.01 410709.09425 243 0056 2018 - 12 - 26 6835.42 5677.56 1157.86 1000 23.742118 4000 0 0.001 0.001425 24.09 410709.09425 244 0056 2018 - 12 - 27 6476.29 5677.56 798.73 1000 23.742118 4000 0 0.001 0.001425 24.00 410709.09425 245 0056 2018 - 12 - 28 6196.97 5677.56 519.41 1000 23.742118 4000 0 0.001 0.001425 23.93 410709.09425 \u8996\u89ba\u5316 obj . plot ()","title":"\u7dda\u4e0a\u9023\u7d50"},{"location":"tutor/analysis/BacktestingOtherData/","text":"\u7dda\u4e0a\u9023\u7d50 \u00b6 pip install FinMind \u521d\u59cb\u5316\uff0c\u8a2d\u5b9a\u56de\u6e2c\u80a1\u7968\u4ee3\u78bc\u3001\u6642\u9593\u5340\u9593 import pandas as pd import numpy as np from ta.momentum import StochasticOscillator from FinMind.BackTestSystem.BaseClass import Strategy from FinMind.BackTestSystem import BackTest from FinMind.Data import Load obj = BackTest ( stock_id = \"2330\" , start_date = \"2018-01-01\" , end_date = \"2021-01-01\" , trader_fund = 500000.0 , fee = 0.001425 , ) obj . stock_price \u5c07\u6703\u7528\u4ee5\u4e0b data \u8a08\u7b97\u56de\u6e2c date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover CashEarningsDistribution StockEarningsDistribution 0 2018 - 01 - 02 2330 18055269 4188555408 231.5 232.5 231.0 232.5 3.0 9954.0 0.0 0.0 1 2018 - 01 - 03 2330 31706091 7504382512 236.0 238.0 235.5 237.0 4.5 13633.0 0.0 0.0 2 2018 - 01 - 04 2330 29179613 6963192636 240.0 240.0 236.5 239.5 2.5 10953.0 0.0 0.0 3 2018 - 01 - 05 2330 23721255 5681934695 240.0 240.0 238.0 240.0 0.5 8659.0 0.0 0.0 4 2018 - 01 - 08 2330 21846692 5281823362 242.0 242.5 240.5 242.0 2.0 10251.0 0.0 0.0 .. ... ... ... ... ... ... ... ... ... ... ... ... 729 2020 - 12 - 25 2330 12581145 6449612552 514.0 515.0 510.0 511.0 1.0 14988.0 0.0 0.0 730 2020 - 12 - 28 2330 19262886 9890545245 512.0 515.0 509.0 515.0 4.0 16673.0 0.0 0.0 731 2020 - 12 - 29 2330 20151736 10370562545 515.0 517.0 513.0 515.0 0.0 17186.0 0.0 0.0 732 2020 - 12 - 30 2330 46705107 24306881615 516.0 525.0 514.0 525.0 10.0 33173.0 0.0 0.0 733 2020 - 12 - 31 2330 30326332 15989936054 526.0 530.0 524.0 530.0 5.0 25134.0 0.0 0.0 \u8a2d\u8a08\u7b56\u7565 class ShortSaleMarginPurchaseRatio ( Strategy ): \"\"\" url: \"https://blog.above.tw/2018/08/15/%E7%B1%8C%E7%A2%BC%E9%9D%A2%E7%9A%84%E9%97%9C%E9%8D%B5%E6%8C%87%E6%A8%99%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/\" summary: \u7b56\u7565\u6982\u5ff5: \u5238\u8cc7\u6bd4\u8d8a\u9ad8\u4ee3\u8868\u6563\u6236\u770b\u7a7a\uff0c\u6cd5\u4eba\u8cb7\u8d85\u80a1\u7968\u6703\u4e0a\u6f32\uff0c\u9019\u6642\u5019\u8ce3\u53ef\u4ee5\u8ddf\u5927\u90e8\u5206\u6563\u6236\u9032\u884c\u76f8\u53cd\u7684\u64cd\u4f5c\uff0c\u53cd\u4e4b\u4ea6\u7136 \u7b56\u7565\u898f\u5247: \u5238\u8cc7\u6bd4>=30% \u4e14\u6cd5\u4eba\u8cb7\u8d85\u80a1\u7968, \u8ce3 \u5238\u8cc7\u6bd4<30% \u4e14\u6cd5\u4eba\u8ce3\u8d85\u80a1\u7968 \u8cb7 \"\"\" ShortSaleMarginPurchaseTodayRatioThreshold = 0.3 def load_taiwan_stock_margin_purchase_short_sale ( self ): self . TaiwanStockMarginPurchaseShortSale = Load . FinData ( dataset = \"TaiwanStockMarginPurchaseShortSale\" , select = self . stock_id , date = self . start_date , end_date = self . end_date , ) self . TaiwanStockMarginPurchaseShortSale [ [ \"ShortSaleTodayBalance\" , \"MarginPurchaseTodayBalance\" ] ] = self . TaiwanStockMarginPurchaseShortSale [ [ \"ShortSaleTodayBalance\" , \"MarginPurchaseTodayBalance\" ] ] . astype ( int ) self . TaiwanStockMarginPurchaseShortSale [ \"ShortSaleMarginPurchaseTodayRatio\" ] = ( self . TaiwanStockMarginPurchaseShortSale [ \"ShortSaleTodayBalance\" ] / self . TaiwanStockMarginPurchaseShortSale [ \"MarginPurchaseTodayBalance\" ] ) def load_institutional_investors_buy_sell ( self ): self . InstitutionalInvestorsBuySell = Load . FinData ( dataset = \"InstitutionalInvestorsBuySell\" , select = self . stock_id , date = self . start_date , end_date = self . end_date , ) self . InstitutionalInvestorsBuySell [[ \"sell\" , \"buy\" ]] = ( self . InstitutionalInvestorsBuySell [[ \"sell\" , \"buy\" ]] . fillna ( 0 ) . astype ( int ) ) self . InstitutionalInvestorsBuySell = ( self . InstitutionalInvestorsBuySell . groupby ( [ \"date\" , \"stock_id\" ], as_index = False ) . agg ({ \"buy\" : np . sum , \"sell\" : np . sum }) ) self . InstitutionalInvestorsBuySell [ \"diff\" ] = ( self . InstitutionalInvestorsBuySell [ \"buy\" ] - self . InstitutionalInvestorsBuySell [ \"sell\" ] ) def create_trade_sign ( self , stock_price : pd . DataFrame ) -> pd . DataFrame : stock_price = stock_price . sort_values ( \"date\" ) self . load_taiwan_stock_margin_purchase_short_sale () self . load_institutional_investors_buy_sell () stock_price = pd . merge ( stock_price , self . InstitutionalInvestorsBuySell [[ \"stock_id\" , \"date\" , \"diff\" ]], on = [ \"stock_id\" , \"date\" ], how = \"left\" , ) . fillna ( 0 ) stock_price = pd . merge ( stock_price , self . TaiwanStockMarginPurchaseShortSale [ [ \"stock_id\" , \"date\" , \"ShortSaleMarginPurchaseTodayRatio\" ] ], on = [ \"stock_id\" , \"date\" ], how = \"left\" , ) . fillna ( 0 ) stock_price . index = range ( len ( stock_price )) stock_price [ \"signal\" ] = 0 sell_mask = ( stock_price [ \"ShortSaleMarginPurchaseTodayRatio\" ] >= self . ShortSaleMarginPurchaseTodayRatioThreshold ) & ( stock_price [ \"diff\" ] > 0 ) stock_price . loc [ sell_mask , \"signal\" ] = - 1 buy_mask = ( stock_price [ \"ShortSaleMarginPurchaseTodayRatio\" ] < self . ShortSaleMarginPurchaseTodayRatioThreshold ) & ( stock_price [ \"diff\" ] < 0 ) stock_price . loc [ buy_mask , \"signal\" ] = 1 return stock_price \u56de\u6e2c\u6a21\u64ec\u4ea4\u6613 obj . add_strategy ( Kd ) obj . simulate () obj . final_stats output MeanProfit 187013.454352 MaxLoss - 17592.160000 FinalProfit 716596.810000 MeanProfitPer 37.400000 FinalProfitPer 143.320000 MaxLossPer - 3.520000 AnnualReturnPer 34.500000 AnnualSharpRatio 1.430000 dtype : float64 \u4ea4\u6613\u660e\u7d30 obj . trade_detail output stock_id date EverytimeProfit RealizedProfit UnrealizedProfit board_lot hold_cost hold_volume signal tax fee trade_price trader_fund 0 2330 2018 - 01 - 03 0.00 0.00 0.00 1000 0.0000 0 0 0.003 0.001425 236.0 500000.000 1 2330 2018 - 01 - 04 0.00 0.00 0.00 1000 0.0000 0 0 0.003 0.001425 240.0 500000.000 2 2330 2018 - 01 - 05 0.00 0.00 0.00 1000 0.0000 0 0 0.003 0.001425 240.0 500000.000 3 2330 2018 - 01 - 08 0.00 0.00 0.00 1000 0.0000 0 - 1 0.003 0.001425 242.0 500000.000 4 2330 2018 - 01 - 09 0.00 0.00 0.00 1000 0.0000 0 - 1 0.003 0.001425 242.0 500000.000 .. ... ... ... ... ... ... ... ... ... ... ... ... ... 728 2330 2020 - 12 - 25 692703.01 160992.91 531710.10 1000 245.8705 2000 0 0.003 0.001425 514.0 47251.925 729 2330 2020 - 12 - 28 688720.71 160992.91 527727.80 1000 245.8705 2000 0 0.003 0.001425 512.0 47251.925 730 2330 2020 - 12 - 29 694694.16 160992.91 533701.25 1000 245.8705 2000 0 0.003 0.001425 515.0 47251.925 731 2330 2020 - 12 - 30 696685.31 160992.91 535692.40 1000 245.8705 2000 0 0.003 0.001425 516.0 47251.925 732 2330 2020 - 12 - 31 716596.81 160992.91 555603.90 1000 245.8705 2000 0 0.003 0.001425 526.0 47251.925 \u8996\u89ba\u5316 obj . plot ()","title":"\u56de\u6e2c(\u5f15\u7528\u5916\u90e8 data)"},{"location":"tutor/analysis/BacktestingOtherData/#_1","text":"pip install FinMind \u521d\u59cb\u5316\uff0c\u8a2d\u5b9a\u56de\u6e2c\u80a1\u7968\u4ee3\u78bc\u3001\u6642\u9593\u5340\u9593 import pandas as pd import numpy as np from ta.momentum import StochasticOscillator from FinMind.BackTestSystem.BaseClass import Strategy from FinMind.BackTestSystem import BackTest from FinMind.Data import Load obj = BackTest ( stock_id = \"2330\" , start_date = \"2018-01-01\" , end_date = \"2021-01-01\" , trader_fund = 500000.0 , fee = 0.001425 , ) obj . stock_price \u5c07\u6703\u7528\u4ee5\u4e0b data \u8a08\u7b97\u56de\u6e2c date stock_id Trading_Volume Trading_money open max min close spread Trading_turnover CashEarningsDistribution StockEarningsDistribution 0 2018 - 01 - 02 2330 18055269 4188555408 231.5 232.5 231.0 232.5 3.0 9954.0 0.0 0.0 1 2018 - 01 - 03 2330 31706091 7504382512 236.0 238.0 235.5 237.0 4.5 13633.0 0.0 0.0 2 2018 - 01 - 04 2330 29179613 6963192636 240.0 240.0 236.5 239.5 2.5 10953.0 0.0 0.0 3 2018 - 01 - 05 2330 23721255 5681934695 240.0 240.0 238.0 240.0 0.5 8659.0 0.0 0.0 4 2018 - 01 - 08 2330 21846692 5281823362 242.0 242.5 240.5 242.0 2.0 10251.0 0.0 0.0 .. ... ... ... ... ... ... ... ... ... ... ... ... 729 2020 - 12 - 25 2330 12581145 6449612552 514.0 515.0 510.0 511.0 1.0 14988.0 0.0 0.0 730 2020 - 12 - 28 2330 19262886 9890545245 512.0 515.0 509.0 515.0 4.0 16673.0 0.0 0.0 731 2020 - 12 - 29 2330 20151736 10370562545 515.0 517.0 513.0 515.0 0.0 17186.0 0.0 0.0 732 2020 - 12 - 30 2330 46705107 24306881615 516.0 525.0 514.0 525.0 10.0 33173.0 0.0 0.0 733 2020 - 12 - 31 2330 30326332 15989936054 526.0 530.0 524.0 530.0 5.0 25134.0 0.0 0.0 \u8a2d\u8a08\u7b56\u7565 class ShortSaleMarginPurchaseRatio ( Strategy ): \"\"\" url: \"https://blog.above.tw/2018/08/15/%E7%B1%8C%E7%A2%BC%E9%9D%A2%E7%9A%84%E9%97%9C%E9%8D%B5%E6%8C%87%E6%A8%99%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/\" summary: \u7b56\u7565\u6982\u5ff5: \u5238\u8cc7\u6bd4\u8d8a\u9ad8\u4ee3\u8868\u6563\u6236\u770b\u7a7a\uff0c\u6cd5\u4eba\u8cb7\u8d85\u80a1\u7968\u6703\u4e0a\u6f32\uff0c\u9019\u6642\u5019\u8ce3\u53ef\u4ee5\u8ddf\u5927\u90e8\u5206\u6563\u6236\u9032\u884c\u76f8\u53cd\u7684\u64cd\u4f5c\uff0c\u53cd\u4e4b\u4ea6\u7136 \u7b56\u7565\u898f\u5247: \u5238\u8cc7\u6bd4>=30% \u4e14\u6cd5\u4eba\u8cb7\u8d85\u80a1\u7968, \u8ce3 \u5238\u8cc7\u6bd4<30% \u4e14\u6cd5\u4eba\u8ce3\u8d85\u80a1\u7968 \u8cb7 \"\"\" ShortSaleMarginPurchaseTodayRatioThreshold = 0.3 def load_taiwan_stock_margin_purchase_short_sale ( self ): self . TaiwanStockMarginPurchaseShortSale = Load . FinData ( dataset = \"TaiwanStockMarginPurchaseShortSale\" , select = self . stock_id , date = self . start_date , end_date = self . end_date , ) self . TaiwanStockMarginPurchaseShortSale [ [ \"ShortSaleTodayBalance\" , \"MarginPurchaseTodayBalance\" ] ] = self . TaiwanStockMarginPurchaseShortSale [ [ \"ShortSaleTodayBalance\" , \"MarginPurchaseTodayBalance\" ] ] . astype ( int ) self . TaiwanStockMarginPurchaseShortSale [ \"ShortSaleMarginPurchaseTodayRatio\" ] = ( self . TaiwanStockMarginPurchaseShortSale [ \"ShortSaleTodayBalance\" ] / self . TaiwanStockMarginPurchaseShortSale [ \"MarginPurchaseTodayBalance\" ] ) def load_institutional_investors_buy_sell ( self ): self . InstitutionalInvestorsBuySell = Load . FinData ( dataset = \"InstitutionalInvestorsBuySell\" , select = self . stock_id , date = self . start_date , end_date = self . end_date , ) self . InstitutionalInvestorsBuySell [[ \"sell\" , \"buy\" ]] = ( self . InstitutionalInvestorsBuySell [[ \"sell\" , \"buy\" ]] . fillna ( 0 ) . astype ( int ) ) self . InstitutionalInvestorsBuySell = ( self . InstitutionalInvestorsBuySell . groupby ( [ \"date\" , \"stock_id\" ], as_index = False ) . agg ({ \"buy\" : np . sum , \"sell\" : np . sum }) ) self . InstitutionalInvestorsBuySell [ \"diff\" ] = ( self . InstitutionalInvestorsBuySell [ \"buy\" ] - self . InstitutionalInvestorsBuySell [ \"sell\" ] ) def create_trade_sign ( self , stock_price : pd . DataFrame ) -> pd . DataFrame : stock_price = stock_price . sort_values ( \"date\" ) self . load_taiwan_stock_margin_purchase_short_sale () self . load_institutional_investors_buy_sell () stock_price = pd . merge ( stock_price , self . InstitutionalInvestorsBuySell [[ \"stock_id\" , \"date\" , \"diff\" ]], on = [ \"stock_id\" , \"date\" ], how = \"left\" , ) . fillna ( 0 ) stock_price = pd . merge ( stock_price , self . TaiwanStockMarginPurchaseShortSale [ [ \"stock_id\" , \"date\" , \"ShortSaleMarginPurchaseTodayRatio\" ] ], on = [ \"stock_id\" , \"date\" ], how = \"left\" , ) . fillna ( 0 ) stock_price . index = range ( len ( stock_price )) stock_price [ \"signal\" ] = 0 sell_mask = ( stock_price [ \"ShortSaleMarginPurchaseTodayRatio\" ] >= self . ShortSaleMarginPurchaseTodayRatioThreshold ) & ( stock_price [ \"diff\" ] > 0 ) stock_price . loc [ sell_mask , \"signal\" ] = - 1 buy_mask = ( stock_price [ \"ShortSaleMarginPurchaseTodayRatio\" ] < self . ShortSaleMarginPurchaseTodayRatioThreshold ) & ( stock_price [ \"diff\" ] < 0 ) stock_price . loc [ buy_mask , \"signal\" ] = 1 return stock_price \u56de\u6e2c\u6a21\u64ec\u4ea4\u6613 obj . add_strategy ( Kd ) obj . simulate () obj . final_stats output MeanProfit 187013.454352 MaxLoss - 17592.160000 FinalProfit 716596.810000 MeanProfitPer 37.400000 FinalProfitPer 143.320000 MaxLossPer - 3.520000 AnnualReturnPer 34.500000 AnnualSharpRatio 1.430000 dtype : float64 \u4ea4\u6613\u660e\u7d30 obj . trade_detail output stock_id date EverytimeProfit RealizedProfit UnrealizedProfit board_lot hold_cost hold_volume signal tax fee trade_price trader_fund 0 2330 2018 - 01 - 03 0.00 0.00 0.00 1000 0.0000 0 0 0.003 0.001425 236.0 500000.000 1 2330 2018 - 01 - 04 0.00 0.00 0.00 1000 0.0000 0 0 0.003 0.001425 240.0 500000.000 2 2330 2018 - 01 - 05 0.00 0.00 0.00 1000 0.0000 0 0 0.003 0.001425 240.0 500000.000 3 2330 2018 - 01 - 08 0.00 0.00 0.00 1000 0.0000 0 - 1 0.003 0.001425 242.0 500000.000 4 2330 2018 - 01 - 09 0.00 0.00 0.00 1000 0.0000 0 - 1 0.003 0.001425 242.0 500000.000 .. ... ... ... ... ... ... ... ... ... ... ... ... ... 728 2330 2020 - 12 - 25 692703.01 160992.91 531710.10 1000 245.8705 2000 0 0.003 0.001425 514.0 47251.925 729 2330 2020 - 12 - 28 688720.71 160992.91 527727.80 1000 245.8705 2000 0 0.003 0.001425 512.0 47251.925 730 2330 2020 - 12 - 29 694694.16 160992.91 533701.25 1000 245.8705 2000 0 0.003 0.001425 515.0 47251.925 731 2330 2020 - 12 - 30 696685.31 160992.91 535692.40 1000 245.8705 2000 0 0.003 0.001425 516.0 47251.925 732 2330 2020 - 12 - 31 716596.81 160992.91 555603.90 1000 245.8705 2000 0 0.003 0.001425 526.0 47251.925 \u8996\u89ba\u5316 obj . plot ()","title":"\u7dda\u4e0a\u9023\u7d50"}]}